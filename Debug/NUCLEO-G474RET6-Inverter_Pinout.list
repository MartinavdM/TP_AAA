
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a780  0800a780  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800a780  0800a780  0001a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a788  0800a788  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a788  0800a788  0001a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a78c  0800a78c  0001a78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800a790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000124  0800a8b4  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800a8b4  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2d3  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037dc  00000000  00000000  0003b46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111b  00000000  00000000  00040270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a8  00000000  00000000  0004138b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bbdd  00000000  00000000  0006ba33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114f8d  00000000  00000000  00087610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006960  00000000  00000000  0019c5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001a2f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a4a8 	.word	0x0800a4a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	0800a4a8 	.word	0x0800a4a8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 fe98 	bl	800933a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_ADC1_Init+0xec>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xec>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_ADC1_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000654:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0xec>)
 800065c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ADC1_Init+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	4817      	ldr	r0, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xec>)
 800067a:	f001 fccb 	bl	8002014 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000684:	f000 fb14 	bl	8000cb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000694:	f002 fdb2 	bl	80031fc <HAL_ADCEx_MultiModeConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800069e:	f000 fb07 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_ADC1_Init+0xf0>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80006aa:	2304      	movs	r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006c0:	f001 ff52 	bl	8002568 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ca:	f000 faf1 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3730      	adds	r7, #48	; 0x30
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000140 	.word	0x20000140
 80006dc:	08600004 	.word	0x08600004

080006e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2220      	movs	r2, #32
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f008 fe24 	bl	800933a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc0>)
 80006f4:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <MX_ADC2_Init+0xc4>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MX_ADC2_Init+0xc0>)
 80006fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC2_Init+0xc0>)
 800071a:	2204      	movs	r2, #4
 800071c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ADC2_Init+0xc0>)
 800072c:	2201      	movs	r2, #1
 800072e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC2_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC2_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_ADC2_Init+0xc0>)
 800075c:	f001 fc5a 	bl	8002014 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000766:	f000 faa3 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC2_Init+0xc8>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	; 0x7f
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_ADC2_Init+0xc0>)
 8000788:	f001 feee 	bl	8002568 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000792:	f000 fa8d 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001ac 	.word	0x200001ac
 80007a4:	50000100 	.word	0x50000100
 80007a8:	19200040 	.word	0x19200040

080007ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0a4      	sub	sp, #144	; 0x90
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c8:	2254      	movs	r2, #84	; 0x54
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f008 fdb4 	bl	800933a <memset>
  if(adcHandle->Instance==ADC1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007da:	f040 80a0 	bne.w	800091e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 f9f6 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80007fa:	f000 fa59 	bl	8000cb0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007fe:	4b79      	ldr	r3, [pc, #484]	; (80009e4 <HAL_ADC_MspInit+0x238>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	4a77      	ldr	r2, [pc, #476]	; (80009e4 <HAL_ADC_MspInit+0x238>)
 8000806:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000808:	4b76      	ldr	r3, [pc, #472]	; (80009e4 <HAL_ADC_MspInit+0x238>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d10b      	bne.n	8000828 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000810:	4b75      	ldr	r3, [pc, #468]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a74      	ldr	r2, [pc, #464]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b72      	ldr	r3, [pc, #456]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000828:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	4a6e      	ldr	r2, [pc, #440]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000834:	4b6c      	ldr	r3, [pc, #432]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	623b      	str	r3, [r7, #32]
 800083e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b69      	ldr	r3, [pc, #420]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	4a68      	ldr	r2, [pc, #416]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084c:	4b66      	ldr	r3, [pc, #408]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	4a62      	ldr	r2, [pc, #392]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000864:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000884:	4619      	mov	r1, r3
 8000886:	4859      	ldr	r0, [pc, #356]	; (80009ec <HAL_ADC_MspInit+0x240>)
 8000888:	f003 f9d2 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800088c:	2302      	movs	r3, #2
 800088e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008a0:	4619      	mov	r1, r3
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f003 f9c3 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_ADC1_IN15_Pin|V_Imes_ADC1_IN12_Pin;
 80008aa:	2303      	movs	r3, #3
 80008ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ae:	2303      	movs	r3, #3
 80008b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008be:	4619      	mov	r1, r3
 80008c0:	484b      	ldr	r0, [pc, #300]	; (80009f0 <HAL_ADC_MspInit+0x244>)
 80008c2:	f003 f9b5 	bl	8003c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008c6:	4b4b      	ldr	r3, [pc, #300]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008c8:	4a4b      	ldr	r2, [pc, #300]	; (80009f8 <HAL_ADC_MspInit+0x24c>)
 80008ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008ce:	2205      	movs	r2, #5
 80008d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d2:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d8:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008de:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e4:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ec:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008f6:	2220      	movs	r2, #32
 80008f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000900:	483c      	ldr	r0, [pc, #240]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 8000902:	f002 fe63 	bl	80035cc <HAL_DMA_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 800090c:	f000 f9d0 	bl	8000cb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a38      	ldr	r2, [pc, #224]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
 8000916:	4a37      	ldr	r2, [pc, #220]	; (80009f4 <HAL_ADC_MspInit+0x248>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800091c:	e05e      	b.n	80009dc <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <HAL_ADC_MspInit+0x250>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d159      	bne.n	80009dc <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800092e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000938:	4618      	mov	r0, r3
 800093a:	f004 f951 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8000944:	f000 f9b4 	bl	8000cb0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <HAL_ADC_MspInit+0x238>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <HAL_ADC_MspInit+0x238>)
 8000950:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <HAL_ADC_MspInit+0x238>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d10b      	bne.n	8000972 <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_ADC_MspInit+0x23c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009a2:	230b      	movs	r3, #11
 80009a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <HAL_ADC_MspInit+0x240>)
 80009ba:	f003 f939 	bl	8003c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f003 f92a 	bl	8003c30 <HAL_GPIO_Init>
}
 80009dc:	bf00      	nop
 80009de:	3790      	adds	r7, #144	; 0x90
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000278 	.word	0x20000278
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000400 	.word	0x48000400
 80009f4:	20000218 	.word	0x20000218
 80009f8:	40020008 	.word	0x40020008
 80009fc:	50000100 	.word	0x50000100

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_DMA_Init+0x50>)
 8000a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <MX_DMA_Init+0x50>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6493      	str	r3, [r2, #72]	; 0x48
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_DMA_Init+0x50>)
 8000a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x50>)
 8000a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <MX_DMA_Init+0x50>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6493      	str	r3, [r2, #72]	; 0x48
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x50>)
 8000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	200b      	movs	r0, #11
 8000a3c:	f002 fd9e 	bl	800357c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a40:	200b      	movs	r0, #11
 8000a42:	f002 fdb5 	bl	80035b0 <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a38      	ldr	r2, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a88:	f043 0320 	orr.w	r3, r3, #32
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a32      	ldr	r2, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f003 fa23 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2104      	movs	r1, #4
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <MX_GPIO_Init+0x118>)
 8000af4:	f003 fa1e 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_GPIO_Init+0x11c>)
 8000b10:	f003 f88e 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f003 f87f 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b32:	2304      	movs	r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_GPIO_Init+0x118>)
 8000b4a:	f003 f871 	bl	8003c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2028      	movs	r0, #40	; 0x28
 8000b54:	f002 fd12 	bl	800357c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b58:	2028      	movs	r0, #40	; 0x28
 8000b5a:	f002 fd29 	bl	80035b0 <HAL_NVIC_EnableIRQ>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	48000800 	.word	0x48000800

08000b74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b78:	f000 ffcd 	bl	8001b16 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b7c:	f000 f82c 	bl	8000bd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b80:	f7ff ff68 	bl	8000a54 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b84:	f7ff ff3c 	bl	8000a00 <MX_DMA_Init>
	MX_ADC2_Init();
 8000b88:	f7ff fdaa 	bl	80006e0 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000b8c:	f7ff fd2e 	bl	80005ec <MX_ADC1_Init>
	MX_TIM1_Init();
 8000b90:	f000 fa58 	bl	8001044 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000b94:	f000 fb1e 	bl	80011d4 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000b98:	f000 fc82 	bl	80014a0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000b9c:	f000 fccc 	bl	8001538 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Shell_Init();
 8000ba0:	f000 fdbe 	bl	8001720 <Shell_Init>
	if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000ba4:	217f      	movs	r1, #127	; 0x7f
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <main+0x5c>)
 8000ba8:	f002 fac6 	bl	8003138 <HAL_ADCEx_Calibration_Start>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <main+0x42>
		Error_Handler();
 8000bb2:	f000 f87d 	bl	8000cb0 <Error_Handler>
	if(HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4906      	ldr	r1, [pc, #24]	; (8000bd4 <main+0x60>)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <main+0x5c>)
 8000bbc:	f001 fbec 	bl	8002398 <HAL_ADC_Start_DMA>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <main+0x56>
		Error_Handler();
 8000bc6:	f000 f873 	bl	8000cb0 <Error_Handler>
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		//		HAL_ADC_ConvCpltCallback(&hadc1);
		Shell_Loop();
 8000bca:	f000 fde9 	bl	80017a0 <Shell_Loop>
 8000bce:	e7fc      	b.n	8000bca <main+0x56>
 8000bd0:	20000140 	.word	0x20000140
 8000bd4:	200004d4 	.word	0x200004d4

08000bd8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2238      	movs	r2, #56	; 0x38
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 fba7 	bl	800933a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f003 f9d6 	bl	8003fac <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c12:	2306      	movs	r3, #6
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c16:	2355      	movs	r3, #85	; 0x55
 8000c18:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f003 fa72 	bl	8004114 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000c36:	f000 f83b 	bl	8000cb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2104      	movs	r1, #4
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fd76 	bl	8004744 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000c5e:	f000 f827 	bl	8000cb0 <Error_Handler>
	}
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	; 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	//			if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
	//				Error_Handler();
	flag = 1;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200004cc 	.word	0x200004cc

08000c8c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c9e:	f000 ff53 	bl	8001b48 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40001000 	.word	0x40001000

08000cb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cf2:	f003 f9ff 	bl	80040f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_InitTick+0xc4>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <HAL_InitTick+0xc4>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <HAL_InitTick+0xc4>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 feda 	bl	8004af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3c:	f003 feac 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8000d40:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_InitTick+0xc8>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_InitTick+0xd0>)
 8000d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d72:	f004 f983 	bl	800507c <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11b      	bne.n	8000dbc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <HAL_InitTick+0xcc>)
 8000d86:	f004 f9d1 	bl	800512c <HAL_TIM_Base_Start_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d111      	bne.n	8000dbc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d98:	2036      	movs	r0, #54	; 0x36
 8000d9a:	f002 fc09 	bl	80035b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d808      	bhi.n	8000db6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	2036      	movs	r0, #54	; 0x36
 8000daa:	f002 fbe7 	bl	800357c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0xd4>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e002      	b.n	8000dbc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	2000027c 	.word	0x2000027c
 8000dd4:	40001000 	.word	0x40001000
 8000dd8:	200000c0 	.word	0x200000c0

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA1_Channel1_IRQHandler+0x10>)
 8000e3a:	f002 fdaa 	bl	8003992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000218 	.word	0x20000218

08000e48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <USART2_IRQHandler+0x10>)
 8000e4e:	f006 f971 	bl	8007134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000364 	.word	0x20000364

08000e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <USART3_IRQHandler+0x10>)
 8000e62:	f006 f967 	bl	8007134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200003f4 	.word	0x200003f4

08000e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000e74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e78:	f003 f874 	bl	8003f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM6_DAC_IRQHandler+0x10>)
 8000e86:	f004 fc7f 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000027c 	.word	0x2000027c

08000e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_kill>:

int _kill(int pid, int sig)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eae:	f008 faef 	bl	8009490 <__errno>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2216      	movs	r2, #22
 8000eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_exit>:

void _exit (int status)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ffe7 	bl	8000ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ed6:	e7fe      	b.n	8000ed6 <_exit+0x12>

08000ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e009      	b.n	8000f38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf1      	blt.n	8000f24 <_write+0x12>
  }
  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_close>:

int _close(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	605a      	str	r2, [r3, #4]
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_isatty>:

int _isatty(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f008 fa54 	bl	8009490 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20020000 	.word	0x20020000
 8001014:	00000400 	.word	0x00000400
 8001018:	200002c8 	.word	0x200002c8
 800101c:	200006a0 	.word	0x200006a0

08001020 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09c      	sub	sp, #112	; 0x70
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f008 f95b 	bl	800933a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <MX_TIM1_Init+0x188>)
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <MX_TIM1_Init+0x18c>)
 8001088:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <MX_TIM1_Init+0x188>)
 800108c:	2207      	movs	r2, #7
 800108e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001090:	4b4e      	ldr	r3, [pc, #312]	; (80011cc <MX_TIM1_Init+0x188>)
 8001092:	2220      	movs	r2, #32
 8001094:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <MX_TIM1_Init+0x188>)
 8001098:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800109c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <MX_TIM1_Init+0x188>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010a4:	4b49      	ldr	r3, [pc, #292]	; (80011cc <MX_TIM1_Init+0x188>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <MX_TIM1_Init+0x188>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b0:	4846      	ldr	r0, [pc, #280]	; (80011cc <MX_TIM1_Init+0x188>)
 80010b2:	f003 ffe3 	bl	800507c <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010bc:	f7ff fdf8 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ca:	4619      	mov	r1, r3
 80010cc:	483f      	ldr	r0, [pc, #252]	; (80011cc <MX_TIM1_Init+0x188>)
 80010ce:	f004 fdef 	bl	8005cb0 <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010d8:	f7ff fdea 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010dc:	483b      	ldr	r0, [pc, #236]	; (80011cc <MX_TIM1_Init+0x188>)
 80010de:	f004 f89d 	bl	800521c <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010e8:	f7ff fde2 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ec:	2320      	movs	r3, #32
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fc:	4619      	mov	r1, r3
 80010fe:	4833      	ldr	r0, [pc, #204]	; (80011cc <MX_TIM1_Init+0x188>)
 8001100:	f005 fcc8 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800110a:	f7ff fdd1 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4826      	ldr	r0, [pc, #152]	; (80011cc <MX_TIM1_Init+0x188>)
 8001134:	f004 fca8 	bl	8005a88 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800113e:	f7ff fdb7 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001142:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001146:	2204      	movs	r2, #4
 8001148:	4619      	mov	r1, r3
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <MX_TIM1_Init+0x188>)
 800114c:	f004 fc9c 	bl	8005a88 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001156:	f7ff fdab 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800115e:	2208      	movs	r2, #8
 8001160:	4619      	mov	r1, r3
 8001162:	481a      	ldr	r0, [pc, #104]	; (80011cc <MX_TIM1_Init+0x188>)
 8001164:	f004 fc90 	bl	8005a88 <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800116e:	f7ff fd9f 	bl	8000cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM1_Init+0x188>)
 80011b0:	f005 fd06 	bl	8006bc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80011ba:	f7ff fd79 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM1_Init+0x188>)
 80011c0:	f000 f906 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3770      	adds	r7, #112	; 0x70
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002cc 	.word	0x200002cc
 80011d0:	40012c00 	.word	0x40012c00

080011d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b092      	sub	sp, #72	; 0x48
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f8a9 	bl	800933a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
 8001202:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <MX_TIM3_Init+0xf0>)
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <MX_TIM3_Init+0xf4>)
 8001208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <MX_TIM3_Init+0xf0>)
 800120c:	f244 2267 	movw	r2, #16999	; 0x4267
 8001210:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <MX_TIM3_Init+0xf0>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <MX_TIM3_Init+0xf0>)
 800121a:	f242 720f 	movw	r2, #9999	; 0x270f
 800121e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <MX_TIM3_Init+0xf0>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <MX_TIM3_Init+0xf0>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800122c:	2301      	movs	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001240:	2300      	movs	r3, #0
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001244:	2301      	movs	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	481b      	ldr	r0, [pc, #108]	; (80012c4 <MX_TIM3_Init+0xf0>)
 8001258:	f004 f9f0 	bl	800563c <HAL_TIM_Encoder_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001262:	f7ff fd25 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM3_Init+0xf0>)
 8001276:	f005 fc0d 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001280:	f7ff fd16 	bl	8000cb0 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim3, &sEncoderIndexConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <MX_TIM3_Init+0xf0>)
 80012a2:	f005 fd64 	bl	8006d6e <HAL_TIMEx_ConfigEncoderIndex>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80012ac:	f7ff fd00 	bl	8000cb0 <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim3, TIM_TIM3_ETR_COMP1);
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM3_Init+0xf0>)
 80012b6:	f005 fd35 	bl	8006d24 <HAL_TIMEx_RemapConfig>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3748      	adds	r7, #72	; 0x48
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000318 	.word	0x20000318
 80012c8:	40000400 	.word	0x40000400

080012cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_TIM_Base_MspInit+0x38>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10b      	bne.n	80012f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_TIM_Base_MspInit+0x3c>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_TIM_Base_MspInit+0x3c>)
 80012e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_TIM_Base_MspInit+0x3c>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40012c00 	.word	0x40012c00
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_TIM_Encoder_MspInit+0xb8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d145      	bne.n	80013ba <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_TIM_Encoder_MspInit+0xbc>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001376:	2350      	movs	r3, #80	; 0x50
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001386:	2302      	movs	r3, #2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f002 fc4c 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_TIM_Encoder_MspInit+0xc0>)
 80013b6:	f002 fc3b 	bl	8003c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000800 	.word	0x48000800

080013d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a29      	ldr	r2, [pc, #164]	; (8001494 <HAL_TIM_MspPostInit+0xc4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d14b      	bne.n	800148a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <HAL_TIM_MspPostInit+0xc8>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a28      	ldr	r2, [pc, #160]	; (8001498 <HAL_TIM_MspPostInit+0xc8>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_TIM_MspPostInit+0xc8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_TIM_MspPostInit+0xc8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_TIM_MspPostInit+0xc8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_TIM_MspPostInit+0xc8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001422:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001434:	2306      	movs	r3, #6
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <HAL_TIM_MspPostInit+0xcc>)
 8001440:	f002 fbf6 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001456:	2304      	movs	r3, #4
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480e      	ldr	r0, [pc, #56]	; (800149c <HAL_TIM_MspPostInit+0xcc>)
 8001462:	f002 fbe5 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001466:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001478:	2306      	movs	r3, #6
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f002 fbd3 	bl	8003c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00
 8001498:	40021000 	.word	0x40021000
 800149c:	48000400 	.word	0x48000400

080014a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <MX_USART2_UART_Init+0x94>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014ea:	f005 fce6 	bl	8006eba <HAL_UART_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014f4:	f7ff fbdc 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_USART2_UART_Init+0x90>)
 80014fc:	f007 fc89 	bl	8008e12 <HAL_UARTEx_SetTxFifoThreshold>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001506:	f7ff fbd3 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <MX_USART2_UART_Init+0x90>)
 800150e:	f007 fcbe 	bl	8008e8e <HAL_UARTEx_SetRxFifoThreshold>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001518:	f7ff fbca 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_USART2_UART_Init+0x90>)
 800151e:	f007 fc3f 	bl	8008da0 <HAL_UARTEx_DisableFifoMode>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001528:	f7ff fbc2 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000364 	.word	0x20000364
 8001534:	40004400 	.word	0x40004400

08001538 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <MX_USART3_UART_Init+0x94>)
 8001540:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001582:	f005 fc9a 	bl	8006eba <HAL_UART_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800158c:	f7ff fb90 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001590:	2100      	movs	r1, #0
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 8001594:	f007 fc3d 	bl	8008e12 <HAL_UARTEx_SetTxFifoThreshold>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800159e:	f7ff fb87 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 80015a6:	f007 fc72 	bl	8008e8e <HAL_UARTEx_SetRxFifoThreshold>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015b0:	f7ff fb7e 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_USART3_UART_Init+0x90>)
 80015b6:	f007 fbf3 	bl	8008da0 <HAL_UARTEx_DisableFifoMode>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015c0:	f7ff fb76 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200003f4 	.word	0x200003f4
 80015cc:	40004800 	.word	0x40004800

080015d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0a0      	sub	sp, #128	; 0x80
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	2254      	movs	r2, #84	; 0x54
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f007 fea2 	bl	800933a <memset>
  if(uartHandle->Instance==USART2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a45      	ldr	r2, [pc, #276]	; (8001710 <HAL_UART_MspInit+0x140>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d13f      	bne.n	8001680 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001600:	2302      	movs	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fae7 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001618:	f7ff fb4a 	bl	8000cb0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161c:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_UART_MspInit+0x144>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	4a3c      	ldr	r2, [pc, #240]	; (8001714 <HAL_UART_MspInit+0x144>)
 8001622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001626:	6593      	str	r3, [r2, #88]	; 0x58
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_UART_MspInit+0x144>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_UART_MspInit+0x144>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	4a36      	ldr	r2, [pc, #216]	; (8001714 <HAL_UART_MspInit+0x144>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_UART_MspInit+0x144>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800164c:	230c      	movs	r3, #12
 800164e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165c:	2307      	movs	r3, #7
 800165e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f002 fae1 	bl	8003c30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2026      	movs	r0, #38	; 0x26
 8001674:	f001 ff82 	bl	800357c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001678:	2026      	movs	r0, #38	; 0x26
 800167a:	f001 ff99 	bl	80035b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800167e:	e043      	b.n	8001708 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <HAL_UART_MspInit+0x148>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d13e      	bne.n	8001708 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800168a:	2304      	movs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4618      	mov	r0, r3
 8001698:	f003 faa2 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80016a2:	f7ff fb05 	bl	8000cb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_UART_MspInit+0x144>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_UART_MspInit+0x144>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_UART_MspInit+0x144>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_UART_MspInit+0x144>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_UART_MspInit+0x144>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_UART_MspInit+0x144>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e8:	2307      	movs	r3, #7
 80016ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016f0:	4619      	mov	r1, r3
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <HAL_UART_MspInit+0x14c>)
 80016f4:	f002 fa9c 	bl	8003c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2027      	movs	r0, #39	; 0x27
 80016fe:	f001 ff3d 	bl	800357c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001702:	2027      	movs	r0, #39	; 0x27
 8001704:	f001 ff54 	bl	80035b0 <HAL_NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3780      	adds	r7, #128	; 0x80
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40004400 	.word	0x40004400
 8001714:	40021000 	.word	0x40021000
 8001718:	40004800 	.word	0x40004800
 800171c:	48000800 	.word	0x48000800

08001720 <Shell_Init>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;
int 		onOffCmd;

void Shell_Init(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	memset(argv, (int)NULL, MAX_ARGS*sizeof(char*));
 8001724:	2224      	movs	r2, #36	; 0x24
 8001726:	2100      	movs	r1, #0
 8001728:	4816      	ldr	r0, [pc, #88]	; (8001784 <Shell_Init+0x64>)
 800172a:	f007 fe06 	bl	800933a <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	2100      	movs	r1, #0
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <Shell_Init+0x68>)
 8001734:	f007 fe01 	bl	800933a <memset>
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <Shell_Init+0x6c>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	2100      	movs	r1, #0
 8001742:	4813      	ldr	r0, [pc, #76]	; (8001790 <Shell_Init+0x70>)
 8001744:	f007 fdf9 	bl	800933a <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001748:	2201      	movs	r2, #1
 800174a:	4910      	ldr	r1, [pc, #64]	; (800178c <Shell_Init+0x6c>)
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <Shell_Init+0x74>)
 800174e:	f005 fc9b 	bl	8007088 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <Shell_Init+0x78>)
 8001754:	f7fe fd6e 	bl	8000234 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	490d      	ldr	r1, [pc, #52]	; (8001798 <Shell_Init+0x78>)
 8001762:	480c      	ldr	r0, [pc, #48]	; (8001794 <Shell_Init+0x74>)
 8001764:	f005 fbf9 	bl	8006f5a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <Shell_Init+0x7c>)
 800176a:	f7fe fd63 	bl	8000234 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	4909      	ldr	r1, [pc, #36]	; (800179c <Shell_Init+0x7c>)
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <Shell_Init+0x74>)
 800177a:	f005 fbee 	bl	8006f5a <HAL_UART_Transmit>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000051c 	.word	0x2000051c
 8001788:	200004d8 	.word	0x200004d8
 800178c:	20000488 	.word	0x20000488
 8001790:	2000048c 	.word	0x2000048c
 8001794:	20000364 	.word	0x20000364
 8001798:	20000020 	.word	0x20000020
 800179c:	20000004 	.word	0x20000004

080017a0 <Shell_Loop>:

void Shell_Loop(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80017a6:	4ba0      	ldr	r3, [pc, #640]	; (8001a28 <Shell_Loop+0x288>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d05b      	beq.n	8001866 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80017ae:	4b9f      	ldr	r3, [pc, #636]	; (8001a2c <Shell_Loop+0x28c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d034      	beq.n	8001820 <Shell_Loop+0x80>
 80017b6:	2b0d      	cmp	r3, #13
 80017b8:	d142      	bne.n	8001840 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	2203      	movs	r2, #3
 80017c0:	499b      	ldr	r1, [pc, #620]	; (8001a30 <Shell_Loop+0x290>)
 80017c2:	489c      	ldr	r0, [pc, #624]	; (8001a34 <Shell_Loop+0x294>)
 80017c4:	f005 fbc9 	bl	8006f5a <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80017c8:	4b9b      	ldr	r3, [pc, #620]	; (8001a38 <Shell_Loop+0x298>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a9b      	ldr	r2, [pc, #620]	; (8001a3c <Shell_Loop+0x29c>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80017d2:	4b9b      	ldr	r3, [pc, #620]	; (8001a40 <Shell_Loop+0x2a0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80017d8:	499a      	ldr	r1, [pc, #616]	; (8001a44 <Shell_Loop+0x2a4>)
 80017da:	4898      	ldr	r0, [pc, #608]	; (8001a3c <Shell_Loop+0x29c>)
 80017dc:	f007 fdb6 	bl	800934c <strtok>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a99      	ldr	r2, [pc, #612]	; (8001a48 <Shell_Loop+0x2a8>)
 80017e4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80017e6:	e010      	b.n	800180a <Shell_Loop+0x6a>
				argv[argc++] = token;
 80017e8:	4b95      	ldr	r3, [pc, #596]	; (8001a40 <Shell_Loop+0x2a0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4994      	ldr	r1, [pc, #592]	; (8001a40 <Shell_Loop+0x2a0>)
 80017f0:	600a      	str	r2, [r1, #0]
 80017f2:	4a95      	ldr	r2, [pc, #596]	; (8001a48 <Shell_Loop+0x2a8>)
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	4995      	ldr	r1, [pc, #596]	; (8001a4c <Shell_Loop+0x2ac>)
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80017fc:	4991      	ldr	r1, [pc, #580]	; (8001a44 <Shell_Loop+0x2a4>)
 80017fe:	2000      	movs	r0, #0
 8001800:	f007 fda4 	bl	800934c <strtok>
 8001804:	4603      	mov	r3, r0
 8001806:	4a90      	ldr	r2, [pc, #576]	; (8001a48 <Shell_Loop+0x2a8>)
 8001808:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800180a:	4b8f      	ldr	r3, [pc, #572]	; (8001a48 <Shell_Loop+0x2a8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ea      	bne.n	80017e8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <Shell_Loop+0x298>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001818:	4b8d      	ldr	r3, [pc, #564]	; (8001a50 <Shell_Loop+0x2b0>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]
			break;
 800181e:	e01f      	b.n	8001860 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001820:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <Shell_Loop+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	4984      	ldr	r1, [pc, #528]	; (8001a38 <Shell_Loop+0x298>)
 8001828:	600a      	str	r2, [r1, #0]
 800182a:	4a84      	ldr	r2, [pc, #528]	; (8001a3c <Shell_Loop+0x29c>)
 800182c:	2100      	movs	r1, #0
 800182e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2204      	movs	r2, #4
 8001836:	4987      	ldr	r1, [pc, #540]	; (8001a54 <Shell_Loop+0x2b4>)
 8001838:	487e      	ldr	r0, [pc, #504]	; (8001a34 <Shell_Loop+0x294>)
 800183a:	f005 fb8e 	bl	8006f5a <HAL_UART_Transmit>
			break;
 800183e:	e00f      	b.n	8001860 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001840:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <Shell_Loop+0x298>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	497c      	ldr	r1, [pc, #496]	; (8001a38 <Shell_Loop+0x298>)
 8001848:	600a      	str	r2, [r1, #0]
 800184a:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <Shell_Loop+0x28c>)
 800184c:	7811      	ldrb	r1, [r2, #0]
 800184e:	4a7b      	ldr	r2, [pc, #492]	; (8001a3c <Shell_Loop+0x29c>)
 8001850:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	2201      	movs	r2, #1
 8001858:	4974      	ldr	r1, [pc, #464]	; (8001a2c <Shell_Loop+0x28c>)
 800185a:	4876      	ldr	r0, [pc, #472]	; (8001a34 <Shell_Loop+0x294>)
 800185c:	f005 fb7d 	bl	8006f5a <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001860:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <Shell_Loop+0x288>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <Shell_Loop+0x2b0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80d7 	beq.w	8001a1e <Shell_Loop+0x27e>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001870:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <Shell_Loop+0x2ac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4978      	ldr	r1, [pc, #480]	; (8001a58 <Shell_Loop+0x2b8>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fcd2 	bl	8000220 <strcmp>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d107      	bne.n	8001892 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	221a      	movs	r2, #26
 8001888:	4974      	ldr	r1, [pc, #464]	; (8001a5c <Shell_Loop+0x2bc>)
 800188a:	486a      	ldr	r0, [pc, #424]	; (8001a34 <Shell_Loop+0x294>)
 800188c:	f005 fb65 	bl	8006f5a <HAL_UART_Transmit>
 8001890:	e0a4      	b.n	80019dc <Shell_Loop+0x23c>
		}
		else if(strcmp(argv[0],"help")==0){
 8001892:	4b6e      	ldr	r3, [pc, #440]	; (8001a4c <Shell_Loop+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4972      	ldr	r1, [pc, #456]	; (8001a60 <Shell_Loop+0x2c0>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fcc1 	bl	8000220 <strcmp>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10e      	bne.n	80018c2 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80018a4:	4a6f      	ldr	r2, [pc, #444]	; (8001a64 <Shell_Loop+0x2c4>)
 80018a6:	2140      	movs	r1, #64	; 0x40
 80018a8:	486f      	ldr	r0, [pc, #444]	; (8001a68 <Shell_Loop+0x2c8>)
 80018aa:	f007 fccf 	bl	800924c <sniprintf>
 80018ae:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	496b      	ldr	r1, [pc, #428]	; (8001a68 <Shell_Loop+0x2c8>)
 80018ba:	485e      	ldr	r0, [pc, #376]	; (8001a34 <Shell_Loop+0x294>)
 80018bc:	f005 fb4d 	bl	8006f5a <HAL_UART_Transmit>
 80018c0:	e08c      	b.n	80019dc <Shell_Loop+0x23c>
		}
		else if(strcmp(argv[0],"start")==0){
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <Shell_Loop+0x2ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4969      	ldr	r1, [pc, #420]	; (8001a6c <Shell_Loop+0x2cc>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fca9 	bl	8000220 <strcmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11a      	bne.n	800190a <Shell_Loop+0x16a>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018d4:	2100      	movs	r1, #0
 80018d6:	4866      	ldr	r0, [pc, #408]	; (8001a70 <Shell_Loop+0x2d0>)
 80018d8:	f003 fd02 	bl	80052e0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018dc:	2100      	movs	r1, #0
 80018de:	4864      	ldr	r0, [pc, #400]	; (8001a70 <Shell_Loop+0x2d0>)
 80018e0:	f004 ffb8 	bl	8006854 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018e4:	2104      	movs	r1, #4
 80018e6:	4862      	ldr	r0, [pc, #392]	; (8001a70 <Shell_Loop+0x2d0>)
 80018e8:	f003 fcfa 	bl	80052e0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80018ec:	2104      	movs	r1, #4
 80018ee:	4860      	ldr	r0, [pc, #384]	; (8001a70 <Shell_Loop+0x2d0>)
 80018f0:	f004 ffb0 	bl	8006854 <HAL_TIMEx_PWMN_Start>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
 80018f4:	4b5e      	ldr	r3, [pc, #376]	; (8001a70 <Shell_Loop+0x2d0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <Shell_Loop+0x2d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
 8001908:	e068      	b.n	80019dc <Shell_Loop+0x23c>
//			speed = 50;
		}
		else if(strcmp(argv[0],"stop")==0){
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <Shell_Loop+0x2ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4959      	ldr	r1, [pc, #356]	; (8001a74 <Shell_Loop+0x2d4>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fc85 	bl	8000220 <strcmp>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d113      	bne.n	8001944 <Shell_Loop+0x1a4>
			speed = 50;
 800191c:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <Shell_Loop+0x2d8>)
 800191e:	2232      	movs	r2, #50	; 0x32
 8001920:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001922:	2100      	movs	r1, #0
 8001924:	4852      	ldr	r0, [pc, #328]	; (8001a70 <Shell_Loop+0x2d0>)
 8001926:	f003 fded 	bl	8005504 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800192a:	2100      	movs	r1, #0
 800192c:	4850      	ldr	r0, [pc, #320]	; (8001a70 <Shell_Loop+0x2d0>)
 800192e:	f005 f853 	bl	80069d8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001932:	2104      	movs	r1, #4
 8001934:	484e      	ldr	r0, [pc, #312]	; (8001a70 <Shell_Loop+0x2d0>)
 8001936:	f003 fde5 	bl	8005504 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800193a:	2104      	movs	r1, #4
 800193c:	484c      	ldr	r0, [pc, #304]	; (8001a70 <Shell_Loop+0x2d0>)
 800193e:	f005 f84b 	bl	80069d8 <HAL_TIMEx_PWMN_Stop>
 8001942:	e04b      	b.n	80019dc <Shell_Loop+0x23c>
		}
		else if(strcmp(argv[0],"speed")==0){
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <Shell_Loop+0x2ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	494c      	ldr	r1, [pc, #304]	; (8001a7c <Shell_Loop+0x2dc>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc68 	bl	8000220 <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d13b      	bne.n	80019ce <Shell_Loop+0x22e>
			if(atoi(argv[1])>MAX_SPEED_HIGH) {
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <Shell_Loop+0x2ac>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f007 fb24 	bl	8008fa8 <atoi>
 8001960:	4603      	mov	r3, r0
 8001962:	2b3c      	cmp	r3, #60	; 0x3c
 8001964:	dd10      	ble.n	8001988 <Shell_Loop+0x1e8>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Input speed superior to maximum speed.\r\n");
 8001966:	4a46      	ldr	r2, [pc, #280]	; (8001a80 <Shell_Loop+0x2e0>)
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	483f      	ldr	r0, [pc, #252]	; (8001a68 <Shell_Loop+0x2c8>)
 800196c:	f007 fc6e 	bl	800924c <sniprintf>
 8001970:	60f8      	str	r0, [r7, #12]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	b29a      	uxth	r2, r3
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	493b      	ldr	r1, [pc, #236]	; (8001a68 <Shell_Loop+0x2c8>)
 800197c:	482d      	ldr	r0, [pc, #180]	; (8001a34 <Shell_Loop+0x294>)
 800197e:	f005 faec 	bl	8006f5a <HAL_UART_Transmit>
				speed = MAX_SPEED_HIGH;
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <Shell_Loop+0x2d8>)
 8001984:	223c      	movs	r2, #60	; 0x3c
 8001986:	601a      	str	r2, [r3, #0]
			}
			if(atoi(argv[1])<MAX_SPEED_LOW) {
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <Shell_Loop+0x2ac>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	f007 fb0b 	bl	8008fa8 <atoi>
 8001992:	4603      	mov	r3, r0
 8001994:	2b27      	cmp	r3, #39	; 0x27
 8001996:	dc10      	bgt.n	80019ba <Shell_Loop+0x21a>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Input speed superior to maximum speed.\r\n");
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <Shell_Loop+0x2e0>)
 800199a:	2140      	movs	r1, #64	; 0x40
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <Shell_Loop+0x2c8>)
 800199e:	f007 fc55 	bl	800924c <sniprintf>
 80019a2:	60b8      	str	r0, [r7, #8]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	492e      	ldr	r1, [pc, #184]	; (8001a68 <Shell_Loop+0x2c8>)
 80019ae:	4821      	ldr	r0, [pc, #132]	; (8001a34 <Shell_Loop+0x294>)
 80019b0:	f005 fad3 	bl	8006f5a <HAL_UART_Transmit>
				speed = MAX_SPEED_LOW;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <Shell_Loop+0x2d8>)
 80019b6:	2228      	movs	r2, #40	; 0x28
 80019b8:	601a      	str	r2, [r3, #0]
			}
			speed = atoi(argv[1]); // speed is a number between 0 and 100
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <Shell_Loop+0x2ac>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f007 faf2 	bl	8008fa8 <atoi>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <Shell_Loop+0x2d8>)
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e006      	b.n	80019dc <Shell_Loop+0x23c>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	2214      	movs	r2, #20
 80019d4:	492b      	ldr	r1, [pc, #172]	; (8001a84 <Shell_Loop+0x2e4>)
 80019d6:	4817      	ldr	r0, [pc, #92]	; (8001a34 <Shell_Loop+0x294>)
 80019d8:	f005 fabf 	bl	8006f5a <HAL_UART_Transmit>
		}
		if(flag == 1) {
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <Shell_Loop+0x2e8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d112      	bne.n	8001a0a <Shell_Loop+0x26a>
//			for(idx=0;idx<ADC_BUF_SIZE;idx++){
//				ADC_buffer_converted[idx] = 20*ADC_buffer[idx]+0.1;
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : 0x%4x \r\n",ADC_buffer[0]);
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <Shell_Loop+0x2ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <Shell_Loop+0x2f0>)
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	481e      	ldr	r0, [pc, #120]	; (8001a68 <Shell_Loop+0x2c8>)
 80019ee:	f007 fc2d 	bl	800924c <sniprintf>
 80019f2:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	491a      	ldr	r1, [pc, #104]	; (8001a68 <Shell_Loop+0x2c8>)
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <Shell_Loop+0x294>)
 8001a00:	f005 faab 	bl	8006f5a <HAL_UART_Transmit>
//				HAL_Delay(1000);
//			}
			flag = 0;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <Shell_Loop+0x2e8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	221c      	movs	r2, #28
 8001a10:	4920      	ldr	r1, [pc, #128]	; (8001a94 <Shell_Loop+0x2f4>)
 8001a12:	4808      	ldr	r0, [pc, #32]	; (8001a34 <Shell_Loop+0x294>)
 8001a14:	f005 faa1 	bl	8006f5a <HAL_UART_Transmit>
		newCmdReady = 0;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <Shell_Loop+0x2b0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
	}

	/*int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%ld \r\n",U_adc_value);
	HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
	HAL_Delay(1000);*/
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000484 	.word	0x20000484
 8001a2c:	20000488 	.word	0x20000488
 8001a30:	20000088 	.word	0x20000088
 8001a34:	20000364 	.word	0x20000364
 8001a38:	20000518 	.word	0x20000518
 8001a3c:	200004d8 	.word	0x200004d8
 8001a40:	20000540 	.word	0x20000540
 8001a44:	0800a4c0 	.word	0x0800a4c0
 8001a48:	20000544 	.word	0x20000544
 8001a4c:	2000051c 	.word	0x2000051c
 8001a50:	20000548 	.word	0x20000548
 8001a54:	2000008c 	.word	0x2000008c
 8001a58:	0800a4c4 	.word	0x0800a4c4
 8001a5c:	200000a4 	.word	0x200000a4
 8001a60:	0800a4d4 	.word	0x0800a4d4
 8001a64:	0800a4dc 	.word	0x0800a4dc
 8001a68:	2000048c 	.word	0x2000048c
 8001a6c:	0800a504 	.word	0x0800a504
 8001a70:	200002cc 	.word	0x200002cc
 8001a74:	0800a50c 	.word	0x0800a50c
 8001a78:	200004d0 	.word	0x200004d0
 8001a7c:	0800a514 	.word	0x0800a514
 8001a80:	0800a51c 	.word	0x0800a51c
 8001a84:	20000090 	.word	0x20000090
 8001a88:	200004cc 	.word	0x200004cc
 8001a8c:	200004d4 	.word	0x200004d4
 8001a90:	0800a548 	.word	0x0800a548
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_UART_RxCpltCallback+0x20>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <HAL_UART_RxCpltCallback+0x24>)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_UART_RxCpltCallback+0x28>)
 8001aac:	f005 faec 	bl	8007088 <HAL_UART_Receive_IT>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000484 	.word	0x20000484
 8001abc:	20000488 	.word	0x20000488
 8001ac0:	20000364 	.word	0x20000364

08001ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ac6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopForever+0xe>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopForever+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aee:	f7ff fa97 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f007 fcd3 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af6:	f7ff f83d 	bl	8000b74 <main>

08001afa <LoopForever>:

LoopForever:
    b LoopForever
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
  ldr   r0, =_estack
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001b08:	0800a790 	.word	0x0800a790
  ldr r2, =_sbss
 8001b0c:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001b10:	2000069c 	.word	0x2000069c

08001b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC1_2_IRQHandler>

08001b16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f001 fd20 	bl	8003566 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	200f      	movs	r0, #15
 8001b28:	f7ff f8ec 	bl	8000d04 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	e001      	b.n	8001b3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b38:	f7ff f8c0 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x1c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x20>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_IncTick+0x1c>)
 8001b58:	6013      	str	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	2000054c 	.word	0x2000054c
 8001b68:	200000c4 	.word	0x200000c4

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000054c 	.word	0x2000054c

08001b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
	MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3360      	adds	r3, #96	; 0x60
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <LL_ADC_SetOffset+0x44>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	03fff000 	.word	0x03fff000

08001c34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3360      	adds	r3, #96	; 0x60
 8001c42:	461a      	mov	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3360      	adds	r3, #96	; 0x60
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b087      	sub	sp, #28
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3360      	adds	r3, #96	; 0x60
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3360      	adds	r3, #96	; 0x60
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	615a      	str	r2, [r3, #20]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b087      	sub	sp, #28
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3330      	adds	r3, #48	; 0x30
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	211f      	movs	r1, #31
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	f003 011f 	and.w	r1, r3, #31
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3314      	adds	r3, #20
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	0e5b      	lsrs	r3, r3, #25
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0d1b      	lsrs	r3, r3, #20
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2107      	movs	r1, #7
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0d1b      	lsrs	r3, r3, #20
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d10a      	bne.n	8001e26 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001e24:	e00a      	b.n	8001e3c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	43db      	mvns	r3, r3
 8001e34:	401a      	ands	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	407f0000 	.word	0x407f0000

08001e4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 031f 	and.w	r3, r3, #31
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6093      	str	r3, [r2, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f40:	f043 0202 	orr.w	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <LL_ADC_IsEnabled+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_ADC_IsEnabled+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d101      	bne.n	8001f92 <LL_ADC_IsDisableOngoing+0x18>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <LL_ADC_IsDisableOngoing+0x1a>
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d101      	bne.n	8001fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d101      	bne.n	8002006 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1af      	b.n	800238e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe fbb5 	bl	80007ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff19 	bl	8001e8c <LL_ADC_IsDeepPowerDownEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff feff 	bl	8001e68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff34 	bl	8001edc <LL_ADC_IsInternalRegulatorEnabled>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff18 	bl	8001eb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002084:	4b9f      	ldr	r3, [pc, #636]	; (8002304 <HAL_ADC_Init+0x2f0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	4a9f      	ldr	r2, [pc, #636]	; (8002308 <HAL_ADC_Init+0x2f4>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	3301      	adds	r3, #1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3b01      	subs	r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff16 	bl	8001edc <LL_ADC_IsInternalRegulatorEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff76 	bl	8001fc8 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8148 	bne.w	800237c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8144 	bne.w	800237c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020fc:	f043 0202 	orr.w	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff23 	bl	8001f54 <LL_ADC_IsEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d141      	bne.n	8002198 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211c:	d004      	beq.n	8002128 <HAL_ADC_Init+0x114>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_ADC_Init+0x2f8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d10f      	bne.n	8002148 <HAL_ADC_Init+0x134>
 8002128:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800212c:	f7ff ff12 	bl	8001f54 <LL_ADC_IsEnabled>
 8002130:	4604      	mov	r4, r0
 8002132:	4876      	ldr	r0, [pc, #472]	; (800230c <HAL_ADC_Init+0x2f8>)
 8002134:	f7ff ff0e 	bl	8001f54 <LL_ADC_IsEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	4323      	orrs	r3, r4
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_ADC_Init+0x15a>
 8002148:	4871      	ldr	r0, [pc, #452]	; (8002310 <HAL_ADC_Init+0x2fc>)
 800214a:	f7ff ff03 	bl	8001f54 <LL_ADC_IsEnabled>
 800214e:	4604      	mov	r4, r0
 8002150:	4870      	ldr	r0, [pc, #448]	; (8002314 <HAL_ADC_Init+0x300>)
 8002152:	f7ff feff 	bl	8001f54 <LL_ADC_IsEnabled>
 8002156:	4603      	mov	r3, r0
 8002158:	431c      	orrs	r4, r3
 800215a:	486f      	ldr	r0, [pc, #444]	; (8002318 <HAL_ADC_Init+0x304>)
 800215c:	f7ff fefa 	bl	8001f54 <LL_ADC_IsEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	4323      	orrs	r3, r4
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d012      	beq.n	8002198 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217a:	d004      	beq.n	8002186 <HAL_ADC_Init+0x172>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a62      	ldr	r2, [pc, #392]	; (800230c <HAL_ADC_Init+0x2f8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_ADC_Init+0x176>
 8002186:	4a65      	ldr	r2, [pc, #404]	; (800231c <HAL_ADC_Init+0x308>)
 8002188:	e000      	b.n	800218c <HAL_ADC_Init+0x178>
 800218a:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_ADC_Init+0x30c>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f7ff fcf6 	bl	8001b84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7f5b      	ldrb	r3, [r3, #29]
 800219c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	045b      	lsls	r3, r3, #17
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_ADC_Init+0x310>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fed2 	bl	8001fc8 <LL_ADC_REG_IsConversionOngoing>
 8002224:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fedf 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 8002230:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d17f      	bne.n	8002338 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d17c      	bne.n	8002338 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002242:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	430b      	orrs	r3, r1
 8002266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800227e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002288:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800228c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6911      	ldr	r1, [r2, #16]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800229e:	e013      	b.n	80022c8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12a      	bne.n	8002328 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022e8:	4311      	orrs	r1, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022f4:	430a      	orrs	r2, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	e019      	b.n	8002338 <HAL_ADC_Init+0x324>
 8002304:	20000000 	.word	0x20000000
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	50000100 	.word	0x50000100
 8002310:	50000400 	.word	0x50000400
 8002314:	50000500 	.word	0x50000500
 8002318:	50000600 	.word	0x50000600
 800231c:	50000300 	.word	0x50000300
 8002320:	50000700 	.word	0x50000700
 8002324:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f023 010f 	bic.w	r1, r3, #15
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
 8002358:	e007      	b.n	800236a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020f 	bic.w	r2, r2, #15
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	65da      	str	r2, [r3, #92]	; 0x5c
 800237a:	e007      	b.n	800238c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	f043 0210 	orr.w	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800238c:	7ffb      	ldrb	r3, [r7, #31]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop

08002398 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ac:	d004      	beq.n	80023b8 <HAL_ADC_Start_DMA+0x20>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5a      	ldr	r2, [pc, #360]	; (800251c <HAL_ADC_Start_DMA+0x184>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_Start_DMA+0x24>
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_ADC_Start_DMA+0x188>)
 80023ba:	e000      	b.n	80023be <HAL_ADC_Start_DMA+0x26>
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_ADC_Start_DMA+0x18c>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fd44 	bl	8001e4c <LL_ADC_GetMultimode>
 80023c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fdfc 	bl	8001fc8 <LL_ADC_REG_IsConversionOngoing>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 809b 	bne.w	800250e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x4e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e096      	b.n	8002514 <HAL_ADC_Start_DMA+0x17c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_ADC_Start_DMA+0x190>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d008      	beq.n	800240a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d002      	beq.n	800240a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b09      	cmp	r3, #9
 8002408:	d17a      	bne.n	8002500 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fcec 	bl	8002de8 <ADC_Enable>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d16d      	bne.n	80024f6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3a      	ldr	r2, [pc, #232]	; (800251c <HAL_ADC_Start_DMA+0x184>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_ADC_Start_DMA+0xb4>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_ADC_Start_DMA+0x194>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d002      	beq.n	8002448 <HAL_ADC_Start_DMA+0xb0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e003      	b.n	8002450 <HAL_ADC_Start_DMA+0xb8>
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_ADC_Start_DMA+0x198>)
 800244a:	e001      	b.n	8002450 <HAL_ADC_Start_DMA+0xb8>
 800244c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	4293      	cmp	r3, r2
 8002456:	d002      	beq.n	800245e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	f023 0206 	bic.w	r2, r3, #6
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	661a      	str	r2, [r3, #96]	; 0x60
 8002482:	e002      	b.n	800248a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_ADC_Start_DMA+0x19c>)
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	4a28      	ldr	r2, [pc, #160]	; (8002538 <HAL_ADC_Start_DMA+0x1a0>)
 8002498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	4a27      	ldr	r2, [pc, #156]	; (800253c <HAL_ADC_Start_DMA+0x1a4>)
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	221c      	movs	r2, #28
 80024a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0210 	orr.w	r2, r2, #16
 80024c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3340      	adds	r3, #64	; 0x40
 80024dc:	4619      	mov	r1, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f001 f91b 	bl	800371c <HAL_DMA_Start_IT>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fd56 	bl	8001fa0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024f4:	e00d      	b.n	8002512 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80024fe:	e008      	b.n	8002512 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800250c:	e001      	b.n	8002512 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	50000100 	.word	0x50000100
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700
 8002528:	50000600 	.word	0x50000600
 800252c:	50000500 	.word	0x50000500
 8002530:	50000400 	.word	0x50000400
 8002534:	08002f6b 	.word	0x08002f6b
 8002538:	08003043 	.word	0x08003043
 800253c:	0800305f 	.word	0x0800305f

08002540 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0b6      	sub	sp, #216	; 0xd8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_ADC_ConfigChannel+0x24>
 8002586:	2302      	movs	r3, #2
 8002588:	f000 bc13 	b.w	8002db2 <HAL_ADC_ConfigChannel+0x84a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fd15 	bl	8001fc8 <LL_ADC_REG_IsConversionOngoing>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 83f3 	bne.w	8002d8c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7ff fbcb 	bl	8001d4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd03 	bl	8001fc8 <LL_ADC_REG_IsConversionOngoing>
 80025c2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fd0f 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 80025d0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 81d9 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 81d4 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025f0:	d10f      	bne.n	8002612 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7ff fbd2 	bl	8001da6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fb79 	bl	8001d02 <LL_ADC_SetSamplingTimeCommonConfig>
 8002610:	e00e      	b.n	8002630 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	461a      	mov	r2, r3
 8002620:	f7ff fbc1 	bl	8001da6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fb69 	bl	8001d02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	08db      	lsrs	r3, r3, #3
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d022      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002662:	f7ff fac3 	bl	8001bec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	461a      	mov	r2, r3
 8002674:	f7ff fb0f 	bl	8001c96 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7f1b      	ldrb	r3, [r3, #28]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d102      	bne.n	800268e <HAL_ADC_ConfigChannel+0x126>
 8002688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268c:	e000      	b.n	8002690 <HAL_ADC_ConfigChannel+0x128>
 800268e:	2300      	movs	r3, #0
 8002690:	461a      	mov	r2, r3
 8002692:	f7ff fb1b 	bl	8001ccc <LL_ADC_SetOffsetSaturation>
 8002696:	e17b      	b.n	8002990 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fac8 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x15c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fabd 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_ConfigChannel+0x19a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fab2 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80026f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x1b2>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e018      	b.n	800274c <HAL_ADC_ConfigChannel+0x1e4>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fa81 	bl	8001c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fa65 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x222>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fa5a 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	e01e      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x260>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fa4f 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e004      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x278>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	e018      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2aa>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e004      	b.n	8002812 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002812:	429a      	cmp	r2, r3
 8002814:	d106      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fa1e 	bl	8001c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fa02 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x2e8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f9f7 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 021f 	and.w	r2, r3, #31
 800284e:	e01e      	b.n	800288e <HAL_ADC_ConfigChannel+0x326>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f9ec 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800286e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e004      	b.n	800288c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002882:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x33e>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	e016      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x36c>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e004      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f9bd 	bl	8001c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2103      	movs	r1, #3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f9a1 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x3aa>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2103      	movs	r1, #3
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f996 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	e017      	b.n	8002942 <HAL_ADC_ConfigChannel+0x3da>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f98b 	bl	8001c34 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800292a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800292c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800292e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002934:	2320      	movs	r3, #32
 8002936:	e003      	b.n	8002940 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <HAL_ADC_ConfigChannel+0x3f2>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	e011      	b.n	800297e <HAL_ADC_ConfigChannel+0x416>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800297e:	429a      	cmp	r2, r3
 8002980:	d106      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	2103      	movs	r1, #3
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f968 	bl	8001c60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fadd 	bl	8001f54 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 813d 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7ff fa24 	bl	8001dfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4aa2      	ldr	r2, [pc, #648]	; (8002c44 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	f040 812e 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x480>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	3301      	adds	r3, #1
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2b09      	cmp	r3, #9
 80029de:	bf94      	ite	ls
 80029e0:	2301      	movls	r3, #1
 80029e2:	2300      	movhi	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e019      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4b4>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	bf94      	ite	ls
 8002a16:	2301      	movls	r3, #1
 8002a18:	2300      	movhi	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d079      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x4d4>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	069b      	lsls	r3, r3, #26
 8002a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a3a:	e015      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x500>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x520>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	e017      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x550>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	ea42 0103 	orr.w	r1, r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x576>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	e018      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x5a8>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b10:	430b      	orrs	r3, r1
 8002b12:	e07e      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x5c8>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b2e:	e015      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x5f4>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e003      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x614>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	e017      	b.n	8002bac <HAL_ADC_ConfigChannel+0x644>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	61fb      	str	r3, [r7, #28]
  return result;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x670>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	051b      	lsls	r3, r3, #20
 8002bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	e01b      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x6a8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	613b      	str	r3, [r7, #16]
  return result;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 021f 	and.w	r2, r3, #31
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	3b1e      	subs	r3, #30
 8002c0a:	051b      	lsls	r3, r3, #20
 8002c0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c10:	430b      	orrs	r3, r1
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7ff f8c5 	bl	8001da6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80be 	beq.w	8002da6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c32:	d004      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x6d6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x6ec>
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c40:	e009      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x6ee>
 8002c42:	bf00      	nop
 8002c44:	407f0000 	.word	0x407f0000
 8002c48:	80080000 	.word	0x80080000
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000300 	.word	0x50000300
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ffba 	bl	8001bd0 <LL_ADC_GetCommonPathInternalCh>
 8002c5c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <HAL_ADC_ConfigChannel+0x858>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x70c>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_ADC_ConfigChannel+0x85c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d13a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d134      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d005      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x72e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4e      	ldr	r2, [pc, #312]	; (8002dc8 <HAL_ADC_ConfigChannel+0x860>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f040 8085 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x742>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a49      	ldr	r2, [pc, #292]	; (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x746>
 8002caa:	4a49      	ldr	r2, [pc, #292]	; (8002dd0 <HAL_ADC_ConfigChannel+0x868>)
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x748>
 8002cae:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7fe ff75 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc0:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_ADC_ConfigChannel+0x86c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_ADC_ConfigChannel+0x870>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cda:	e002      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce8:	e05a      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_ADC_ConfigChannel+0x874>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d125      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7d8>
 8002cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11f      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d104      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x7ac>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <HAL_ADC_ConfigChannel+0x878>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d047      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d1c:	d004      	beq.n	8002d28 <HAL_ADC_ConfigChannel+0x7c0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x7c4>
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <HAL_ADC_ConfigChannel+0x868>)
 8002d2a:	e000      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x7c6>
 8002d2c:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f7fe ff36 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3e:	e031      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <HAL_ADC_ConfigChannel+0x87c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d12d      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d127      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d68:	d004      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x80c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_ADC_ConfigChannel+0x864>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x810>
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_ADC_ConfigChannel+0x868>)
 8002d76:	e000      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x812>
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_ADC_ConfigChannel+0x854>)
 8002d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7fe ff10 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
 8002d8a:	e00c      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d9e:	e002      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	37d8      	adds	r7, #216	; 0xd8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	50000700 	.word	0x50000700
 8002dc0:	c3210000 	.word	0xc3210000
 8002dc4:	90c00010 	.word	0x90c00010
 8002dc8:	50000600 	.word	0x50000600
 8002dcc:	50000100 	.word	0x50000100
 8002dd0:	50000300 	.word	0x50000300
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	053e2d63 	.word	0x053e2d63
 8002ddc:	c7520000 	.word	0xc7520000
 8002de0:	50000500 	.word	0x50000500
 8002de4:	cb840000 	.word	0xcb840000

08002de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f8ad 	bl	8001f54 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d14d      	bne.n	8002e9c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <ADC_Enable+0xc0>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	f043 0210 	orr.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e039      	b.n	8002e9e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f868 	bl	8001f04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e34:	f7fe fe9a 	bl	8001b6c <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e3a:	e028      	b.n	8002e8e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f887 	bl	8001f54 <LL_ADC_IsEnabled>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f857 	bl	8001f04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e56:	f7fe fe89 	bl	8001b6c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d914      	bls.n	8002e8e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d00d      	beq.n	8002e8e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e007      	b.n	8002e9e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d1cf      	bne.n	8002e3c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	8000003f 	.word	0x8000003f

08002eac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f85e 	bl	8001f7a <LL_ADC_IsDisableOngoing>
 8002ebe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f845 	bl	8001f54 <LL_ADC_IsEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d047      	beq.n	8002f60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d144      	bne.n	8002f60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030d 	and.w	r3, r3, #13
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff f81f 	bl	8001f2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe fe39 	bl	8001b6c <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002efc:	e029      	b.n	8002f52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f043 0210 	orr.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e023      	b.n	8002f62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f1a:	f7fe fe27 	bl	8001b6c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d914      	bls.n	8002f52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e007      	b.n	8002f62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1dc      	bne.n	8002f1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d14b      	bne.n	800301c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d021      	beq.n	8002fe2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fec0 	bl	8001d28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d032      	beq.n	8003014 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d12b      	bne.n	8003014 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11f      	bne.n	8003014 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fe0:	e018      	b.n	8003014 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7fd fe29 	bl	8000c6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800301a:	e00e      	b.n	800303a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fa93 	bl	8002554 <HAL_ADC_ErrorCallback>
}
 800302e:	e004      	b.n	800303a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fa75 	bl	8002540 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff fa65 	bl	8002554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <LL_ADC_IsEnabled>:
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <LL_ADC_IsEnabled+0x18>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <LL_ADC_IsEnabled+0x1a>
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_StartCalibration>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80030ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_ADC_IsCalibrationOnGoing>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030fe:	d101      	bne.n	8003104 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_ADC_REG_IsConversionOngoing>:
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d101      	bne.n	800312a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_ADCEx_Calibration_Start+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e04d      	b.n	80031f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fea5 	bl	8002eac <ADC_Disable>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d136      	bne.n	80031da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003174:	f023 0302 	bic.w	r3, r3, #2
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff96 	bl	80030b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800318c:	e014      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d90d      	bls.n	80031b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f023 0312 	bic.w	r3, r3, #18
 80031a4:	f043 0210 	orr.w	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e01b      	b.n	80031f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff94 	bl	80030ea <LL_ADC_IsCalibrationOnGoing>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e2      	bne.n	800318e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	f023 0303 	bic.w	r3, r3, #3
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80031d8:	e005      	b.n	80031e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	0004de01 	.word	0x0004de01

080031fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b0a1      	sub	sp, #132	; 0x84
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003216:	2302      	movs	r3, #2
 8003218:	e0e7      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003222:	2300      	movs	r3, #0
 8003224:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003226:	2300      	movs	r3, #0
 8003228:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003232:	d102      	bne.n	800323a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003234:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	e009      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6e      	ldr	r2, [pc, #440]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d102      	bne.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003244:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	e001      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0be      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff4f 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 8003274:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff49 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 80a0 	bne.w	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 809c 	bne.w	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003298:	d004      	beq.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032a4:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032a6:	e000      	b.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032a8:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d04b      	beq.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032c6:	035b      	lsls	r3, r3, #13
 80032c8:	430b      	orrs	r3, r1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d8:	d004      	beq.n	80032e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10f      	bne.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032e8:	f7ff fed3 	bl	8003092 <LL_ADC_IsEnabled>
 80032ec:	4604      	mov	r4, r0
 80032ee:	4841      	ldr	r0, [pc, #260]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f0:	f7ff fecf 	bl	8003092 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4323      	orrs	r3, r4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003304:	483c      	ldr	r0, [pc, #240]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003306:	f7ff fec4 	bl	8003092 <LL_ADC_IsEnabled>
 800330a:	4604      	mov	r4, r0
 800330c:	483b      	ldr	r0, [pc, #236]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800330e:	f7ff fec0 	bl	8003092 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	431c      	orrs	r4, r3
 8003316:	483c      	ldr	r0, [pc, #240]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003318:	f7ff febb 	bl	8003092 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d056      	beq.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800332e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	6811      	ldr	r1, [r2, #0]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	431a      	orrs	r2, r3
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800334a:	e047      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800334c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003356:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003360:	d004      	beq.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10f      	bne.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800336c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003370:	f7ff fe8f 	bl	8003092 <LL_ADC_IsEnabled>
 8003374:	4604      	mov	r4, r0
 8003376:	481f      	ldr	r0, [pc, #124]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003378:	f7ff fe8b 	bl	8003092 <LL_ADC_IsEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	4323      	orrs	r3, r4
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e012      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800338c:	481a      	ldr	r0, [pc, #104]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800338e:	f7ff fe80 	bl	8003092 <LL_ADC_IsEnabled>
 8003392:	4604      	mov	r4, r0
 8003394:	4819      	ldr	r0, [pc, #100]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003396:	f7ff fe7c 	bl	8003092 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	431c      	orrs	r4, r3
 800339e:	481a      	ldr	r0, [pc, #104]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033a0:	f7ff fe77 	bl	8003092 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033be:	f023 030f 	bic.w	r3, r3, #15
 80033c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c6:	e009      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033da:	e000      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3784      	adds	r7, #132	; 0x84
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	50000100 	.word	0x50000100
 80033f8:	50000400 	.word	0x50000400
 80033fc:	50000500 	.word	0x50000500
 8003400:	50000300 	.word	0x50000300
 8003404:	50000700 	.word	0x50000700
 8003408:	50000600 	.word	0x50000600

0800340c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <__NVIC_SetPriorityGrouping+0x44>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003428:	4013      	ands	r3, r2
 800342a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <__NVIC_SetPriorityGrouping+0x44>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60d3      	str	r3, [r2, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <__NVIC_GetPriorityGrouping+0x18>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	f003 0307 	and.w	r3, r3, #7
}
 8003462:	4618      	mov	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	2b00      	cmp	r3, #0
 8003480:	db0b      	blt.n	800349a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	4907      	ldr	r1, [pc, #28]	; (80034a8 <__NVIC_EnableIRQ+0x38>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2001      	movs	r0, #1
 8003492:	fa00 f202 	lsl.w	r2, r0, r2
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000e100 	.word	0xe000e100

080034ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db0a      	blt.n	80034d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	490c      	ldr	r1, [pc, #48]	; (80034f8 <__NVIC_SetPriority+0x4c>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	440b      	add	r3, r1
 80034d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d4:	e00a      	b.n	80034ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <__NVIC_SetPriority+0x50>)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3b04      	subs	r3, #4
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	440b      	add	r3, r1
 80034ea:	761a      	strb	r2, [r3, #24]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000e100 	.word	0xe000e100
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003500:	b480      	push	{r7}
 8003502:	b089      	sub	sp, #36	; 0x24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f1c3 0307 	rsb	r3, r3, #7
 800351a:	2b04      	cmp	r3, #4
 800351c:	bf28      	it	cs
 800351e:	2304      	movcs	r3, #4
 8003520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3304      	adds	r3, #4
 8003526:	2b06      	cmp	r3, #6
 8003528:	d902      	bls.n	8003530 <NVIC_EncodePriority+0x30>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3b03      	subs	r3, #3
 800352e:	e000      	b.n	8003532 <NVIC_EncodePriority+0x32>
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	401a      	ands	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003548:	f04f 31ff 	mov.w	r1, #4294967295
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	43d9      	mvns	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	4313      	orrs	r3, r2
         );
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ff4c 	bl	800340c <__NVIC_SetPriorityGrouping>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800358a:	f7ff ff63 	bl	8003454 <__NVIC_GetPriorityGrouping>
 800358e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	6978      	ldr	r0, [r7, #20]
 8003596:	f7ff ffb3 	bl	8003500 <NVIC_EncodePriority>
 800359a:	4602      	mov	r2, r0
 800359c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff82 	bl	80034ac <__NVIC_SetPriority>
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff ff56 	bl	8003470 <__NVIC_EnableIRQ>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08d      	b.n	80036fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_DMA_Init+0x138>)
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d80f      	bhi.n	800360a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <HAL_DMA_Init+0x13c>)
 80035f2:	4413      	add	r3, r2
 80035f4:	4a45      	ldr	r2, [pc, #276]	; (800370c <HAL_DMA_Init+0x140>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a42      	ldr	r2, [pc, #264]	; (8003710 <HAL_DMA_Init+0x144>)
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
 8003608:	e00e      	b.n	8003628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_DMA_Init+0x148>)
 8003612:	4413      	add	r3, r2
 8003614:	4a3d      	ldr	r2, [pc, #244]	; (800370c <HAL_DMA_Init+0x140>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <HAL_DMA_Init+0x14c>)
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa76 	bl	8003b6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003688:	d102      	bne.n	8003690 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_DMA_Init+0x104>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d80c      	bhi.n	80036d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa96 	bl	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e008      	b.n	80036e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020407 	.word	0x40020407
 8003708:	bffdfff8 	.word	0xbffdfff8
 800370c:	cccccccd 	.word	0xcccccccd
 8003710:	40020000 	.word	0x40020000
 8003714:	bffdfbf8 	.word	0xbffdfbf8
 8003718:	40020400 	.word	0x40020400

0800371c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_DMA_Start_IT+0x20>
 8003738:	2302      	movs	r3, #2
 800373a:	e066      	b.n	800380a <HAL_DMA_Start_IT+0xee>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d155      	bne.n	80037fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f9bb 	bl	8003af0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 020e 	orr.w	r2, r2, #14
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e00f      	b.n	80037b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 020a 	orr.w	r2, r2, #10
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e005      	b.n	8003808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003804:	2302      	movs	r3, #2
 8003806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d005      	beq.n	8003836 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e037      	b.n	80038a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 020e 	bic.w	r2, r2, #14
 8003844:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003854:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f003 021f 	and.w	r2, r3, #31
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003882:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d00d      	beq.n	80038f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e047      	b.n	8003988 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 020e 	bic.w	r2, r2, #14
 8003906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003944:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003966:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
    }
  }
  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2204      	movs	r2, #4
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d026      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x7a>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d021      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0204 	bic.w	r2, r2, #4
 80039e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f003 021f 	and.w	r2, r3, #31
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2104      	movs	r1, #4
 80039f4:	fa01 f202 	lsl.w	r2, r1, r2
 80039f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d071      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a0a:	e06c      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2202      	movs	r2, #2
 8003a16:	409a      	lsls	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02e      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d029      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 020a 	bic.w	r2, r2, #10
 8003a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d038      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a7c:	e033      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d02a      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d025      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
}
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d108      	bne.n	8003b50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b4e:	e007      	b.n	8003b60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	60da      	str	r2, [r3, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d802      	bhi.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e001      	b.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3b08      	subs	r3, #8
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	009a      	lsls	r2, r3, #2
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40020407 	.word	0x40020407
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	40020820 	.word	0x40020820
 8003be0:	cccccccd 	.word	0xcccccccd
 8003be4:	40020880 	.word	0x40020880

08003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c0a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	1000823f 	.word	0x1000823f
 8003c2c:	40020940 	.word	0x40020940

08003c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c3e:	e15a      	b.n	8003ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 814c 	beq.w	8003ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d005      	beq.n	8003c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d130      	bne.n	8003cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0201 	and.w	r2, r3, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d017      	beq.n	8003d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d123      	bne.n	8003d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3208      	adds	r2, #8
 8003d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	220f      	movs	r2, #15
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	6939      	ldr	r1, [r7, #16]
 8003d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a6 	beq.w	8003ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da4:	4b5b      	ldr	r3, [pc, #364]	; (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da8:	4a5a      	ldr	r2, [pc, #360]	; (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6613      	str	r3, [r2, #96]	; 0x60
 8003db0:	4b58      	ldr	r3, [pc, #352]	; (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbc:	4a56      	ldr	r2, [pc, #344]	; (8003f18 <HAL_GPIO_Init+0x2e8>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003de6:	d01f      	beq.n	8003e28 <HAL_GPIO_Init+0x1f8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a4c      	ldr	r2, [pc, #304]	; (8003f1c <HAL_GPIO_Init+0x2ec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d019      	beq.n	8003e24 <HAL_GPIO_Init+0x1f4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a4b      	ldr	r2, [pc, #300]	; (8003f20 <HAL_GPIO_Init+0x2f0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_GPIO_Init+0x1f0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <HAL_GPIO_Init+0x2f4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00d      	beq.n	8003e1c <HAL_GPIO_Init+0x1ec>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a49      	ldr	r2, [pc, #292]	; (8003f28 <HAL_GPIO_Init+0x2f8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <HAL_GPIO_Init+0x1e8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a48      	ldr	r2, [pc, #288]	; (8003f2c <HAL_GPIO_Init+0x2fc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_GPIO_Init+0x1e4>
 8003e10:	2305      	movs	r3, #5
 8003e12:	e00a      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e14:	2306      	movs	r3, #6
 8003e16:	e008      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e006      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e004      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e002      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	f002 0203 	and.w	r2, r2, #3
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	4093      	lsls	r3, r2
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3a:	4937      	ldr	r1, [pc, #220]	; (8003f18 <HAL_GPIO_Init+0x2e8>)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e48:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e6c:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e72:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e96:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e9c:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eea:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <HAL_GPIO_Init+0x300>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f47f ae9d 	bne.w	8003c40 <HAL_GPIO_Init+0x10>
  }
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	48000400 	.word	0x48000400
 8003f20:	48000800 	.word	0x48000800
 8003f24:	48000c00 	.word	0x48000c00
 8003f28:	48001000 	.word	0x48001000
 8003f2c:	48001400 	.word	0x48001400
 8003f30:	40010400 	.word	0x40010400

08003f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
 8003f40:	4613      	mov	r3, r2
 8003f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f44:	787b      	ldrb	r3, [r7, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f50:	e002      	b.n	8003f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f806 	bl	8003f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40010400 	.word	0x40010400

08003f94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d141      	bne.n	800403e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fba:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d131      	bne.n	800402c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc8:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fce:	4a46      	ldr	r2, [pc, #280]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd8:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe0:	4a41      	ldr	r2, [pc, #260]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2232      	movs	r2, #50	; 0x32
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffe:	e002      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	d102      	bne.n	800401a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f2      	bne.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004026:	d158      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e057      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800403c:	e04d      	b.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004044:	d141      	bne.n	80040ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004046:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d131      	bne.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004054:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004074:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2232      	movs	r2, #50	; 0x32
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	0c9b      	lsrs	r3, r3, #18
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408a:	e002      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b01      	subs	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d102      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f2      	bne.n	800408c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d112      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e011      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040c8:	e007      	b.n	80040da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d2:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40007000 	.word	0x40007000
 80040ec:	20000000 	.word	0x20000000
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004102:	6093      	str	r3, [r2, #8]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40007000 	.word	0x40007000

08004114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e306      	b.n	8004734 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d075      	beq.n	800421e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004132:	4b97      	ldr	r3, [pc, #604]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800413c:	4b94      	ldr	r3, [pc, #592]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d102      	bne.n	8004152 <HAL_RCC_OscConfig+0x3e>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d002      	beq.n	8004158 <HAL_RCC_OscConfig+0x44>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d10b      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	4b8d      	ldr	r3, [pc, #564]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <HAL_RCC_OscConfig+0x108>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d157      	bne.n	800421c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e2e1      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x74>
 800417a:	4b85      	ldr	r3, [pc, #532]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a84      	ldr	r2, [pc, #528]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x98>
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7e      	ldr	r2, [pc, #504]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b7c      	ldr	r3, [pc, #496]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7b      	ldr	r2, [pc, #492]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 80041ac:	4b78      	ldr	r3, [pc, #480]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a77      	ldr	r2, [pc, #476]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b75      	ldr	r3, [pc, #468]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a74      	ldr	r2, [pc, #464]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fcce 	bl	8001b6c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fcca 	bl	8001b6c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e2a6      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e6:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xc0>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fcba 	bl	8001b6c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fcb6 	bl	8001b6c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e292      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420e:	4b60      	ldr	r3, [pc, #384]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0xe8>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422a:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x136>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d002      	beq.n	8004250 <HAL_RCC_OscConfig+0x13c>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11f      	bne.n	8004290 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004250:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_OscConfig+0x154>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e265      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	4946      	ldr	r1, [pc, #280]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800427c:	4b45      	ldr	r3, [pc, #276]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc fd3f 	bl	8000d04 <HAL_InitTick>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d043      	beq.n	8004314 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e251      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d023      	beq.n	80042e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004298:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd fc62 	bl	8001b6c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fd fc5e 	bl	8001b6c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e23a      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042be:	4b34      	ldr	r3, [pc, #208]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	492d      	ldr	r1, [pc, #180]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
 80042de:	e01a      	b.n	8004316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fc3e 	bl	8001b6c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f4:	f7fd fc3a 	bl	8001b6c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e216      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d041      	beq.n	80043a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01c      	beq.n	8004364 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	4a17      	ldr	r2, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fc17 	bl	8001b6c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004342:	f7fd fc13 	bl	8001b6c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1ef      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ef      	beq.n	8004342 <HAL_RCC_OscConfig+0x22e>
 8004362:	e020      	b.n	80043a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_OscConfig+0x27c>)
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fd fbfa 	bl	8001b6c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800437a:	e00d      	b.n	8004398 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437c:	f7fd fbf6 	bl	8001b6c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d906      	bls.n	8004398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1d2      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
 8004394:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004398:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ea      	bne.n	800437c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80a6 	beq.w	8004500 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043b8:	4b84      	ldr	r3, [pc, #528]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2b4>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x2b6>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b7f      	ldr	r3, [pc, #508]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	4a7e      	ldr	r2, [pc, #504]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	; 0x58
 80043da:	4b7c      	ldr	r3, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ea:	4b79      	ldr	r3, [pc, #484]	; (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d118      	bne.n	8004428 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f6:	4b76      	ldr	r3, [pc, #472]	; (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	; (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004402:	f7fd fbb3 	bl	8001b6c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fd fbaf 	bl	8001b6c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e18b      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441c:	4b6c      	ldr	r3, [pc, #432]	; (80045d0 <HAL_RCC_OscConfig+0x4bc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d108      	bne.n	8004442 <HAL_RCC_OscConfig+0x32e>
 8004430:	4b66      	ldr	r3, [pc, #408]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	4a65      	ldr	r2, [pc, #404]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004440:	e024      	b.n	800448c <HAL_RCC_OscConfig+0x378>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d110      	bne.n	800446c <HAL_RCC_OscConfig+0x358>
 800444a:	4b60      	ldr	r3, [pc, #384]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	4a5a      	ldr	r2, [pc, #360]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x378>
 800446c:	4b57      	ldr	r3, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a56      	ldr	r2, [pc, #344]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd fb6a 	bl	8001b6c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd fb66 	bl	8001b6c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e140      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b46      	ldr	r3, [pc, #280]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ed      	beq.n	800449c <HAL_RCC_OscConfig+0x388>
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd fb53 	bl	8001b6c <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd fb4f 	bl	8001b6c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e129      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e0:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ed      	bne.n	80044ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b35      	ldr	r3, [pc, #212]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a34      	ldr	r2, [pc, #208]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d03c      	beq.n	8004586 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01c      	beq.n	800454e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004514:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fd fb22 	bl	8001b6c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800452c:	f7fd fb1e 	bl	8001b6c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0fa      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCC_OscConfig+0x418>
 800454c:	e01b      	b.n	8004586 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800454e:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fd fb05 	bl	8001b6c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004566:	f7fd fb01 	bl	8001b6c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0dd      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ef      	bne.n	8004566 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80d1 	beq.w	8004732 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b0c      	cmp	r3, #12
 800459a:	f000 808b 	beq.w	80046b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d15e      	bne.n	8004664 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_RCC_OscConfig+0x4b8>)
 80045ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd fadb 	bl	8001b6c <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	e00c      	b.n	80045d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ba:	f7fd fad7 	bl	8001b6c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d905      	bls.n	80045d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0b3      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_RCC_OscConfig+0x628>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ec      	bne.n	80045ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b56      	ldr	r3, [pc, #344]	; (800473c <HAL_RCC_OscConfig+0x628>)
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_RCC_OscConfig+0x62c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6a11      	ldr	r1, [r2, #32]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045f0:	3a01      	subs	r2, #1
 80045f2:	0112      	lsls	r2, r2, #4
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045fa:	0212      	lsls	r2, r2, #8
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004602:	0852      	lsrs	r2, r2, #1
 8004604:	3a01      	subs	r2, #1
 8004606:	0552      	lsls	r2, r2, #21
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800460e:	0852      	lsrs	r2, r2, #1
 8004610:	3a01      	subs	r2, #1
 8004612:	0652      	lsls	r2, r2, #25
 8004614:	4311      	orrs	r1, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800461a:	06d2      	lsls	r2, r2, #27
 800461c:	430a      	orrs	r2, r1
 800461e:	4947      	ldr	r1, [pc, #284]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004624:	4b45      	ldr	r3, [pc, #276]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a44      	ldr	r2, [pc, #272]	; (800473c <HAL_RCC_OscConfig+0x628>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a41      	ldr	r2, [pc, #260]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fa96 	bl	8001b6c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd fa92 	bl	8001b6c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e06e      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b39      	ldr	r3, [pc, #228]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x530>
 8004662:	e066      	b.n	8004732 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b35      	ldr	r3, [pc, #212]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a34      	ldr	r2, [pc, #208]	; (800473c <HAL_RCC_OscConfig+0x628>)
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a31      	ldr	r2, [pc, #196]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800467c:	4b2f      	ldr	r3, [pc, #188]	; (800473c <HAL_RCC_OscConfig+0x628>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a2e      	ldr	r2, [pc, #184]	; (800473c <HAL_RCC_OscConfig+0x628>)
 8004682:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd fa6e 	bl	8001b6c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd fa6a 	bl	8001b6c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e046      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a6:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_RCC_OscConfig+0x628>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x580>
 80046b2:	e03e      	b.n	8004732 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e039      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046c0:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_OscConfig+0x628>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d12c      	bne.n	800472e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	3b01      	subs	r3, #1
 80046e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d123      	bne.n	800472e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d11b      	bne.n	800472e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d113      	bne.n	800472e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	3b01      	subs	r3, #1
 8004714:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d109      	bne.n	800472e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	019f800c 	.word	0x019f800c

08004744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e11e      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b91      	ldr	r3, [pc, #580]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d910      	bls.n	800478c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b8e      	ldr	r3, [pc, #568]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 020f 	bic.w	r2, r3, #15
 8004772:	498c      	ldr	r1, [pc, #560]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b8a      	ldr	r3, [pc, #552]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e106      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d073      	beq.n	8004880 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d129      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a0:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0f4      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047b0:	f000 f9d0 	bl	8004b54 <RCC_GetSysClockFreqFromPLLSource>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4a7c      	ldr	r2, [pc, #496]	; (80049ac <HAL_RCC_ClockConfig+0x268>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d93f      	bls.n	800483e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047be:	4b7a      	ldr	r3, [pc, #488]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d033      	beq.n	800483e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d12f      	bne.n	800483e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047de:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e6:	4a70      	ldr	r2, [pc, #448]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e024      	b.n	800483e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d107      	bne.n	800480c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047fc:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0c6      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800480c:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0be      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800481c:	f000 f8ce 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8004820:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4a61      	ldr	r2, [pc, #388]	; (80049ac <HAL_RCC_ClockConfig+0x268>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d909      	bls.n	800483e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800482a:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004832:	4a5d      	ldr	r2, [pc, #372]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 8004834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004838:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4957      	ldr	r1, [pc, #348]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fd f98c 	bl	8001b6c <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fd f988 	bl	8001b6c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e095      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b4e      	ldr	r3, [pc, #312]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d023      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a42      	ldr	r2, [pc, #264]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800489e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048b0:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048b8:	4a3b      	ldr	r2, [pc, #236]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80048ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4936      	ldr	r1, [pc, #216]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048da:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a32      	ldr	r2, [pc, #200]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d21d      	bcs.n	8004930 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 020f 	bic.w	r2, r3, #15
 80048fc:	4929      	ldr	r1, [pc, #164]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004904:	f7fd f932 	bl	8001b6c <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fd f92e 	bl	8001b6c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e03b      	b.n	800499a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <HAL_RCC_ClockConfig+0x260>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d1ed      	bne.n	800490c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4917      	ldr	r1, [pc, #92]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	490f      	ldr	r1, [pc, #60]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800496e:	f000 f825 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8004972:	4602      	mov	r2, r0
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_RCC_ClockConfig+0x264>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	490c      	ldr	r1, [pc, #48]	; (80049b0 <HAL_RCC_ClockConfig+0x26c>)
 8004980:	5ccb      	ldrb	r3, [r1, r3]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	fa22 f303 	lsr.w	r3, r2, r3
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_RCC_ClockConfig+0x270>)
 800498c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <HAL_RCC_ClockConfig+0x274>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc f9b6 	bl	8000d04 <HAL_InitTick>
 8004998:	4603      	mov	r3, r0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40022000 	.word	0x40022000
 80049a8:	40021000 	.word	0x40021000
 80049ac:	04c4b400 	.word	0x04c4b400
 80049b0:	0800a55c 	.word	0x0800a55c
 80049b4:	20000000 	.word	0x20000000
 80049b8:	200000c0 	.word	0x200000c0

080049bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049c2:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d102      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	e047      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d102      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e03e      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049e6:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d136      	bne.n	8004a60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049fc:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	3301      	adds	r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a10:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1a:	68d2      	ldr	r2, [r2, #12]
 8004a1c:	0a12      	lsrs	r2, r2, #8
 8004a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	617b      	str	r3, [r7, #20]
      break;
 8004a28:	e00c      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a2a:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a34:	68d2      	ldr	r2, [r2, #12]
 8004a36:	0a12      	lsrs	r2, r2, #8
 8004a38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
      break;
 8004a42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	0e5b      	lsrs	r3, r3, #25
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	e001      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a64:	693b      	ldr	r3, [r7, #16]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	016e3600 	.word	0x016e3600

08004a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000000 	.word	0x20000000

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4904      	ldr	r1, [pc, #16]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	0800a56c 	.word	0x0800a56c

08004ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ac8:	f7ff ffda 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0adb      	lsrs	r3, r3, #11
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800a56c 	.word	0x0800a56c

08004af0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	220f      	movs	r2, #15
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <HAL_RCC_GetClockConfig+0x60>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40022000 	.word	0x40022000

08004b54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d10c      	bne.n	8004b92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b82:	68d2      	ldr	r2, [r2, #12]
 8004b84:	0a12      	lsrs	r2, r2, #8
 8004b86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	617b      	str	r3, [r7, #20]
    break;
 8004b90:	e00c      	b.n	8004bac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b9c:	68d2      	ldr	r2, [r2, #12]
 8004b9e:	0a12      	lsrs	r2, r2, #8
 8004ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]
    break;
 8004baa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0e5b      	lsrs	r3, r3, #25
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bc6:	687b      	ldr	r3, [r7, #4]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	016e3600 	.word	0x016e3600
 8004bdc:	00f42400 	.word	0x00f42400

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be8:	2300      	movs	r3, #0
 8004bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bec:	2300      	movs	r3, #0
 8004bee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8098 	beq.w	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10d      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	; 0x58
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c26:	2301      	movs	r3, #1
 8004c28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c36:	f7fc ff99 	bl	8001b6c <HAL_GetTick>
 8004c3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c3c:	e009      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3e:	f7fc ff95 	bl	8001b6c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d902      	bls.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	74fb      	strb	r3, [r7, #19]
        break;
 8004c50:	e005      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c52:	4b30      	ldr	r3, [pc, #192]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ef      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d159      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01e      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d019      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c80:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c8c:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fc ff55 	bl	8001b6c <HAL_GetTick>
 8004cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc4:	e00b      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fc ff51 	bl	8001b6c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d902      	bls.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	74fb      	strb	r3, [r7, #19]
            break;
 8004cdc:	e006      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cde:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ec      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	4903      	ldr	r1, [pc, #12]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	74bb      	strb	r3, [r7, #18]
 8004d0e:	e005      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d1c:	7c7b      	ldrb	r3, [r7, #17]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d105      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d22:	4ba7      	ldr	r3, [pc, #668]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	4aa6      	ldr	r2, [pc, #664]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d3a:	4ba1      	ldr	r3, [pc, #644]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 0203 	bic.w	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	499d      	ldr	r1, [pc, #628]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d5c:	4b98      	ldr	r3, [pc, #608]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f023 020c 	bic.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4995      	ldr	r1, [pc, #596]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d7e:	4b90      	ldr	r3, [pc, #576]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	498c      	ldr	r1, [pc, #560]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da0:	4b87      	ldr	r3, [pc, #540]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	4984      	ldr	r1, [pc, #528]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dc2:	4b7f      	ldr	r3, [pc, #508]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	497b      	ldr	r1, [pc, #492]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004de4:	4b76      	ldr	r3, [pc, #472]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	4973      	ldr	r1, [pc, #460]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e06:	4b6e      	ldr	r3, [pc, #440]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	496a      	ldr	r1, [pc, #424]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e28:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	4962      	ldr	r1, [pc, #392]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4a:	4b5d      	ldr	r3, [pc, #372]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	4959      	ldr	r1, [pc, #356]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e6c:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	4951      	ldr	r1, [pc, #324]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8e:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4948      	ldr	r1, [pc, #288]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb0:	4b43      	ldr	r3, [pc, #268]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	4940      	ldr	r1, [pc, #256]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee8:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	4932      	ldr	r1, [pc, #200]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f20:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	4924      	ldr	r1, [pc, #144]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b1f      	ldr	r3, [pc, #124]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	4916      	ldr	r1, [pc, #88]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f78:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a10      	ldr	r2, [pc, #64]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d019      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fae:	d109      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a02      	ldr	r2, [pc, #8]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fba:	60d3      	str	r3, [r2, #12]
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	4926      	ldr	r1, [pc, #152]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a20      	ldr	r2, [pc, #128]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005008:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	4918      	ldr	r1, [pc, #96]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005028:	4b13      	ldr	r3, [pc, #76]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a12      	ldr	r2, [pc, #72]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005032:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	490a      	ldr	r1, [pc, #40]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800506c:	7cbb      	ldrb	r3, [r7, #18]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000

0800507c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e049      	b.n	8005122 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fc f912 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f000 ff36 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e054      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a26      	ldr	r2, [pc, #152]	; (80051fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516e:	d01d      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_TIM_Base_Start_IT+0xd4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_TIM_Base_Start_IT+0xd8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_TIM_Base_Start_IT+0xdc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1e      	ldr	r2, [pc, #120]	; (800520c <HAL_TIM_Base_Start_IT+0xe0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_TIM_Base_Start_IT+0xe4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_TIM_Base_Start_IT+0xe8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d115      	bne.n	80051d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <HAL_TIM_Base_Start_IT+0xec>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b06      	cmp	r3, #6
 80051bc:	d015      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0xbe>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d011      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e008      	b.n	80051ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e000      	b.n	80051ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40013400 	.word	0x40013400
 8005210:	40014000 	.word	0x40014000
 8005214:	40015000 	.word	0x40015000
 8005218:	00010007 	.word	0x00010007

0800521c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e049      	b.n	80052c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f841 	bl	80052ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fe66 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_TIM_PWM_Start+0x24>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e03c      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b04      	cmp	r3, #4
 8005308:	d109      	bne.n	800531e <HAL_TIM_PWM_Start+0x3e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e02f      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d109      	bne.n	8005338 <HAL_TIM_PWM_Start+0x58>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e022      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d109      	bne.n	8005352 <HAL_TIM_PWM_Start+0x72>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e015      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b10      	cmp	r3, #16
 8005356:	d109      	bne.n	800536c <HAL_TIM_PWM_Start+0x8c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e008      	b.n	800537e <HAL_TIM_PWM_Start+0x9e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0a6      	b.n	80054d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start+0xb6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	e023      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0xc6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	e01b      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0xd6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	e013      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xe6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c4:	e00b      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xf6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	e003      	b.n	80053de <HAL_TIM_PWM_Start+0xfe>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fa0e 	bl	8006808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3a      	ldr	r2, [pc, #232]	; (80054dc <HAL_TIM_PWM_Start+0x1fc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a39      	ldr	r2, [pc, #228]	; (80054e0 <HAL_TIM_PWM_Start+0x200>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d013      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a37      	ldr	r2, [pc, #220]	; (80054e4 <HAL_TIM_PWM_Start+0x204>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a36      	ldr	r2, [pc, #216]	; (80054e8 <HAL_TIM_PWM_Start+0x208>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a34      	ldr	r2, [pc, #208]	; (80054ec <HAL_TIM_PWM_Start+0x20c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_PWM_Start+0x148>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <HAL_TIM_PWM_Start+0x210>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_TIM_PWM_Start+0x14c>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_TIM_PWM_Start+0x14e>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a25      	ldr	r2, [pc, #148]	; (80054dc <HAL_TIM_PWM_Start+0x1fc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d01d      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a26      	ldr	r2, [pc, #152]	; (80054f4 <HAL_TIM_PWM_Start+0x214>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <HAL_TIM_PWM_Start+0x218>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a23      	ldr	r2, [pc, #140]	; (80054fc <HAL_TIM_PWM_Start+0x21c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <HAL_TIM_PWM_Start+0x200>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIM_PWM_Start+0x204>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1b2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIM_PWM_Start+0x210>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d115      	bne.n	80054be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_TIM_PWM_Start+0x220>)
 800549a:	4013      	ands	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d015      	beq.n	80054d0 <HAL_TIM_PWM_Start+0x1f0>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054aa:	d011      	beq.n	80054d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	e008      	b.n	80054d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e000      	b.n	80054d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	40015000 	.word	0x40015000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	00010007 	.word	0x00010007

08005504 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f976 	bl	8006808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a40      	ldr	r2, [pc, #256]	; (8005624 <HAL_TIM_PWM_Stop+0x120>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <HAL_TIM_PWM_Stop+0x54>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a3f      	ldr	r2, [pc, #252]	; (8005628 <HAL_TIM_PWM_Stop+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <HAL_TIM_PWM_Stop+0x54>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3d      	ldr	r2, [pc, #244]	; (800562c <HAL_TIM_PWM_Stop+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_TIM_PWM_Stop+0x54>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a3c      	ldr	r2, [pc, #240]	; (8005630 <HAL_TIM_PWM_Stop+0x12c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_TIM_PWM_Stop+0x54>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a3a      	ldr	r2, [pc, #232]	; (8005634 <HAL_TIM_PWM_Stop+0x130>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_PWM_Stop+0x54>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a39      	ldr	r2, [pc, #228]	; (8005638 <HAL_TIM_PWM_Stop+0x134>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <HAL_TIM_PWM_Stop+0x58>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <HAL_TIM_PWM_Stop+0x5a>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d017      	beq.n	8005592 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	f241 1311 	movw	r3, #4369	; 0x1111
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <HAL_TIM_PWM_Stop+0x8e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	f244 4344 	movw	r3, #17476	; 0x4444
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_TIM_PWM_Stop+0x8e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	f241 1311 	movw	r3, #4369	; 0x1111
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <HAL_TIM_PWM_Stop+0xbe>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	f244 4344 	movw	r3, #17476	; 0x4444
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_TIM_PWM_Stop+0xbe>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Stop+0xce>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d0:	e023      	b.n	800561a <HAL_TIM_PWM_Stop+0x116>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Stop+0xde>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e0:	e01b      	b.n	800561a <HAL_TIM_PWM_Stop+0x116>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Stop+0xee>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f0:	e013      	b.n	800561a <HAL_TIM_PWM_Stop+0x116>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Stop+0xfe>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	e00b      	b.n	800561a <HAL_TIM_PWM_Stop+0x116>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b10      	cmp	r3, #16
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Stop+0x10e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	e003      	b.n	800561a <HAL_TIM_PWM_Stop+0x116>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800
 8005638:	40015000 	.word	0x40015000

0800563c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e097      	b.n	8005780 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fb fe51 	bl	800130c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005680:	f023 0307 	bic.w	r3, r3, #7
 8005684:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f000 fc4b 	bl	8005f2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	4313      	orrs	r3, r2
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056dc:	f023 030c 	bic.w	r3, r3, #12
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	4313      	orrs	r3, r2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	011a      	lsls	r2, r3, #4
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	031b      	lsls	r3, r3, #12
 800570c:	4313      	orrs	r3, r2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	4313      	orrs	r3, r2
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d122      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d11b      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0202 	mvn.w	r2, #2
 80057b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb90 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fb82 	bl	8005edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb93 	bl	8005f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fb66 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fb58 	bl	8005edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fb69 	bl	8005f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b08      	cmp	r3, #8
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b08      	cmp	r3, #8
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0208 	mvn.w	r2, #8
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb3c 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb2e 	bl	8005edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fb3f 	bl	8005f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2208      	movs	r2, #8
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fb12 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb04 	bl	8005edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb15 	bl	8005f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb f9c0 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 fa60 	bl	8006df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d10e      	bne.n	8005966 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d107      	bne.n	8005966 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fa53 	bl	8006e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d10e      	bne.n	8005992 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d107      	bne.n	8005992 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fac3 	bl	8005f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b20      	cmp	r3, #32
 800599e:	d10e      	bne.n	80059be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d107      	bne.n	80059be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f06f 0220 	mvn.w	r2, #32
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fa13 	bl	8006de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059cc:	d10f      	bne.n	80059ee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fa19 	bl	8006e20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059fc:	d10f      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a0c:	d107      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fa0b 	bl	8006e34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2c:	d10f      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 f9fd 	bl	8006e48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a5c:	d10f      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a6c:	d107      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f001 f9ef 	bl	8006e5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0ff      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b14      	cmp	r3, #20
 8005ab2:	f200 80f0 	bhi.w	8005c96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005c97 	.word	0x08005c97
 8005ac4:	08005c97 	.word	0x08005c97
 8005ac8:	08005c97 	.word	0x08005c97
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005c97 	.word	0x08005c97
 8005ad4:	08005c97 	.word	0x08005c97
 8005ad8:	08005c97 	.word	0x08005c97
 8005adc:	08005b93 	.word	0x08005b93
 8005ae0:	08005c97 	.word	0x08005c97
 8005ae4:	08005c97 	.word	0x08005c97
 8005ae8:	08005c97 	.word	0x08005c97
 8005aec:	08005bd3 	.word	0x08005bd3
 8005af0:	08005c97 	.word	0x08005c97
 8005af4:	08005c97 	.word	0x08005c97
 8005af8:	08005c97 	.word	0x08005c97
 8005afc:	08005c15 	.word	0x08005c15
 8005b00:	08005c97 	.word	0x08005c97
 8005b04:	08005c97 	.word	0x08005c97
 8005b08:	08005c97 	.word	0x08005c97
 8005b0c:	08005c55 	.word	0x08005c55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fab0 	bl	800607c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0208 	orr.w	r2, r2, #8
 8005b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0204 	bic.w	r2, r2, #4
 8005b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6999      	ldr	r1, [r3, #24]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	619a      	str	r2, [r3, #24]
      break;
 8005b4e:	e0a5      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fb2a 	bl	80061b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6999      	ldr	r1, [r3, #24]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	021a      	lsls	r2, r3, #8
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]
      break;
 8005b90:	e084      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fb9d 	bl	80062d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0208 	orr.w	r2, r2, #8
 8005bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0204 	bic.w	r2, r2, #4
 8005bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69d9      	ldr	r1, [r3, #28]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	61da      	str	r2, [r3, #28]
      break;
 8005bd0:	e064      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fc0f 	bl	80063fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69d9      	ldr	r1, [r3, #28]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	021a      	lsls	r2, r3, #8
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	61da      	str	r2, [r3, #28]
      break;
 8005c12:	e043      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fc82 	bl	8006524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0208 	orr.w	r2, r2, #8
 8005c2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0204 	bic.w	r2, r2, #4
 8005c3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c52:	e023      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fccc 	bl	80065f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c94:	e002      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop

08005cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIM_ConfigClockSource+0x1c>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e0f6      	b.n	8005eba <HAL_TIM_ConfigClockSource+0x20a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a6f      	ldr	r2, [pc, #444]	; (8005ec4 <HAL_TIM_ConfigClockSource+0x214>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f000 80c1 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d0c:	4a6d      	ldr	r2, [pc, #436]	; (8005ec4 <HAL_TIM_ConfigClockSource+0x214>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f200 80c6 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d14:	4a6c      	ldr	r2, [pc, #432]	; (8005ec8 <HAL_TIM_ConfigClockSource+0x218>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f000 80b9 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d1c:	4a6a      	ldr	r2, [pc, #424]	; (8005ec8 <HAL_TIM_ConfigClockSource+0x218>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f200 80be 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d24:	4a69      	ldr	r2, [pc, #420]	; (8005ecc <HAL_TIM_ConfigClockSource+0x21c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	f000 80b1 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d2c:	4a67      	ldr	r2, [pc, #412]	; (8005ecc <HAL_TIM_ConfigClockSource+0x21c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f200 80b6 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d34:	4a66      	ldr	r2, [pc, #408]	; (8005ed0 <HAL_TIM_ConfigClockSource+0x220>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	f000 80a9 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d3c:	4a64      	ldr	r2, [pc, #400]	; (8005ed0 <HAL_TIM_ConfigClockSource+0x220>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f200 80ae 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d44:	4a63      	ldr	r2, [pc, #396]	; (8005ed4 <HAL_TIM_ConfigClockSource+0x224>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	f000 80a1 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d4c:	4a61      	ldr	r2, [pc, #388]	; (8005ed4 <HAL_TIM_ConfigClockSource+0x224>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	f200 80a6 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d54:	4a60      	ldr	r2, [pc, #384]	; (8005ed8 <HAL_TIM_ConfigClockSource+0x228>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	f000 8099 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d5c:	4a5e      	ldr	r2, [pc, #376]	; (8005ed8 <HAL_TIM_ConfigClockSource+0x228>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	f200 809e 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d68:	f000 8091 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d70:	f200 8096 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d78:	f000 8089 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d80:	f200 808e 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d88:	d03e      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x158>
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8e:	f200 8087 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	f000 8086 	beq.w	8005ea6 <HAL_TIM_ConfigClockSource+0x1f6>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d87f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005da0:	2b70      	cmp	r3, #112	; 0x70
 8005da2:	d01a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x12a>
 8005da4:	2b70      	cmp	r3, #112	; 0x70
 8005da6:	d87b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005da8:	2b60      	cmp	r3, #96	; 0x60
 8005daa:	d050      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x19e>
 8005dac:	2b60      	cmp	r3, #96	; 0x60
 8005dae:	d877      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005db0:	2b50      	cmp	r3, #80	; 0x50
 8005db2:	d03c      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x17e>
 8005db4:	2b50      	cmp	r3, #80	; 0x50
 8005db6:	d873      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d058      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x1be>
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d86f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d064      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d86b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d060      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d867      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05c      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d05a      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x1de>
 8005dd8:	e062      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6899      	ldr	r1, [r3, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f000 fced 	bl	80067c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	609a      	str	r2, [r3, #8]
      break;
 8005e06:	e04f      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f000 fcd6 	bl	80067c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e2a:	609a      	str	r2, [r3, #8]
      break;
 8005e2c:	e03c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 fc48 	bl	80066d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2150      	movs	r1, #80	; 0x50
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fca1 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e02c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 fc67 	bl	800672e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2160      	movs	r1, #96	; 0x60
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fc91 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e01c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 fc28 	bl	80066d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2140      	movs	r1, #64	; 0x40
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fc81 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e00c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f000 fc78 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 8005e9e:	e003      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea4:	e000      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	00100070 	.word	0x00100070
 8005ec8:	00100060 	.word	0x00100060
 8005ecc:	00100050 	.word	0x00100050
 8005ed0:	00100040 	.word	0x00100040
 8005ed4:	00100030 	.word	0x00100030
 8005ed8:	00100020 	.word	0x00100020

08005edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a46      	ldr	r2, [pc, #280]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d017      	beq.n	8005f74 <TIM_Base_SetConfig+0x48>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d013      	beq.n	8005f74 <TIM_Base_SetConfig+0x48>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a43      	ldr	r2, [pc, #268]	; (800605c <TIM_Base_SetConfig+0x130>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00f      	beq.n	8005f74 <TIM_Base_SetConfig+0x48>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a42      	ldr	r2, [pc, #264]	; (8006060 <TIM_Base_SetConfig+0x134>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_Base_SetConfig+0x48>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a41      	ldr	r2, [pc, #260]	; (8006064 <TIM_Base_SetConfig+0x138>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_Base_SetConfig+0x48>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_Base_SetConfig+0x48>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a3f      	ldr	r2, [pc, #252]	; (800606c <TIM_Base_SetConfig+0x140>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d108      	bne.n	8005f86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a33      	ldr	r2, [pc, #204]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d023      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d01f      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a30      	ldr	r2, [pc, #192]	; (800605c <TIM_Base_SetConfig+0x130>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01b      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2f      	ldr	r2, [pc, #188]	; (8006060 <TIM_Base_SetConfig+0x134>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d017      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2e      	ldr	r2, [pc, #184]	; (8006064 <TIM_Base_SetConfig+0x138>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2d      	ldr	r2, [pc, #180]	; (8006070 <TIM_Base_SetConfig+0x144>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2c      	ldr	r2, [pc, #176]	; (8006074 <TIM_Base_SetConfig+0x148>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2b      	ldr	r2, [pc, #172]	; (8006078 <TIM_Base_SetConfig+0x14c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_Base_SetConfig+0xaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	; (800606c <TIM_Base_SetConfig+0x140>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d108      	bne.n	8005fe8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a12      	ldr	r2, [pc, #72]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <TIM_Base_SetConfig+0x110>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a14      	ldr	r2, [pc, #80]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00f      	beq.n	800603c <TIM_Base_SetConfig+0x110>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a14      	ldr	r2, [pc, #80]	; (8006070 <TIM_Base_SetConfig+0x144>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_Base_SetConfig+0x110>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a13      	ldr	r2, [pc, #76]	; (8006074 <TIM_Base_SetConfig+0x148>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_Base_SetConfig+0x110>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <TIM_Base_SetConfig+0x14c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_Base_SetConfig+0x110>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a0d      	ldr	r2, [pc, #52]	; (800606c <TIM_Base_SetConfig+0x140>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d103      	bne.n	8006044 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	615a      	str	r2, [r3, #20]
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40013400 	.word	0x40013400
 800606c:	40015000 	.word	0x40015000
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f023 0201 	bic.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a30      	ldr	r2, [pc, #192]	; (8006198 <TIM_OC1_SetConfig+0x11c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <TIM_OC1_SetConfig+0x88>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a2f      	ldr	r2, [pc, #188]	; (800619c <TIM_OC1_SetConfig+0x120>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_OC1_SetConfig+0x88>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <TIM_OC1_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_OC1_SetConfig+0x88>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a2d      	ldr	r2, [pc, #180]	; (80061a4 <TIM_OC1_SetConfig+0x128>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_OC1_SetConfig+0x88>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <TIM_OC1_SetConfig+0x12c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC1_SetConfig+0x88>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <TIM_OC1_SetConfig+0x130>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10c      	bne.n	800611e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0308 	bic.w	r3, r3, #8
 800610a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 0304 	bic.w	r3, r3, #4
 800611c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <TIM_OC1_SetConfig+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <TIM_OC1_SetConfig+0xd2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <TIM_OC1_SetConfig+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00f      	beq.n	800614e <TIM_OC1_SetConfig+0xd2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <TIM_OC1_SetConfig+0x124>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00b      	beq.n	800614e <TIM_OC1_SetConfig+0xd2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <TIM_OC1_SetConfig+0x128>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_OC1_SetConfig+0xd2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <TIM_OC1_SetConfig+0x12c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC1_SetConfig+0xd2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <TIM_OC1_SetConfig+0x130>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	40015000 	.word	0x40015000

080061b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0210 	bic.w	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0320 	bic.w	r3, r3, #32
 80061fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a2c      	ldr	r2, [pc, #176]	; (80062c0 <TIM_OC2_SetConfig+0x110>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_OC2_SetConfig+0x74>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a2b      	ldr	r2, [pc, #172]	; (80062c4 <TIM_OC2_SetConfig+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC2_SetConfig+0x74>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <TIM_OC2_SetConfig+0x118>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10d      	bne.n	8006240 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a1f      	ldr	r2, [pc, #124]	; (80062c0 <TIM_OC2_SetConfig+0x110>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_OC2_SetConfig+0xc0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <TIM_OC2_SetConfig+0x114>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00f      	beq.n	8006270 <TIM_OC2_SetConfig+0xc0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a1e      	ldr	r2, [pc, #120]	; (80062cc <TIM_OC2_SetConfig+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_OC2_SetConfig+0xc0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <TIM_OC2_SetConfig+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_OC2_SetConfig+0xc0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <TIM_OC2_SetConfig+0x124>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_OC2_SetConfig+0xc0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <TIM_OC2_SetConfig+0x118>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d113      	bne.n	8006298 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40015000 	.word	0x40015000
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40014400 	.word	0x40014400
 80062d4:	40014800 	.word	0x40014800

080062d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2b      	ldr	r2, [pc, #172]	; (80063e4 <TIM_OC3_SetConfig+0x10c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d007      	beq.n	800634a <TIM_OC3_SetConfig+0x72>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <TIM_OC3_SetConfig+0x110>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_OC3_SetConfig+0x72>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a29      	ldr	r2, [pc, #164]	; (80063ec <TIM_OC3_SetConfig+0x114>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10d      	bne.n	8006366 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <TIM_OC3_SetConfig+0x10c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_OC3_SetConfig+0xbe>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <TIM_OC3_SetConfig+0x110>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_OC3_SetConfig+0xbe>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <TIM_OC3_SetConfig+0x118>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_OC3_SetConfig+0xbe>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <TIM_OC3_SetConfig+0x11c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_OC3_SetConfig+0xbe>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <TIM_OC3_SetConfig+0x120>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC3_SetConfig+0xbe>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <TIM_OC3_SetConfig+0x114>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d113      	bne.n	80063be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40015000 	.word	0x40015000
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800

080063fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	031b      	lsls	r3, r3, #12
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a2c      	ldr	r2, [pc, #176]	; (800650c <TIM_OC4_SetConfig+0x110>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_OC4_SetConfig+0x74>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <TIM_OC4_SetConfig+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC4_SetConfig+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <TIM_OC4_SetConfig+0x118>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10d      	bne.n	800648c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	031b      	lsls	r3, r3, #12
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800648a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1f      	ldr	r2, [pc, #124]	; (800650c <TIM_OC4_SetConfig+0x110>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <TIM_OC4_SetConfig+0xc0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <TIM_OC4_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC4_SetConfig+0xc0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <TIM_OC4_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC4_SetConfig+0xc0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <TIM_OC4_SetConfig+0x120>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC4_SetConfig+0xc0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <TIM_OC4_SetConfig+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC4_SetConfig+0xc0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <TIM_OC4_SetConfig+0x118>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d113      	bne.n	80064e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	019b      	lsls	r3, r3, #6
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40015000 	.word	0x40015000
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <TIM_OC5_SetConfig+0xbc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <TIM_OC5_SetConfig+0x82>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <TIM_OC5_SetConfig+0xc0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00f      	beq.n	80065a6 <TIM_OC5_SetConfig+0x82>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <TIM_OC5_SetConfig+0xc4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00b      	beq.n	80065a6 <TIM_OC5_SetConfig+0x82>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a16      	ldr	r2, [pc, #88]	; (80065ec <TIM_OC5_SetConfig+0xc8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_OC5_SetConfig+0x82>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <TIM_OC5_SetConfig+0xcc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_OC5_SetConfig+0x82>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a14      	ldr	r2, [pc, #80]	; (80065f4 <TIM_OC5_SetConfig+0xd0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d109      	bne.n	80065ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	40015000 	.word	0x40015000

080065f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800663e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	051b      	lsls	r3, r3, #20
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1a      	ldr	r2, [pc, #104]	; (80066b8 <TIM_OC6_SetConfig+0xc0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <TIM_OC6_SetConfig+0x84>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a19      	ldr	r2, [pc, #100]	; (80066bc <TIM_OC6_SetConfig+0xc4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00f      	beq.n	800667c <TIM_OC6_SetConfig+0x84>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a18      	ldr	r2, [pc, #96]	; (80066c0 <TIM_OC6_SetConfig+0xc8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_OC6_SetConfig+0x84>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a17      	ldr	r2, [pc, #92]	; (80066c4 <TIM_OC6_SetConfig+0xcc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_OC6_SetConfig+0x84>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <TIM_OC6_SetConfig+0xd0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC6_SetConfig+0x84>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a15      	ldr	r2, [pc, #84]	; (80066cc <TIM_OC6_SetConfig+0xd4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40013400 	.word	0x40013400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800
 80066cc:	40015000 	.word	0x40015000

080066d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0201 	bic.w	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 030a 	bic.w	r3, r3, #10
 800670c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800672e:	b480      	push	{r7}
 8006730:	b087      	sub	sp, #28
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f023 0210 	bic.w	r2, r3, #16
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f043 0307 	orr.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	021a      	lsls	r2, r3, #8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	2201      	movs	r2, #1
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	43db      	mvns	r3, r3
 800682a:	401a      	ands	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	fa01 f303 	lsl.w	r3, r1, r3
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_TIMEx_PWMN_Start+0x24>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e022      	b.n	80068be <HAL_TIMEx_PWMN_Start+0x6a>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b04      	cmp	r3, #4
 800687c:	d109      	bne.n	8006892 <HAL_TIMEx_PWMN_Start+0x3e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	bf14      	ite	ne
 800688a:	2301      	movne	r3, #1
 800688c:	2300      	moveq	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	e015      	b.n	80068be <HAL_TIMEx_PWMN_Start+0x6a>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d109      	bne.n	80068ac <HAL_TIMEx_PWMN_Start+0x58>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	bf14      	ite	ne
 80068a4:	2301      	movne	r3, #1
 80068a6:	2300      	moveq	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	e008      	b.n	80068be <HAL_TIMEx_PWMN_Start+0x6a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e073      	b.n	80069ae <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_TIMEx_PWMN_Start+0x82>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d4:	e013      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0xaa>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d104      	bne.n	80068e6 <HAL_TIMEx_PWMN_Start+0x92>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e4:	e00b      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0xaa>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d104      	bne.n	80068f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068f4:	e003      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0xaa>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2204      	movs	r2, #4
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fab2 	bl	8006e70 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800691a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a25      	ldr	r2, [pc, #148]	; (80069b8 <HAL_TIMEx_PWMN_Start+0x164>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d022      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d01d      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a21      	ldr	r2, [pc, #132]	; (80069bc <HAL_TIMEx_PWMN_Start+0x168>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d018      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1e      	ldr	r2, [pc, #120]	; (80069c4 <HAL_TIMEx_PWMN_Start+0x170>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00e      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_TIMEx_PWMN_Start+0x174>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d009      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <HAL_TIMEx_PWMN_Start+0x178>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_TIMEx_PWMN_Start+0x118>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d115      	bne.n	8006998 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	4b18      	ldr	r3, [pc, #96]	; (80069d4 <HAL_TIMEx_PWMN_Start+0x180>)
 8006974:	4013      	ands	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b06      	cmp	r3, #6
 800697c:	d015      	beq.n	80069aa <HAL_TIMEx_PWMN_Start+0x156>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006984:	d011      	beq.n	80069aa <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006996:	e008      	b.n	80069aa <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e000      	b.n	80069ac <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40013400 	.word	0x40013400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40015000 	.word	0x40015000
 80069d4:	00010007 	.word	0x00010007

080069d8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fa40 	bl	8006e70 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10f      	bne.n	8006a20 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d107      	bne.n	8006a20 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10f      	bne.n	8006a50 <HAL_TIMEx_PWMN_Stop+0x78>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIMEx_PWMN_Stop+0x78>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0201 	bic.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_TIMEx_PWMN_Stop+0x88>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5e:	e013      	b.n	8006a88 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d104      	bne.n	8006a70 <HAL_TIMEx_PWMN_Stop+0x98>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6e:	e00b      	b.n	8006a88 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d104      	bne.n	8006a80 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a7e:	e003      	b.n	8006a88 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e074      	b.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a34      	ldr	r2, [pc, #208]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d009      	beq.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a33      	ldr	r2, [pc, #204]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d004      	beq.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a31      	ldr	r2, [pc, #196]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d108      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d022      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d01d      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d018      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1c      	ldr	r2, [pc, #112]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00e      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a11      	ldr	r2, [pc, #68]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10c      	bne.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40015000 	.word	0x40015000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000

08006bc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e096      	b.n	8006d0a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a2f      	ldr	r2, [pc, #188]	; (8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a2d      	ldr	r2, [pc, #180]	; (8006d1c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a2c      	ldr	r2, [pc, #176]	; (8006d20 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d106      	bne.n	8006c82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a21      	ldr	r2, [pc, #132]	; (8006d20 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d12b      	bne.n	8006cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	051b      	lsls	r3, r3, #20
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d106      	bne.n	8006cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40013400 	.word	0x40013400
 8006d20:	40015000 	.word	0x40015000

08006d24 <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_TIMEx_RemapConfig+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e012      	b.n	8006d62 <HAL_TIMEx_RemapConfig+0x3e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	f423 3170 	bic.w	r1, r3, #245760	; 0x3c000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e02a      	b.n	8006ddc <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f7ff fd13 	bl	80067c8 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	f023 02e6 	bic.w	r2, r3, #230	; 0xe6
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	7b09      	ldrb	r1, [r1, #12]
 8006db4:	2901      	cmp	r1, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 8006db8:	2120      	movs	r1, #32
 8006dba:	e000      	b.n	8006dbe <HAL_TIMEx_ConfigEncoderIndex+0x50>
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4319      	orrs	r1, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0201 	orr.w	r2, r2, #1
 8006dd0:	659a      	str	r2, [r3, #88]	; 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2204      	movs	r2, #4
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a1a      	ldr	r2, [r3, #32]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	401a      	ands	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1a      	ldr	r2, [r3, #32]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e042      	b.n	8006f52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa fb76 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	; 0x24
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fc51 	bl	80077a4 <UART_SetConfig>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e022      	b.n	8006f52 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 ff41 	bl	8007d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 ffc8 	bl	8007ee0 <UART_CheckIdleState>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b08a      	sub	sp, #40	; 0x28
 8006f5e:	af02      	add	r7, sp, #8
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	603b      	str	r3, [r7, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	f040 8083 	bne.w	800707c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_UART_Transmit+0x28>
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e07b      	b.n	800707e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_UART_Transmit+0x3a>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e074      	b.n	800707e <HAL_UART_Transmit+0x124>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2221      	movs	r2, #33	; 0x21
 8006fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fac:	f7fa fdde 	bl	8001b6c <HAL_GetTick>
 8006fb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	d108      	bne.n	8006fde <HAL_UART_Transmit+0x84>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	e003      	b.n	8006fe6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006fee:	e02c      	b.n	800704a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 ffbb 	bl	8007f76 <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e039      	b.n	800707e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10b      	bne.n	8007028 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800701e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	3302      	adds	r3, #2
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	e007      	b.n	8007038 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	3301      	adds	r3, #1
 8007036:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1cc      	bne.n	8006ff0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2200      	movs	r2, #0
 800705e:	2140      	movs	r1, #64	; 0x40
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 ff88 	bl	8007f76 <UART_WaitOnFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e006      	b.n	800707e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	e000      	b.n	800707e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800707c:	2302      	movs	r3, #2
  }
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	2b20      	cmp	r3, #32
 800709e:	d142      	bne.n	8007126 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_UART_Receive_IT+0x24>
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e03b      	b.n	8007128 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UART_Receive_IT+0x36>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e034      	b.n	8007128 <HAL_UART_Receive_IT+0xa0>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <HAL_UART_Receive_IT+0xa8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d01f      	beq.n	8007116 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d018      	beq.n	8007116 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	623b      	str	r3, [r7, #32]
 8007104:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	69f9      	ldr	r1, [r7, #28]
 8007108:	6a3a      	ldr	r2, [r7, #32]
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e6      	bne.n	80070e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	461a      	mov	r2, r3
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fff3 	bl	8008108 <UART_Start_Receive_IT>
 8007122:	4603      	mov	r3, r0
 8007124:	e000      	b.n	8007128 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007126:	2302      	movs	r3, #2
  }
}
 8007128:	4618      	mov	r0, r3
 800712a:	3728      	adds	r7, #40	; 0x28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40008000 	.word	0x40008000

08007134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b0ba      	sub	sp, #232	; 0xe8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800715a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800715e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007162:	4013      	ands	r3, r2
 8007164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11b      	bne.n	80071a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d015      	beq.n	80071a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 82d6 	beq.w	800774a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
      }
      return;
 80071a6:	e2d0      	b.n	800774a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 811f 	beq.w	80073f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071b6:	4b8b      	ldr	r3, [pc, #556]	; (80073e4 <HAL_UART_IRQHandler+0x2b0>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071c2:	4b89      	ldr	r3, [pc, #548]	; (80073e8 <HAL_UART_IRQHandler+0x2b4>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8112 	beq.w	80073f0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d011      	beq.n	80071fc <HAL_UART_IRQHandler+0xc8>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2201      	movs	r2, #1
 80071ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d011      	beq.n	800722c <HAL_UART_IRQHandler+0xf8>
 8007208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2202      	movs	r2, #2
 800721a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007222:	f043 0204 	orr.w	r2, r3, #4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0x128>
 8007238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2204      	movs	r2, #4
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007252:	f043 0202 	orr.w	r2, r3, #2
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d017      	beq.n	8007298 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726c:	f003 0320 	and.w	r3, r3, #32
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007274:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007278:	4b5a      	ldr	r3, [pc, #360]	; (80073e4 <HAL_UART_IRQHandler+0x2b0>)
 800727a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2208      	movs	r2, #8
 8007286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728e:	f043 0208 	orr.w	r2, r3, #8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d012      	beq.n	80072ca <HAL_UART_IRQHandler+0x196>
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00c      	beq.n	80072ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c0:	f043 0220 	orr.w	r2, r3, #32
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 823c 	beq.w	800774e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d013      	beq.n	800730a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d005      	beq.n	800732e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800732a:	2b00      	cmp	r3, #0
 800732c:	d04f      	beq.n	80073ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 f814 	bl	800835c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d141      	bne.n	80073c6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800735c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800736e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800737a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1d9      	bne.n	8007342 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d013      	beq.n	80073be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739a:	4a14      	ldr	r2, [pc, #80]	; (80073ec <HAL_UART_IRQHandler+0x2b8>)
 800739c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fc fa8e 	bl	80038c4 <HAL_DMA_Abort_IT>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d017      	beq.n	80073de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80073b8:	4610      	mov	r0, r2
 80073ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	e00f      	b.n	80073de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f9da 	bl	8007778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e00b      	b.n	80073de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f9d6 	bl	8007778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e007      	b.n	80073de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f9d2 	bl	8007778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80073dc:	e1b7      	b.n	800774e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	bf00      	nop
    return;
 80073e0:	e1b5      	b.n	800774e <HAL_UART_IRQHandler+0x61a>
 80073e2:	bf00      	nop
 80073e4:	10000001 	.word	0x10000001
 80073e8:	04000120 	.word	0x04000120
 80073ec:	08008429 	.word	0x08008429

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	f040 814a 	bne.w	800768e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fe:	f003 0310 	and.w	r3, r3, #16
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8143 	beq.w	800768e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 813c 	beq.w	800768e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2210      	movs	r2, #16
 800741c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	f040 80b5 	bne.w	8007598 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800743a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8187 	beq.w	8007752 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800744a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744e:	429a      	cmp	r2, r3
 8007450:	f080 817f 	bcs.w	8007752 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800745a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 8086 	bne.w	800757c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800748c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800749a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800749e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1da      	bne.n	8007470 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3308      	adds	r3, #8
 80074da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e1      	bne.n	80074ba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3308      	adds	r3, #8
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800750c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3308      	adds	r3, #8
 8007516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800751a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800751c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e3      	bne.n	80074f6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	f023 0310 	bic.w	r3, r3, #16
 8007550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800755e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e4      	bne.n	800753c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007576:	4618      	mov	r0, r3
 8007578:	f7fc f94b 	bl	8003812 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007588:	b29b      	uxth	r3, r3
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	b29b      	uxth	r3, r3
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f8fb 	bl	800778c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007596:	e0dc      	b.n	8007752 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80ce 	beq.w	8007756 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80075ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80c9 	beq.w	8007756 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e6:	647b      	str	r3, [r7, #68]	; 0x44
 80075e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e4      	bne.n	80075c4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	623b      	str	r3, [r7, #32]
   return(result);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007622:	633a      	str	r2, [r7, #48]	; 0x30
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e1      	bne.n	80075fa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60fb      	str	r3, [r7, #12]
   return(result);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	69b9      	ldr	r1, [r7, #24]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	617b      	str	r3, [r7, #20]
   return(result);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e4      	bne.n	800764a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f880 	bl	800778c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800768c:	e063      	b.n	8007756 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <HAL_UART_IRQHandler+0x584>
 800769a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d008      	beq.n	80076b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 fb57 	bl	8008d64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076b6:	e051      	b.n	800775c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d014      	beq.n	80076ee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d03a      	beq.n	800775a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
    }
    return;
 80076ec:	e035      	b.n	800775a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <HAL_UART_IRQHandler+0x5da>
 80076fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fea4 	bl	8008454 <UART_EndTransmit_IT>
    return;
 800770c:	e026      	b.n	800775c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_UART_IRQHandler+0x5fa>
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fb30 	bl	8008d8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800772c:	e016      	b.n	800775c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <HAL_UART_IRQHandler+0x628>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	2b00      	cmp	r3, #0
 8007740:	da0c      	bge.n	800775c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 fb18 	bl	8008d78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007748:	e008      	b.n	800775c <HAL_UART_IRQHandler+0x628>
      return;
 800774a:	bf00      	nop
 800774c:	e006      	b.n	800775c <HAL_UART_IRQHandler+0x628>
    return;
 800774e:	bf00      	nop
 8007750:	e004      	b.n	800775c <HAL_UART_IRQHandler+0x628>
      return;
 8007752:	bf00      	nop
 8007754:	e002      	b.n	800775c <HAL_UART_IRQHandler+0x628>
      return;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <HAL_UART_IRQHandler+0x628>
    return;
 800775a:	bf00      	nop
  }
}
 800775c:	37e8      	adds	r7, #232	; 0xe8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop

08007764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a8:	b08c      	sub	sp, #48	; 0x30
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	431a      	orrs	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4baa      	ldr	r3, [pc, #680]	; (8007a7c <UART_SetConfig+0x2d8>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077dc:	430b      	orrs	r3, r1
 80077de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a9f      	ldr	r2, [pc, #636]	; (8007a80 <UART_SetConfig+0x2dc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800780c:	4313      	orrs	r3, r2
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800781a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007824:	430b      	orrs	r3, r1
 8007826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	f023 010f 	bic.w	r1, r3, #15
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a90      	ldr	r2, [pc, #576]	; (8007a84 <UART_SetConfig+0x2e0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d125      	bne.n	8007894 <UART_SetConfig+0xf0>
 8007848:	4b8f      	ldr	r3, [pc, #572]	; (8007a88 <UART_SetConfig+0x2e4>)
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d81a      	bhi.n	800788c <UART_SetConfig+0xe8>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <UART_SetConfig+0xb8>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	0800786d 	.word	0x0800786d
 8007860:	0800787d 	.word	0x0800787d
 8007864:	08007875 	.word	0x08007875
 8007868:	08007885 	.word	0x08007885
 800786c:	2301      	movs	r3, #1
 800786e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007872:	e116      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007874:	2302      	movs	r3, #2
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800787a:	e112      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007882:	e10e      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800788a:	e10a      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007892:	e106      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a7c      	ldr	r2, [pc, #496]	; (8007a8c <UART_SetConfig+0x2e8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d138      	bne.n	8007910 <UART_SetConfig+0x16c>
 800789e:	4b7a      	ldr	r3, [pc, #488]	; (8007a88 <UART_SetConfig+0x2e4>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	f003 030c 	and.w	r3, r3, #12
 80078a8:	2b0c      	cmp	r3, #12
 80078aa:	d82d      	bhi.n	8007908 <UART_SetConfig+0x164>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <UART_SetConfig+0x110>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	08007909 	.word	0x08007909
 80078bc:	08007909 	.word	0x08007909
 80078c0:	08007909 	.word	0x08007909
 80078c4:	080078f9 	.word	0x080078f9
 80078c8:	08007909 	.word	0x08007909
 80078cc:	08007909 	.word	0x08007909
 80078d0:	08007909 	.word	0x08007909
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	08007909 	.word	0x08007909
 80078dc:	08007909 	.word	0x08007909
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007901 	.word	0x08007901
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ee:	e0d8      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f6:	e0d4      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078fe:	e0d0      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007906:	e0cc      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790e:	e0c8      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5e      	ldr	r2, [pc, #376]	; (8007a90 <UART_SetConfig+0x2ec>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d125      	bne.n	8007966 <UART_SetConfig+0x1c2>
 800791a:	4b5b      	ldr	r3, [pc, #364]	; (8007a88 <UART_SetConfig+0x2e4>)
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d016      	beq.n	8007956 <UART_SetConfig+0x1b2>
 8007928:	2b30      	cmp	r3, #48	; 0x30
 800792a:	d818      	bhi.n	800795e <UART_SetConfig+0x1ba>
 800792c:	2b20      	cmp	r3, #32
 800792e:	d00a      	beq.n	8007946 <UART_SetConfig+0x1a2>
 8007930:	2b20      	cmp	r3, #32
 8007932:	d814      	bhi.n	800795e <UART_SetConfig+0x1ba>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <UART_SetConfig+0x19a>
 8007938:	2b10      	cmp	r3, #16
 800793a:	d008      	beq.n	800794e <UART_SetConfig+0x1aa>
 800793c:	e00f      	b.n	800795e <UART_SetConfig+0x1ba>
 800793e:	2300      	movs	r3, #0
 8007940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007944:	e0ad      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007946:	2302      	movs	r3, #2
 8007948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800794c:	e0a9      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 800794e:	2304      	movs	r3, #4
 8007950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007954:	e0a5      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007956:	2308      	movs	r3, #8
 8007958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800795c:	e0a1      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 800795e:	2310      	movs	r3, #16
 8007960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007964:	e09d      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a4a      	ldr	r2, [pc, #296]	; (8007a94 <UART_SetConfig+0x2f0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d125      	bne.n	80079bc <UART_SetConfig+0x218>
 8007970:	4b45      	ldr	r3, [pc, #276]	; (8007a88 <UART_SetConfig+0x2e4>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800797a:	2bc0      	cmp	r3, #192	; 0xc0
 800797c:	d016      	beq.n	80079ac <UART_SetConfig+0x208>
 800797e:	2bc0      	cmp	r3, #192	; 0xc0
 8007980:	d818      	bhi.n	80079b4 <UART_SetConfig+0x210>
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d00a      	beq.n	800799c <UART_SetConfig+0x1f8>
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d814      	bhi.n	80079b4 <UART_SetConfig+0x210>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <UART_SetConfig+0x1f0>
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d008      	beq.n	80079a4 <UART_SetConfig+0x200>
 8007992:	e00f      	b.n	80079b4 <UART_SetConfig+0x210>
 8007994:	2300      	movs	r3, #0
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800799a:	e082      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 800799c:	2302      	movs	r3, #2
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079a2:	e07e      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079aa:	e07a      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079b2:	e076      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ba:	e072      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a35      	ldr	r2, [pc, #212]	; (8007a98 <UART_SetConfig+0x2f4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d12a      	bne.n	8007a1c <UART_SetConfig+0x278>
 80079c6:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <UART_SetConfig+0x2e4>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d4:	d01a      	beq.n	8007a0c <UART_SetConfig+0x268>
 80079d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079da:	d81b      	bhi.n	8007a14 <UART_SetConfig+0x270>
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e0:	d00c      	beq.n	80079fc <UART_SetConfig+0x258>
 80079e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e6:	d815      	bhi.n	8007a14 <UART_SetConfig+0x270>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <UART_SetConfig+0x250>
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d008      	beq.n	8007a04 <UART_SetConfig+0x260>
 80079f2:	e00f      	b.n	8007a14 <UART_SetConfig+0x270>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079fa:	e052      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 80079fc:	2302      	movs	r3, #2
 80079fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a02:	e04e      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a04:	2304      	movs	r3, #4
 8007a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0a:	e04a      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a12:	e046      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a14:	2310      	movs	r3, #16
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1a:	e042      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <UART_SetConfig+0x2dc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d13a      	bne.n	8007a9c <UART_SetConfig+0x2f8>
 8007a26:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <UART_SetConfig+0x2e4>)
 8007a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a34:	d01a      	beq.n	8007a6c <UART_SetConfig+0x2c8>
 8007a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a3a:	d81b      	bhi.n	8007a74 <UART_SetConfig+0x2d0>
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a40:	d00c      	beq.n	8007a5c <UART_SetConfig+0x2b8>
 8007a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a46:	d815      	bhi.n	8007a74 <UART_SetConfig+0x2d0>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <UART_SetConfig+0x2b0>
 8007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a50:	d008      	beq.n	8007a64 <UART_SetConfig+0x2c0>
 8007a52:	e00f      	b.n	8007a74 <UART_SetConfig+0x2d0>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a5a:	e022      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a62:	e01e      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a64:	2304      	movs	r3, #4
 8007a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a6a:	e01a      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a72:	e016      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a74:	2310      	movs	r3, #16
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	e012      	b.n	8007aa2 <UART_SetConfig+0x2fe>
 8007a7c:	cfff69f3 	.word	0xcfff69f3
 8007a80:	40008000 	.word	0x40008000
 8007a84:	40013800 	.word	0x40013800
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40004400 	.word	0x40004400
 8007a90:	40004800 	.word	0x40004800
 8007a94:	40004c00 	.word	0x40004c00
 8007a98:	40005000 	.word	0x40005000
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4aae      	ldr	r2, [pc, #696]	; (8007d60 <UART_SetConfig+0x5bc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	f040 8097 	bne.w	8007bdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d823      	bhi.n	8007afe <UART_SetConfig+0x35a>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0x318>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007aff 	.word	0x08007aff
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007aff 	.word	0x08007aff
 8007acc:	08007aef 	.word	0x08007aef
 8007ad0:	08007aff 	.word	0x08007aff
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007aff 	.word	0x08007aff
 8007adc:	08007af7 	.word	0x08007af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7fc ffda 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8007ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ae6:	e010      	b.n	8007b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ae8:	4b9e      	ldr	r3, [pc, #632]	; (8007d64 <UART_SetConfig+0x5c0>)
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007aec:	e00d      	b.n	8007b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aee:	f7fc ff65 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8007af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007af4:	e009      	b.n	8007b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007afc:	e005      	b.n	8007b0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8130 	beq.w	8007d72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	4a94      	ldr	r2, [pc, #592]	; (8007d68 <UART_SetConfig+0x5c4>)
 8007b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d305      	bcc.n	8007b42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d903      	bls.n	8007b4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b48:	e113      	b.n	8007d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	60bb      	str	r3, [r7, #8]
 8007b50:	60fa      	str	r2, [r7, #12]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	4a84      	ldr	r2, [pc, #528]	; (8007d68 <UART_SetConfig+0x5c4>)
 8007b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2200      	movs	r2, #0
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b6c:	f7f8 fbc0 	bl	80002f0 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4610      	mov	r0, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	020b      	lsls	r3, r1, #8
 8007b82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b86:	0202      	lsls	r2, r0, #8
 8007b88:	6979      	ldr	r1, [r7, #20]
 8007b8a:	6849      	ldr	r1, [r1, #4]
 8007b8c:	0849      	lsrs	r1, r1, #1
 8007b8e:	2000      	movs	r0, #0
 8007b90:	460c      	mov	r4, r1
 8007b92:	4605      	mov	r5, r0
 8007b94:	eb12 0804 	adds.w	r8, r2, r4
 8007b98:	eb43 0905 	adc.w	r9, r3, r5
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	469a      	mov	sl, r3
 8007ba4:	4693      	mov	fp, r2
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	465b      	mov	r3, fp
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fb9f 	bl	80002f0 <__aeabi_uldivmod>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc0:	d308      	bcc.n	8007bd4 <UART_SetConfig+0x430>
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc8:	d204      	bcs.n	8007bd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	60da      	str	r2, [r3, #12]
 8007bd2:	e0ce      	b.n	8007d72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007bda:	e0ca      	b.n	8007d72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be4:	d166      	bne.n	8007cb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d827      	bhi.n	8007c3e <UART_SetConfig+0x49a>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x450>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c3f 	.word	0x08007c3f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fc ff3e 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c1e:	e014      	b.n	8007c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fc ff50 	bl	8004ac4 <HAL_RCC_GetPCLK2Freq>
 8007c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c26:	e010      	b.n	8007c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b4e      	ldr	r3, [pc, #312]	; (8007d64 <UART_SetConfig+0x5c0>)
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c2c:	e00d      	b.n	8007c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fc fec5 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c34:	e009      	b.n	8007c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c3c:	e005      	b.n	8007c4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8090 	beq.w	8007d72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	4a44      	ldr	r2, [pc, #272]	; (8007d68 <UART_SetConfig+0x5c4>)
 8007c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c64:	005a      	lsls	r2, r3, #1
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	441a      	add	r2, r3
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	2b0f      	cmp	r3, #15
 8007c7c:	d916      	bls.n	8007cac <UART_SetConfig+0x508>
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c84:	d212      	bcs.n	8007cac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f023 030f 	bic.w	r3, r3, #15
 8007c8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	8bfb      	ldrh	r3, [r7, #30]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	8bfa      	ldrh	r2, [r7, #30]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	e062      	b.n	8007d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cb2:	e05e      	b.n	8007d72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d828      	bhi.n	8007d0e <UART_SetConfig+0x56a>
 8007cbc:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <UART_SetConfig+0x520>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cf1 	.word	0x08007cf1
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	08007d0f 	.word	0x08007d0f
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007d0f 	.word	0x08007d0f
 8007cdc:	08007d0f 	.word	0x08007d0f
 8007ce0:	08007d0f 	.word	0x08007d0f
 8007ce4:	08007d07 	.word	0x08007d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce8:	f7fc fed6 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8007cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cee:	e014      	b.n	8007d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf0:	f7fc fee8 	bl	8004ac4 <HAL_RCC_GetPCLK2Freq>
 8007cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cf6:	e010      	b.n	8007d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <UART_SetConfig+0x5c0>)
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cfc:	e00d      	b.n	8007d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7fc fe5d 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d04:	e009      	b.n	8007d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d0c:	e005      	b.n	8007d1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d18:	bf00      	nop
    }

    if (pclk != 0U)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d028      	beq.n	8007d72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	4a10      	ldr	r2, [pc, #64]	; (8007d68 <UART_SetConfig+0x5c4>)
 8007d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	441a      	add	r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d910      	bls.n	8007d6c <UART_SetConfig+0x5c8>
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d50:	d20c      	bcs.n	8007d6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60da      	str	r2, [r3, #12]
 8007d5c:	e009      	b.n	8007d72 <UART_SetConfig+0x5ce>
 8007d5e:	bf00      	nop
 8007d60:	40008000 	.word	0x40008000
 8007d64:	00f42400 	.word	0x00f42400
 8007d68:	0800a574 	.word	0x0800a574
      }
      else
      {
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2200      	movs	r2, #0
 8007d86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3730      	adds	r7, #48	; 0x30
 8007d96:	46bd      	mov	sp, r7
 8007d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9a:	d10a      	bne.n	8007eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ef0:	f7f9 fe3c 	bl	8001b6c <HAL_GetTick>
 8007ef4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d10e      	bne.n	8007f22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f82f 	bl	8007f76 <UART_WaitOnFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e025      	b.n	8007f6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d10e      	bne.n	8007f4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f819 	bl	8007f76 <UART_WaitOnFlagUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e00f      	b.n	8007f6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b09c      	sub	sp, #112	; 0x70
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f86:	e0a9      	b.n	80080dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	f000 80a5 	beq.w	80080dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f92:	f7f9 fdeb 	bl	8001b6c <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d302      	bcc.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d140      	bne.n	800802a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fbc:	667b      	str	r3, [r7, #100]	; 0x64
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e6      	bne.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ffa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ffc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e5      	bne.n	8007fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e069      	b.n	80080fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d051      	beq.n	80080dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008046:	d149      	bne.n	80080dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008050:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
 8008072:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	613b      	str	r3, [r7, #16]
   return(result);
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	66bb      	str	r3, [r7, #104]	; 0x68
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3308      	adds	r3, #8
 80080a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080a4:	623a      	str	r2, [r7, #32]
 80080a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	6a3a      	ldr	r2, [r7, #32]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e010      	b.n	80080fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69da      	ldr	r2, [r3, #28]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4013      	ands	r3, r2
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bf0c      	ite	eq
 80080ec:	2301      	moveq	r3, #1
 80080ee:	2300      	movne	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	f43f af46 	beq.w	8007f88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3770      	adds	r7, #112	; 0x70
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008108:	b480      	push	{r7}
 800810a:	b0a3      	sub	sp, #140	; 0x8c
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	88fa      	ldrh	r2, [r7, #6]
 8008120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	88fa      	ldrh	r2, [r7, #6]
 8008128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d10e      	bne.n	800815a <UART_Start_Receive_IT+0x52>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <UART_Start_Receive_IT+0x48>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f240 12ff 	movw	r2, #511	; 0x1ff
 800814a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800814e:	e02d      	b.n	80081ac <UART_Start_Receive_IT+0xa4>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	22ff      	movs	r2, #255	; 0xff
 8008154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008158:	e028      	b.n	80081ac <UART_Start_Receive_IT+0xa4>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10d      	bne.n	800817e <UART_Start_Receive_IT+0x76>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <UART_Start_Receive_IT+0x6c>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	22ff      	movs	r2, #255	; 0xff
 800816e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008172:	e01b      	b.n	80081ac <UART_Start_Receive_IT+0xa4>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	227f      	movs	r2, #127	; 0x7f
 8008178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800817c:	e016      	b.n	80081ac <UART_Start_Receive_IT+0xa4>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008186:	d10d      	bne.n	80081a4 <UART_Start_Receive_IT+0x9c>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d104      	bne.n	800819a <UART_Start_Receive_IT+0x92>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	227f      	movs	r2, #127	; 0x7f
 8008194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008198:	e008      	b.n	80081ac <UART_Start_Receive_IT+0xa4>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	223f      	movs	r2, #63	; 0x3f
 800819e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081a2:	e003      	b.n	80081ac <UART_Start_Receive_IT+0xa4>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2222      	movs	r2, #34	; 0x22
 80081b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3308      	adds	r3, #8
 80081c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c6:	e853 3f00 	ldrex	r3, [r3]
 80081ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80081cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80081e0:	673a      	str	r2, [r7, #112]	; 0x70
 80081e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80081e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80081ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e3      	bne.n	80081bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fc:	d153      	bne.n	80082a6 <UART_Start_Receive_IT+0x19e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	429a      	cmp	r2, r3
 8008208:	d34d      	bcc.n	80082a6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008212:	d107      	bne.n	8008224 <UART_Start_Receive_IT+0x11c>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4a4b      	ldr	r2, [pc, #300]	; (800834c <UART_Start_Receive_IT+0x244>)
 8008220:	671a      	str	r2, [r3, #112]	; 0x70
 8008222:	e002      	b.n	800822a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a4a      	ldr	r2, [pc, #296]	; (8008350 <UART_Start_Receive_IT+0x248>)
 8008228:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01a      	beq.n	8008270 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800825c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800825e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800826a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e4      	bne.n	800823a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008286:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008290:	64ba      	str	r2, [r7, #72]	; 0x48
 8008292:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e5      	bne.n	8008270 <UART_Start_Receive_IT+0x168>
 80082a4:	e04a      	b.n	800833c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d107      	bne.n	80082c0 <UART_Start_Receive_IT+0x1b8>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a26      	ldr	r2, [pc, #152]	; (8008354 <UART_Start_Receive_IT+0x24c>)
 80082bc:	671a      	str	r2, [r3, #112]	; 0x70
 80082be:	e002      	b.n	80082c6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a25      	ldr	r2, [pc, #148]	; (8008358 <UART_Start_Receive_IT+0x250>)
 80082c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d019      	beq.n	800830a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80082ea:	677b      	str	r3, [r7, #116]	; 0x74
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
 80082f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_Start_Receive_IT+0x1ce>
 8008308:	e018      	b.n	800833c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	613b      	str	r3, [r7, #16]
   return(result);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f043 0320 	orr.w	r3, r3, #32
 800831e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008328:	623b      	str	r3, [r7, #32]
 800832a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69f9      	ldr	r1, [r7, #28]
 800832e:	6a3a      	ldr	r2, [r7, #32]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	61bb      	str	r3, [r7, #24]
   return(result);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	378c      	adds	r7, #140	; 0x8c
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	08008a65 	.word	0x08008a65
 8008350:	0800876d 	.word	0x0800876d
 8008354:	0800860b 	.word	0x0800860b
 8008358:	080084ab 	.word	0x080084ab

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b095      	sub	sp, #84	; 0x54
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008382:	643b      	str	r3, [r7, #64]	; 0x40
 8008384:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e6      	bne.n	8008364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e3      	bne.n	8008396 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d118      	bne.n	8008408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	647b      	str	r3, [r7, #68]	; 0x44
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e6      	bne.n	80083d6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800841c:	bf00      	nop
 800841e:	3754      	adds	r7, #84	; 0x54
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff f996 	bl	8007778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	60bb      	str	r3, [r7, #8]
   return(result);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6979      	ldr	r1, [r7, #20]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	613b      	str	r3, [r7, #16]
   return(result);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff f961 	bl	8007764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a2:	bf00      	nop
 80084a4:	3720      	adds	r7, #32
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b096      	sub	sp, #88	; 0x58
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c2:	2b22      	cmp	r3, #34	; 0x22
 80084c4:	f040 8095 	bne.w	80085f2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80084d6:	b2d9      	uxtb	r1, r3
 80084d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	400a      	ands	r2, r1
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d178      	bne.n	8008602 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008524:	653b      	str	r3, [r7, #80]	; 0x50
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852e:	647b      	str	r3, [r7, #68]	; 0x44
 8008530:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	623b      	str	r3, [r7, #32]
   return(result);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008562:	633a      	str	r2, [r7, #48]	; 0x30
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e5      	bne.n	8008542 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008588:	2b01      	cmp	r3, #1
 800858a:	d12e      	bne.n	80085ea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	69b9      	ldr	r1, [r7, #24]
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	617b      	str	r3, [r7, #20]
   return(result);
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e6      	bne.n	8008592 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f003 0310 	and.w	r3, r3, #16
 80085ce:	2b10      	cmp	r3, #16
 80085d0:	d103      	bne.n	80085da <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2210      	movs	r2, #16
 80085d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff f8d2 	bl	800778c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085e8:	e00b      	b.n	8008602 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7f9 fa54 	bl	8001a98 <HAL_UART_RxCpltCallback>
}
 80085f0:	e007      	b.n	8008602 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0208 	orr.w	r2, r2, #8
 8008600:	619a      	str	r2, [r3, #24]
}
 8008602:	bf00      	nop
 8008604:	3758      	adds	r7, #88	; 0x58
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b096      	sub	sp, #88	; 0x58
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008618:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008622:	2b22      	cmp	r3, #34	; 0x22
 8008624:	f040 8095 	bne.w	8008752 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008636:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008638:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800863c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008640:	4013      	ands	r3, r2
 8008642:	b29a      	uxth	r2, r3
 8008644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008646:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864c:	1c9a      	adds	r2, r3, #2
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800866a:	b29b      	uxth	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d178      	bne.n	8008762 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868e:	643b      	str	r3, [r7, #64]	; 0x40
 8008690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e6      	bne.n	8008670 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f023 0301 	bic.w	r3, r3, #1
 80086b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e5      	bne.n	80086a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2220      	movs	r2, #32
 80086da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d12e      	bne.n	800874a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f023 0310 	bic.w	r3, r3, #16
 8008706:	647b      	str	r3, [r7, #68]	; 0x44
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008710:	61bb      	str	r3, [r7, #24]
 8008712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6979      	ldr	r1, [r7, #20]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	613b      	str	r3, [r7, #16]
   return(result);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e6      	bne.n	80086f2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b10      	cmp	r3, #16
 8008730:	d103      	bne.n	800873a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2210      	movs	r2, #16
 8008738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff f822 	bl	800778c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008748:	e00b      	b.n	8008762 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7f9 f9a4 	bl	8001a98 <HAL_UART_RxCpltCallback>
}
 8008750:	e007      	b.n	8008762 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0208 	orr.w	r2, r2, #8
 8008760:	619a      	str	r2, [r3, #24]
}
 8008762:	bf00      	nop
 8008764:	3758      	adds	r7, #88	; 0x58
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b0a6      	sub	sp, #152	; 0x98
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800877a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a2:	2b22      	cmp	r3, #34	; 0x22
 80087a4:	f040 814f 	bne.w	8008a46 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087b2:	e0f6      	b.n	80089a2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80087c2:	b2d9      	uxtb	r1, r3
 80087c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	400a      	ands	r2, r1
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	2b00      	cmp	r3, #0
 8008804:	d053      	beq.n	80088ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d011      	beq.n	8008836 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2201      	movs	r2, #1
 8008824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800882c:	f043 0201 	orr.w	r2, r3, #1
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008836:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d011      	beq.n	8008866 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00b      	beq.n	8008866 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2202      	movs	r2, #2
 8008854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885c:	f043 0204 	orr.w	r2, r3, #4
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d011      	beq.n	8008896 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2204      	movs	r2, #4
 8008884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800888c:	f043 0202 	orr.w	r2, r3, #2
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889c:	2b00      	cmp	r3, #0
 800889e:	d006      	beq.n	80088ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fe ff69 	bl	8007778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d173      	bne.n	80089a2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80088c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80088de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80088e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80088ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e4      	bne.n	80088ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008914:	657a      	str	r2, [r7, #84]	; 0x54
 8008916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800891a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e3      	bne.n	80088f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893a:	2b01      	cmp	r3, #1
 800893c:	d12e      	bne.n	800899c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f023 0310 	bic.w	r3, r3, #16
 8008958:	67bb      	str	r3, [r7, #120]	; 0x78
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008962:	643b      	str	r3, [r7, #64]	; 0x40
 8008964:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e6      	bne.n	8008944 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	f003 0310 	and.w	r3, r3, #16
 8008980:	2b10      	cmp	r3, #16
 8008982:	d103      	bne.n	800898c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2210      	movs	r2, #16
 800898a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7fe fef9 	bl	800778c <HAL_UARTEx_RxEventCallback>
 800899a:	e002      	b.n	80089a2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7f9 f87b 	bl	8001a98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d006      	beq.n	80089b8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80089aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f47f aefe 	bne.w	80087b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d045      	beq.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d23e      	bcs.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3308      	adds	r3, #8
 80089de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ee:	673b      	str	r3, [r7, #112]	; 0x70
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3308      	adds	r3, #8
 80089f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e5      	bne.n	80089d8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a14      	ldr	r2, [pc, #80]	; (8008a60 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008a10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f043 0320 	orr.w	r3, r3, #32
 8008a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6979      	ldr	r1, [r7, #20]
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e6      	bne.n	8008a12 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a44:	e007      	b.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699a      	ldr	r2, [r3, #24]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0208 	orr.w	r2, r2, #8
 8008a54:	619a      	str	r2, [r3, #24]
}
 8008a56:	bf00      	nop
 8008a58:	3798      	adds	r7, #152	; 0x98
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	080084ab 	.word	0x080084ab

08008a64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b0a8      	sub	sp, #160	; 0xa0
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a72:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a9a:	2b22      	cmp	r3, #34	; 0x22
 8008a9c:	f040 8153 	bne.w	8008d46 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008aa6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008aaa:	e0fa      	b.n	8008ca2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008abe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008ac2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ace:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad4:	1c9a      	adds	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008af6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d053      	beq.n	8008baa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d011      	beq.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008b0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00b      	beq.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b28:	f043 0201 	orr.w	r2, r3, #1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d011      	beq.n	8008b62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b58:	f043 0204 	orr.w	r2, r3, #4
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d011      	beq.n	8008b92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b88:	f043 0202 	orr.w	r2, r3, #2
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d006      	beq.n	8008baa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7fe fdeb 	bl	8007778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d175      	bne.n	8008ca2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bda:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e4      	bne.n	8008bb6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3308      	adds	r3, #8
 8008c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c14:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e1      	bne.n	8008bec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d12e      	bne.n	8008c9c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	f023 0310 	bic.w	r3, r3, #16
 8008c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c62:	647b      	str	r3, [r7, #68]	; 0x44
 8008c64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b10      	cmp	r3, #16
 8008c82:	d103      	bne.n	8008c8c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2210      	movs	r2, #16
 8008c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7fe fd79 	bl	800778c <HAL_UARTEx_RxEventCallback>
 8008c9a:	e002      	b.n	8008ca2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7f8 fefb 	bl	8001a98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ca2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f47f aefa 	bne.w	8008aac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d045      	beq.n	8008d56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cd0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d23e      	bcs.n	8008d56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cee:	677b      	str	r3, [r7, #116]	; 0x74
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008cf8:	633a      	str	r2, [r7, #48]	; 0x30
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e5      	bne.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a14      	ldr	r2, [pc, #80]	; (8008d60 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008d10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f043 0320 	orr.w	r3, r3, #32
 8008d26:	673b      	str	r3, [r7, #112]	; 0x70
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e6      	bne.n	8008d12 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d44:	e007      	b.n	8008d56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699a      	ldr	r2, [r3, #24]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f042 0208 	orr.w	r2, r2, #8
 8008d54:	619a      	str	r2, [r3, #24]
}
 8008d56:	bf00      	nop
 8008d58:	37a0      	adds	r7, #160	; 0xa0
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	0800860b 	.word	0x0800860b

08008d64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008db2:	2302      	movs	r3, #2
 8008db4:	e027      	b.n	8008e06 <HAL_UARTEx_DisableFifoMode+0x66>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2224      	movs	r2, #36	; 0x24
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008de4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d101      	bne.n	8008e2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e26:	2302      	movs	r3, #2
 8008e28:	e02d      	b.n	8008e86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2224      	movs	r2, #36	; 0x24
 8008e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0201 	bic.w	r2, r2, #1
 8008e50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f850 	bl	8008f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e02d      	b.n	8008f02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2224      	movs	r2, #36	; 0x24
 8008eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 0201 	bic.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f812 	bl	8008f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d108      	bne.n	8008f2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f2c:	e031      	b.n	8008f92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f2e:	2308      	movs	r3, #8
 8008f30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f32:	2308      	movs	r3, #8
 8008f34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	0e5b      	lsrs	r3, r3, #25
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 0307 	and.w	r3, r3, #7
 8008f44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	0f5b      	lsrs	r3, r3, #29
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	7b3a      	ldrb	r2, [r7, #12]
 8008f5a:	4911      	ldr	r1, [pc, #68]	; (8008fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8008f5c:	5c8a      	ldrb	r2, [r1, r2]
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f62:	7b3a      	ldrb	r2, [r7, #12]
 8008f64:	490f      	ldr	r1, [pc, #60]	; (8008fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8008f66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	7b7a      	ldrb	r2, [r7, #13]
 8008f78:	4909      	ldr	r1, [pc, #36]	; (8008fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8008f7a:	5c8a      	ldrb	r2, [r1, r2]
 8008f7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f80:	7b7a      	ldrb	r2, [r7, #13]
 8008f82:	4908      	ldr	r1, [pc, #32]	; (8008fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8008f84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	0800a58c 	.word	0x0800a58c
 8008fa4:	0800a594 	.word	0x0800a594

08008fa8 <atoi>:
 8008fa8:	220a      	movs	r2, #10
 8008faa:	2100      	movs	r1, #0
 8008fac:	f000 b882 	b.w	80090b4 <strtol>

08008fb0 <_strtol_l.constprop.0>:
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb6:	d001      	beq.n	8008fbc <_strtol_l.constprop.0+0xc>
 8008fb8:	2b24      	cmp	r3, #36	; 0x24
 8008fba:	d906      	bls.n	8008fca <_strtol_l.constprop.0+0x1a>
 8008fbc:	f000 fa68 	bl	8009490 <__errno>
 8008fc0:	2316      	movs	r3, #22
 8008fc2:	6003      	str	r3, [r0, #0]
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80090b0 <_strtol_l.constprop.0+0x100>
 8008fce:	460d      	mov	r5, r1
 8008fd0:	462e      	mov	r6, r5
 8008fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008fda:	f017 0708 	ands.w	r7, r7, #8
 8008fde:	d1f7      	bne.n	8008fd0 <_strtol_l.constprop.0+0x20>
 8008fe0:	2c2d      	cmp	r4, #45	; 0x2d
 8008fe2:	d132      	bne.n	800904a <_strtol_l.constprop.0+0x9a>
 8008fe4:	782c      	ldrb	r4, [r5, #0]
 8008fe6:	2701      	movs	r7, #1
 8008fe8:	1cb5      	adds	r5, r6, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d05b      	beq.n	80090a6 <_strtol_l.constprop.0+0xf6>
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d109      	bne.n	8009006 <_strtol_l.constprop.0+0x56>
 8008ff2:	2c30      	cmp	r4, #48	; 0x30
 8008ff4:	d107      	bne.n	8009006 <_strtol_l.constprop.0+0x56>
 8008ff6:	782c      	ldrb	r4, [r5, #0]
 8008ff8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ffc:	2c58      	cmp	r4, #88	; 0x58
 8008ffe:	d14d      	bne.n	800909c <_strtol_l.constprop.0+0xec>
 8009000:	786c      	ldrb	r4, [r5, #1]
 8009002:	2310      	movs	r3, #16
 8009004:	3502      	adds	r5, #2
 8009006:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800900a:	f108 38ff 	add.w	r8, r8, #4294967295
 800900e:	f04f 0e00 	mov.w	lr, #0
 8009012:	fbb8 f9f3 	udiv	r9, r8, r3
 8009016:	4676      	mov	r6, lr
 8009018:	fb03 8a19 	mls	sl, r3, r9, r8
 800901c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009020:	f1bc 0f09 	cmp.w	ip, #9
 8009024:	d816      	bhi.n	8009054 <_strtol_l.constprop.0+0xa4>
 8009026:	4664      	mov	r4, ip
 8009028:	42a3      	cmp	r3, r4
 800902a:	dd24      	ble.n	8009076 <_strtol_l.constprop.0+0xc6>
 800902c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009030:	d008      	beq.n	8009044 <_strtol_l.constprop.0+0x94>
 8009032:	45b1      	cmp	r9, r6
 8009034:	d31c      	bcc.n	8009070 <_strtol_l.constprop.0+0xc0>
 8009036:	d101      	bne.n	800903c <_strtol_l.constprop.0+0x8c>
 8009038:	45a2      	cmp	sl, r4
 800903a:	db19      	blt.n	8009070 <_strtol_l.constprop.0+0xc0>
 800903c:	fb06 4603 	mla	r6, r6, r3, r4
 8009040:	f04f 0e01 	mov.w	lr, #1
 8009044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009048:	e7e8      	b.n	800901c <_strtol_l.constprop.0+0x6c>
 800904a:	2c2b      	cmp	r4, #43	; 0x2b
 800904c:	bf04      	itt	eq
 800904e:	782c      	ldrbeq	r4, [r5, #0]
 8009050:	1cb5      	addeq	r5, r6, #2
 8009052:	e7ca      	b.n	8008fea <_strtol_l.constprop.0+0x3a>
 8009054:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009058:	f1bc 0f19 	cmp.w	ip, #25
 800905c:	d801      	bhi.n	8009062 <_strtol_l.constprop.0+0xb2>
 800905e:	3c37      	subs	r4, #55	; 0x37
 8009060:	e7e2      	b.n	8009028 <_strtol_l.constprop.0+0x78>
 8009062:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009066:	f1bc 0f19 	cmp.w	ip, #25
 800906a:	d804      	bhi.n	8009076 <_strtol_l.constprop.0+0xc6>
 800906c:	3c57      	subs	r4, #87	; 0x57
 800906e:	e7db      	b.n	8009028 <_strtol_l.constprop.0+0x78>
 8009070:	f04f 3eff 	mov.w	lr, #4294967295
 8009074:	e7e6      	b.n	8009044 <_strtol_l.constprop.0+0x94>
 8009076:	f1be 3fff 	cmp.w	lr, #4294967295
 800907a:	d105      	bne.n	8009088 <_strtol_l.constprop.0+0xd8>
 800907c:	2322      	movs	r3, #34	; 0x22
 800907e:	6003      	str	r3, [r0, #0]
 8009080:	4646      	mov	r6, r8
 8009082:	b942      	cbnz	r2, 8009096 <_strtol_l.constprop.0+0xe6>
 8009084:	4630      	mov	r0, r6
 8009086:	e79e      	b.n	8008fc6 <_strtol_l.constprop.0+0x16>
 8009088:	b107      	cbz	r7, 800908c <_strtol_l.constprop.0+0xdc>
 800908a:	4276      	negs	r6, r6
 800908c:	2a00      	cmp	r2, #0
 800908e:	d0f9      	beq.n	8009084 <_strtol_l.constprop.0+0xd4>
 8009090:	f1be 0f00 	cmp.w	lr, #0
 8009094:	d000      	beq.n	8009098 <_strtol_l.constprop.0+0xe8>
 8009096:	1e69      	subs	r1, r5, #1
 8009098:	6011      	str	r1, [r2, #0]
 800909a:	e7f3      	b.n	8009084 <_strtol_l.constprop.0+0xd4>
 800909c:	2430      	movs	r4, #48	; 0x30
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1b1      	bne.n	8009006 <_strtol_l.constprop.0+0x56>
 80090a2:	2308      	movs	r3, #8
 80090a4:	e7af      	b.n	8009006 <_strtol_l.constprop.0+0x56>
 80090a6:	2c30      	cmp	r4, #48	; 0x30
 80090a8:	d0a5      	beq.n	8008ff6 <_strtol_l.constprop.0+0x46>
 80090aa:	230a      	movs	r3, #10
 80090ac:	e7ab      	b.n	8009006 <_strtol_l.constprop.0+0x56>
 80090ae:	bf00      	nop
 80090b0:	0800a59d 	.word	0x0800a59d

080090b4 <strtol>:
 80090b4:	4613      	mov	r3, r2
 80090b6:	460a      	mov	r2, r1
 80090b8:	4601      	mov	r1, r0
 80090ba:	4802      	ldr	r0, [pc, #8]	; (80090c4 <strtol+0x10>)
 80090bc:	6800      	ldr	r0, [r0, #0]
 80090be:	f7ff bf77 	b.w	8008fb0 <_strtol_l.constprop.0>
 80090c2:	bf00      	nop
 80090c4:	20000120 	.word	0x20000120

080090c8 <std>:
 80090c8:	2300      	movs	r3, #0
 80090ca:	b510      	push	{r4, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	e9c0 3300 	strd	r3, r3, [r0]
 80090d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	; 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	4619      	mov	r1, r3
 80090e2:	2208      	movs	r2, #8
 80090e4:	305c      	adds	r0, #92	; 0x5c
 80090e6:	f000 f928 	bl	800933a <memset>
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <std+0x58>)
 80090ec:	6263      	str	r3, [r4, #36]	; 0x24
 80090ee:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <std+0x5c>)
 80090f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090f2:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <std+0x60>)
 80090f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f6:	4b0d      	ldr	r3, [pc, #52]	; (800912c <std+0x64>)
 80090f8:	6323      	str	r3, [r4, #48]	; 0x30
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <std+0x68>)
 80090fc:	6224      	str	r4, [r4, #32]
 80090fe:	429c      	cmp	r4, r3
 8009100:	d006      	beq.n	8009110 <std+0x48>
 8009102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009106:	4294      	cmp	r4, r2
 8009108:	d002      	beq.n	8009110 <std+0x48>
 800910a:	33d0      	adds	r3, #208	; 0xd0
 800910c:	429c      	cmp	r4, r3
 800910e:	d105      	bne.n	800911c <std+0x54>
 8009110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f000 b9e4 	b.w	80094e4 <__retarget_lock_init_recursive>
 800911c:	bd10      	pop	{r4, pc}
 800911e:	bf00      	nop
 8009120:	080092b5 	.word	0x080092b5
 8009124:	080092d7 	.word	0x080092d7
 8009128:	0800930f 	.word	0x0800930f
 800912c:	08009333 	.word	0x08009333
 8009130:	20000550 	.word	0x20000550

08009134 <stdio_exit_handler>:
 8009134:	4a02      	ldr	r2, [pc, #8]	; (8009140 <stdio_exit_handler+0xc>)
 8009136:	4903      	ldr	r1, [pc, #12]	; (8009144 <stdio_exit_handler+0x10>)
 8009138:	4803      	ldr	r0, [pc, #12]	; (8009148 <stdio_exit_handler+0x14>)
 800913a:	f000 b869 	b.w	8009210 <_fwalk_sglue>
 800913e:	bf00      	nop
 8009140:	200000c8 	.word	0x200000c8
 8009144:	08009e05 	.word	0x08009e05
 8009148:	200000d4 	.word	0x200000d4

0800914c <cleanup_stdio>:
 800914c:	6841      	ldr	r1, [r0, #4]
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <cleanup_stdio+0x34>)
 8009150:	4299      	cmp	r1, r3
 8009152:	b510      	push	{r4, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	d001      	beq.n	800915c <cleanup_stdio+0x10>
 8009158:	f000 fe54 	bl	8009e04 <_fflush_r>
 800915c:	68a1      	ldr	r1, [r4, #8]
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <cleanup_stdio+0x38>)
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <cleanup_stdio+0x1e>
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fe4d 	bl	8009e04 <_fflush_r>
 800916a:	68e1      	ldr	r1, [r4, #12]
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <cleanup_stdio+0x3c>)
 800916e:	4299      	cmp	r1, r3
 8009170:	d004      	beq.n	800917c <cleanup_stdio+0x30>
 8009172:	4620      	mov	r0, r4
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	f000 be44 	b.w	8009e04 <_fflush_r>
 800917c:	bd10      	pop	{r4, pc}
 800917e:	bf00      	nop
 8009180:	20000550 	.word	0x20000550
 8009184:	200005b8 	.word	0x200005b8
 8009188:	20000620 	.word	0x20000620

0800918c <global_stdio_init.part.0>:
 800918c:	b510      	push	{r4, lr}
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <global_stdio_init.part.0+0x30>)
 8009190:	4c0b      	ldr	r4, [pc, #44]	; (80091c0 <global_stdio_init.part.0+0x34>)
 8009192:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <global_stdio_init.part.0+0x38>)
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	4620      	mov	r0, r4
 8009198:	2200      	movs	r2, #0
 800919a:	2104      	movs	r1, #4
 800919c:	f7ff ff94 	bl	80090c8 <std>
 80091a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091a4:	2201      	movs	r2, #1
 80091a6:	2109      	movs	r1, #9
 80091a8:	f7ff ff8e 	bl	80090c8 <std>
 80091ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091b0:	2202      	movs	r2, #2
 80091b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b6:	2112      	movs	r1, #18
 80091b8:	f7ff bf86 	b.w	80090c8 <std>
 80091bc:	20000688 	.word	0x20000688
 80091c0:	20000550 	.word	0x20000550
 80091c4:	08009135 	.word	0x08009135

080091c8 <__sfp_lock_acquire>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sfp_lock_acquire+0x8>)
 80091ca:	f000 b98c 	b.w	80094e6 <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	20000691 	.word	0x20000691

080091d4 <__sfp_lock_release>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__sfp_lock_release+0x8>)
 80091d6:	f000 b987 	b.w	80094e8 <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	20000691 	.word	0x20000691

080091e0 <__sinit>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4604      	mov	r4, r0
 80091e4:	f7ff fff0 	bl	80091c8 <__sfp_lock_acquire>
 80091e8:	6a23      	ldr	r3, [r4, #32]
 80091ea:	b11b      	cbz	r3, 80091f4 <__sinit+0x14>
 80091ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f0:	f7ff bff0 	b.w	80091d4 <__sfp_lock_release>
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <__sinit+0x28>)
 80091f6:	6223      	str	r3, [r4, #32]
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <__sinit+0x2c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1f5      	bne.n	80091ec <__sinit+0xc>
 8009200:	f7ff ffc4 	bl	800918c <global_stdio_init.part.0>
 8009204:	e7f2      	b.n	80091ec <__sinit+0xc>
 8009206:	bf00      	nop
 8009208:	0800914d 	.word	0x0800914d
 800920c:	20000688 	.word	0x20000688

08009210 <_fwalk_sglue>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	4607      	mov	r7, r0
 8009216:	4688      	mov	r8, r1
 8009218:	4614      	mov	r4, r2
 800921a:	2600      	movs	r6, #0
 800921c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009220:	f1b9 0901 	subs.w	r9, r9, #1
 8009224:	d505      	bpl.n	8009232 <_fwalk_sglue+0x22>
 8009226:	6824      	ldr	r4, [r4, #0]
 8009228:	2c00      	cmp	r4, #0
 800922a:	d1f7      	bne.n	800921c <_fwalk_sglue+0xc>
 800922c:	4630      	mov	r0, r6
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d907      	bls.n	8009248 <_fwalk_sglue+0x38>
 8009238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800923c:	3301      	adds	r3, #1
 800923e:	d003      	beq.n	8009248 <_fwalk_sglue+0x38>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	4306      	orrs	r6, r0
 8009248:	3568      	adds	r5, #104	; 0x68
 800924a:	e7e9      	b.n	8009220 <_fwalk_sglue+0x10>

0800924c <sniprintf>:
 800924c:	b40c      	push	{r2, r3}
 800924e:	b530      	push	{r4, r5, lr}
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <sniprintf+0x64>)
 8009252:	1e0c      	subs	r4, r1, #0
 8009254:	681d      	ldr	r5, [r3, #0]
 8009256:	b09d      	sub	sp, #116	; 0x74
 8009258:	da08      	bge.n	800926c <sniprintf+0x20>
 800925a:	238b      	movs	r3, #139	; 0x8b
 800925c:	602b      	str	r3, [r5, #0]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	b01d      	add	sp, #116	; 0x74
 8009264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009268:	b002      	add	sp, #8
 800926a:	4770      	bx	lr
 800926c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009270:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009274:	bf14      	ite	ne
 8009276:	f104 33ff 	addne.w	r3, r4, #4294967295
 800927a:	4623      	moveq	r3, r4
 800927c:	9304      	str	r3, [sp, #16]
 800927e:	9307      	str	r3, [sp, #28]
 8009280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009284:	9002      	str	r0, [sp, #8]
 8009286:	9006      	str	r0, [sp, #24]
 8009288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800928c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800928e:	ab21      	add	r3, sp, #132	; 0x84
 8009290:	a902      	add	r1, sp, #8
 8009292:	4628      	mov	r0, r5
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	f000 faa1 	bl	80097dc <_svfiprintf_r>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	bfbc      	itt	lt
 800929e:	238b      	movlt	r3, #139	; 0x8b
 80092a0:	602b      	strlt	r3, [r5, #0]
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	d0dd      	beq.n	8009262 <sniprintf+0x16>
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]
 80092ac:	e7d9      	b.n	8009262 <sniprintf+0x16>
 80092ae:	bf00      	nop
 80092b0:	20000120 	.word	0x20000120

080092b4 <__sread>:
 80092b4:	b510      	push	{r4, lr}
 80092b6:	460c      	mov	r4, r1
 80092b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092bc:	f000 f8c4 	bl	8009448 <_read_r>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	bfab      	itete	ge
 80092c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092c6:	89a3      	ldrhlt	r3, [r4, #12]
 80092c8:	181b      	addge	r3, r3, r0
 80092ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092ce:	bfac      	ite	ge
 80092d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092d2:	81a3      	strhlt	r3, [r4, #12]
 80092d4:	bd10      	pop	{r4, pc}

080092d6 <__swrite>:
 80092d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	461f      	mov	r7, r3
 80092dc:	898b      	ldrh	r3, [r1, #12]
 80092de:	05db      	lsls	r3, r3, #23
 80092e0:	4605      	mov	r5, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	4616      	mov	r6, r2
 80092e6:	d505      	bpl.n	80092f4 <__swrite+0x1e>
 80092e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ec:	2302      	movs	r3, #2
 80092ee:	2200      	movs	r2, #0
 80092f0:	f000 f898 	bl	8009424 <_lseek_r>
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	4632      	mov	r2, r6
 8009302:	463b      	mov	r3, r7
 8009304:	4628      	mov	r0, r5
 8009306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930a:	f000 b8af 	b.w	800946c <_write_r>

0800930e <__sseek>:
 800930e:	b510      	push	{r4, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009316:	f000 f885 	bl	8009424 <_lseek_r>
 800931a:	1c43      	adds	r3, r0, #1
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	bf15      	itete	ne
 8009320:	6560      	strne	r0, [r4, #84]	; 0x54
 8009322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800932a:	81a3      	strheq	r3, [r4, #12]
 800932c:	bf18      	it	ne
 800932e:	81a3      	strhne	r3, [r4, #12]
 8009330:	bd10      	pop	{r4, pc}

08009332 <__sclose>:
 8009332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009336:	f000 b865 	b.w	8009404 <_close_r>

0800933a <memset>:
 800933a:	4402      	add	r2, r0
 800933c:	4603      	mov	r3, r0
 800933e:	4293      	cmp	r3, r2
 8009340:	d100      	bne.n	8009344 <memset+0xa>
 8009342:	4770      	bx	lr
 8009344:	f803 1b01 	strb.w	r1, [r3], #1
 8009348:	e7f9      	b.n	800933e <memset+0x4>
	...

0800934c <strtok>:
 800934c:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <strtok+0x5c>)
 800934e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009350:	681e      	ldr	r6, [r3, #0]
 8009352:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009354:	4605      	mov	r5, r0
 8009356:	b9fc      	cbnz	r4, 8009398 <strtok+0x4c>
 8009358:	2050      	movs	r0, #80	; 0x50
 800935a:	9101      	str	r1, [sp, #4]
 800935c:	f000 f930 	bl	80095c0 <malloc>
 8009360:	9901      	ldr	r1, [sp, #4]
 8009362:	6470      	str	r0, [r6, #68]	; 0x44
 8009364:	4602      	mov	r2, r0
 8009366:	b920      	cbnz	r0, 8009372 <strtok+0x26>
 8009368:	4b10      	ldr	r3, [pc, #64]	; (80093ac <strtok+0x60>)
 800936a:	4811      	ldr	r0, [pc, #68]	; (80093b0 <strtok+0x64>)
 800936c:	215b      	movs	r1, #91	; 0x5b
 800936e:	f000 f8bd 	bl	80094ec <__assert_func>
 8009372:	e9c0 4400 	strd	r4, r4, [r0]
 8009376:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800937a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800937e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009382:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009386:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800938a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800938e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009392:	6184      	str	r4, [r0, #24]
 8009394:	7704      	strb	r4, [r0, #28]
 8009396:	6244      	str	r4, [r0, #36]	; 0x24
 8009398:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800939a:	2301      	movs	r3, #1
 800939c:	4628      	mov	r0, r5
 800939e:	b002      	add	sp, #8
 80093a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093a4:	f000 b806 	b.w	80093b4 <__strtok_r>
 80093a8:	20000120 	.word	0x20000120
 80093ac:	0800a69d 	.word	0x0800a69d
 80093b0:	0800a6b4 	.word	0x0800a6b4

080093b4 <__strtok_r>:
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b6:	b908      	cbnz	r0, 80093bc <__strtok_r+0x8>
 80093b8:	6810      	ldr	r0, [r2, #0]
 80093ba:	b188      	cbz	r0, 80093e0 <__strtok_r+0x2c>
 80093bc:	4604      	mov	r4, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80093c4:	460f      	mov	r7, r1
 80093c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80093ca:	b91e      	cbnz	r6, 80093d4 <__strtok_r+0x20>
 80093cc:	b965      	cbnz	r5, 80093e8 <__strtok_r+0x34>
 80093ce:	6015      	str	r5, [r2, #0]
 80093d0:	4628      	mov	r0, r5
 80093d2:	e005      	b.n	80093e0 <__strtok_r+0x2c>
 80093d4:	42b5      	cmp	r5, r6
 80093d6:	d1f6      	bne.n	80093c6 <__strtok_r+0x12>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f0      	bne.n	80093be <__strtok_r+0xa>
 80093dc:	6014      	str	r4, [r2, #0]
 80093de:	7003      	strb	r3, [r0, #0]
 80093e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e2:	461c      	mov	r4, r3
 80093e4:	e00c      	b.n	8009400 <__strtok_r+0x4c>
 80093e6:	b915      	cbnz	r5, 80093ee <__strtok_r+0x3a>
 80093e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093ec:	460e      	mov	r6, r1
 80093ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80093f2:	42ab      	cmp	r3, r5
 80093f4:	d1f7      	bne.n	80093e6 <__strtok_r+0x32>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0f3      	beq.n	80093e2 <__strtok_r+0x2e>
 80093fa:	2300      	movs	r3, #0
 80093fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009400:	6014      	str	r4, [r2, #0]
 8009402:	e7ed      	b.n	80093e0 <__strtok_r+0x2c>

08009404 <_close_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d06      	ldr	r5, [pc, #24]	; (8009420 <_close_r+0x1c>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	f7f7 fd9b 	bl	8000f4a <_close>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_close_r+0x1a>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_close_r+0x1a>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	2000068c 	.word	0x2000068c

08009424 <_lseek_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_lseek_r+0x20>)
 8009428:	4604      	mov	r4, r0
 800942a:	4608      	mov	r0, r1
 800942c:	4611      	mov	r1, r2
 800942e:	2200      	movs	r2, #0
 8009430:	602a      	str	r2, [r5, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f7f7 fdb0 	bl	8000f98 <_lseek>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_lseek_r+0x1e>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_lseek_r+0x1e>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	2000068c 	.word	0x2000068c

08009448 <_read_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_read_r+0x20>)
 800944c:	4604      	mov	r4, r0
 800944e:	4608      	mov	r0, r1
 8009450:	4611      	mov	r1, r2
 8009452:	2200      	movs	r2, #0
 8009454:	602a      	str	r2, [r5, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	f7f7 fd3e 	bl	8000ed8 <_read>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_read_r+0x1e>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_read_r+0x1e>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	2000068c 	.word	0x2000068c

0800946c <_write_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	; (800948c <_write_r+0x20>)
 8009470:	4604      	mov	r4, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f7 fd49 	bl	8000f12 <_write>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_write_r+0x1e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_write_r+0x1e>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	2000068c 	.word	0x2000068c

08009490 <__errno>:
 8009490:	4b01      	ldr	r3, [pc, #4]	; (8009498 <__errno+0x8>)
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000120 	.word	0x20000120

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4d0d      	ldr	r5, [pc, #52]	; (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	; (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1b64      	subs	r4, r4, r5
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2600      	movs	r6, #0
 80094a8:	42a6      	cmp	r6, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4d0b      	ldr	r5, [pc, #44]	; (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	; (80094e0 <__libc_init_array+0x44>)
 80094b0:	f000 fffa 	bl	800a4a8 <_init>
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2600      	movs	r6, #0
 80094ba:	42a6      	cmp	r6, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c4:	4798      	blx	r3
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ce:	4798      	blx	r3
 80094d0:	3601      	adds	r6, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	0800a788 	.word	0x0800a788
 80094d8:	0800a788 	.word	0x0800a788
 80094dc:	0800a788 	.word	0x0800a788
 80094e0:	0800a78c 	.word	0x0800a78c

080094e4 <__retarget_lock_init_recursive>:
 80094e4:	4770      	bx	lr

080094e6 <__retarget_lock_acquire_recursive>:
 80094e6:	4770      	bx	lr

080094e8 <__retarget_lock_release_recursive>:
 80094e8:	4770      	bx	lr
	...

080094ec <__assert_func>:
 80094ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ee:	4614      	mov	r4, r2
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <__assert_func+0x2c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4605      	mov	r5, r0
 80094f8:	68d8      	ldr	r0, [r3, #12]
 80094fa:	b14c      	cbz	r4, 8009510 <__assert_func+0x24>
 80094fc:	4b07      	ldr	r3, [pc, #28]	; (800951c <__assert_func+0x30>)
 80094fe:	9100      	str	r1, [sp, #0]
 8009500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009504:	4906      	ldr	r1, [pc, #24]	; (8009520 <__assert_func+0x34>)
 8009506:	462b      	mov	r3, r5
 8009508:	f000 fca4 	bl	8009e54 <fiprintf>
 800950c:	f000 fcec 	bl	8009ee8 <abort>
 8009510:	4b04      	ldr	r3, [pc, #16]	; (8009524 <__assert_func+0x38>)
 8009512:	461c      	mov	r4, r3
 8009514:	e7f3      	b.n	80094fe <__assert_func+0x12>
 8009516:	bf00      	nop
 8009518:	20000120 	.word	0x20000120
 800951c:	0800a70e 	.word	0x0800a70e
 8009520:	0800a71b 	.word	0x0800a71b
 8009524:	0800a749 	.word	0x0800a749

08009528 <_free_r>:
 8009528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800952a:	2900      	cmp	r1, #0
 800952c:	d044      	beq.n	80095b8 <_free_r+0x90>
 800952e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009532:	9001      	str	r0, [sp, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f1a1 0404 	sub.w	r4, r1, #4
 800953a:	bfb8      	it	lt
 800953c:	18e4      	addlt	r4, r4, r3
 800953e:	f000 f8e7 	bl	8009710 <__malloc_lock>
 8009542:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <_free_r+0x94>)
 8009544:	9801      	ldr	r0, [sp, #4]
 8009546:	6813      	ldr	r3, [r2, #0]
 8009548:	b933      	cbnz	r3, 8009558 <_free_r+0x30>
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	6014      	str	r4, [r2, #0]
 800954e:	b003      	add	sp, #12
 8009550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009554:	f000 b8e2 	b.w	800971c <__malloc_unlock>
 8009558:	42a3      	cmp	r3, r4
 800955a:	d908      	bls.n	800956e <_free_r+0x46>
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	1961      	adds	r1, r4, r5
 8009560:	428b      	cmp	r3, r1
 8009562:	bf01      	itttt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	1949      	addeq	r1, r1, r5
 800956a:	6021      	streq	r1, [r4, #0]
 800956c:	e7ed      	b.n	800954a <_free_r+0x22>
 800956e:	461a      	mov	r2, r3
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	b10b      	cbz	r3, 8009578 <_free_r+0x50>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d9fa      	bls.n	800956e <_free_r+0x46>
 8009578:	6811      	ldr	r1, [r2, #0]
 800957a:	1855      	adds	r5, r2, r1
 800957c:	42a5      	cmp	r5, r4
 800957e:	d10b      	bne.n	8009598 <_free_r+0x70>
 8009580:	6824      	ldr	r4, [r4, #0]
 8009582:	4421      	add	r1, r4
 8009584:	1854      	adds	r4, r2, r1
 8009586:	42a3      	cmp	r3, r4
 8009588:	6011      	str	r1, [r2, #0]
 800958a:	d1e0      	bne.n	800954e <_free_r+0x26>
 800958c:	681c      	ldr	r4, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	6053      	str	r3, [r2, #4]
 8009592:	440c      	add	r4, r1
 8009594:	6014      	str	r4, [r2, #0]
 8009596:	e7da      	b.n	800954e <_free_r+0x26>
 8009598:	d902      	bls.n	80095a0 <_free_r+0x78>
 800959a:	230c      	movs	r3, #12
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	e7d6      	b.n	800954e <_free_r+0x26>
 80095a0:	6825      	ldr	r5, [r4, #0]
 80095a2:	1961      	adds	r1, r4, r5
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf04      	itt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	6063      	str	r3, [r4, #4]
 80095ae:	bf04      	itt	eq
 80095b0:	1949      	addeq	r1, r1, r5
 80095b2:	6021      	streq	r1, [r4, #0]
 80095b4:	6054      	str	r4, [r2, #4]
 80095b6:	e7ca      	b.n	800954e <_free_r+0x26>
 80095b8:	b003      	add	sp, #12
 80095ba:	bd30      	pop	{r4, r5, pc}
 80095bc:	20000694 	.word	0x20000694

080095c0 <malloc>:
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <malloc+0xc>)
 80095c2:	4601      	mov	r1, r0
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f000 b823 	b.w	8009610 <_malloc_r>
 80095ca:	bf00      	nop
 80095cc:	20000120 	.word	0x20000120

080095d0 <sbrk_aligned>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4e0e      	ldr	r6, [pc, #56]	; (800960c <sbrk_aligned+0x3c>)
 80095d4:	460c      	mov	r4, r1
 80095d6:	6831      	ldr	r1, [r6, #0]
 80095d8:	4605      	mov	r5, r0
 80095da:	b911      	cbnz	r1, 80095e2 <sbrk_aligned+0x12>
 80095dc:	f000 fc66 	bl	8009eac <_sbrk_r>
 80095e0:	6030      	str	r0, [r6, #0]
 80095e2:	4621      	mov	r1, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 fc61 	bl	8009eac <_sbrk_r>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	d00a      	beq.n	8009604 <sbrk_aligned+0x34>
 80095ee:	1cc4      	adds	r4, r0, #3
 80095f0:	f024 0403 	bic.w	r4, r4, #3
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	d007      	beq.n	8009608 <sbrk_aligned+0x38>
 80095f8:	1a21      	subs	r1, r4, r0
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 fc56 	bl	8009eac <_sbrk_r>
 8009600:	3001      	adds	r0, #1
 8009602:	d101      	bne.n	8009608 <sbrk_aligned+0x38>
 8009604:	f04f 34ff 	mov.w	r4, #4294967295
 8009608:	4620      	mov	r0, r4
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	20000698 	.word	0x20000698

08009610 <_malloc_r>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	1ccd      	adds	r5, r1, #3
 8009616:	f025 0503 	bic.w	r5, r5, #3
 800961a:	3508      	adds	r5, #8
 800961c:	2d0c      	cmp	r5, #12
 800961e:	bf38      	it	cc
 8009620:	250c      	movcc	r5, #12
 8009622:	2d00      	cmp	r5, #0
 8009624:	4607      	mov	r7, r0
 8009626:	db01      	blt.n	800962c <_malloc_r+0x1c>
 8009628:	42a9      	cmp	r1, r5
 800962a:	d905      	bls.n	8009638 <_malloc_r+0x28>
 800962c:	230c      	movs	r3, #12
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	2600      	movs	r6, #0
 8009632:	4630      	mov	r0, r6
 8009634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800970c <_malloc_r+0xfc>
 800963c:	f000 f868 	bl	8009710 <__malloc_lock>
 8009640:	f8d8 3000 	ldr.w	r3, [r8]
 8009644:	461c      	mov	r4, r3
 8009646:	bb5c      	cbnz	r4, 80096a0 <_malloc_r+0x90>
 8009648:	4629      	mov	r1, r5
 800964a:	4638      	mov	r0, r7
 800964c:	f7ff ffc0 	bl	80095d0 <sbrk_aligned>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	4604      	mov	r4, r0
 8009654:	d155      	bne.n	8009702 <_malloc_r+0xf2>
 8009656:	f8d8 4000 	ldr.w	r4, [r8]
 800965a:	4626      	mov	r6, r4
 800965c:	2e00      	cmp	r6, #0
 800965e:	d145      	bne.n	80096ec <_malloc_r+0xdc>
 8009660:	2c00      	cmp	r4, #0
 8009662:	d048      	beq.n	80096f6 <_malloc_r+0xe6>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	4631      	mov	r1, r6
 8009668:	4638      	mov	r0, r7
 800966a:	eb04 0903 	add.w	r9, r4, r3
 800966e:	f000 fc1d 	bl	8009eac <_sbrk_r>
 8009672:	4581      	cmp	r9, r0
 8009674:	d13f      	bne.n	80096f6 <_malloc_r+0xe6>
 8009676:	6821      	ldr	r1, [r4, #0]
 8009678:	1a6d      	subs	r5, r5, r1
 800967a:	4629      	mov	r1, r5
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff ffa7 	bl	80095d0 <sbrk_aligned>
 8009682:	3001      	adds	r0, #1
 8009684:	d037      	beq.n	80096f6 <_malloc_r+0xe6>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	442b      	add	r3, r5
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	f8d8 3000 	ldr.w	r3, [r8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d038      	beq.n	8009706 <_malloc_r+0xf6>
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	42a2      	cmp	r2, r4
 8009698:	d12b      	bne.n	80096f2 <_malloc_r+0xe2>
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
 800969e:	e00f      	b.n	80096c0 <_malloc_r+0xb0>
 80096a0:	6822      	ldr	r2, [r4, #0]
 80096a2:	1b52      	subs	r2, r2, r5
 80096a4:	d41f      	bmi.n	80096e6 <_malloc_r+0xd6>
 80096a6:	2a0b      	cmp	r2, #11
 80096a8:	d917      	bls.n	80096da <_malloc_r+0xca>
 80096aa:	1961      	adds	r1, r4, r5
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	6025      	str	r5, [r4, #0]
 80096b0:	bf18      	it	ne
 80096b2:	6059      	strne	r1, [r3, #4]
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	bf08      	it	eq
 80096b8:	f8c8 1000 	streq.w	r1, [r8]
 80096bc:	5162      	str	r2, [r4, r5]
 80096be:	604b      	str	r3, [r1, #4]
 80096c0:	4638      	mov	r0, r7
 80096c2:	f104 060b 	add.w	r6, r4, #11
 80096c6:	f000 f829 	bl	800971c <__malloc_unlock>
 80096ca:	f026 0607 	bic.w	r6, r6, #7
 80096ce:	1d23      	adds	r3, r4, #4
 80096d0:	1af2      	subs	r2, r6, r3
 80096d2:	d0ae      	beq.n	8009632 <_malloc_r+0x22>
 80096d4:	1b9b      	subs	r3, r3, r6
 80096d6:	50a3      	str	r3, [r4, r2]
 80096d8:	e7ab      	b.n	8009632 <_malloc_r+0x22>
 80096da:	42a3      	cmp	r3, r4
 80096dc:	6862      	ldr	r2, [r4, #4]
 80096de:	d1dd      	bne.n	800969c <_malloc_r+0x8c>
 80096e0:	f8c8 2000 	str.w	r2, [r8]
 80096e4:	e7ec      	b.n	80096c0 <_malloc_r+0xb0>
 80096e6:	4623      	mov	r3, r4
 80096e8:	6864      	ldr	r4, [r4, #4]
 80096ea:	e7ac      	b.n	8009646 <_malloc_r+0x36>
 80096ec:	4634      	mov	r4, r6
 80096ee:	6876      	ldr	r6, [r6, #4]
 80096f0:	e7b4      	b.n	800965c <_malloc_r+0x4c>
 80096f2:	4613      	mov	r3, r2
 80096f4:	e7cc      	b.n	8009690 <_malloc_r+0x80>
 80096f6:	230c      	movs	r3, #12
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	4638      	mov	r0, r7
 80096fc:	f000 f80e 	bl	800971c <__malloc_unlock>
 8009700:	e797      	b.n	8009632 <_malloc_r+0x22>
 8009702:	6025      	str	r5, [r4, #0]
 8009704:	e7dc      	b.n	80096c0 <_malloc_r+0xb0>
 8009706:	605b      	str	r3, [r3, #4]
 8009708:	deff      	udf	#255	; 0xff
 800970a:	bf00      	nop
 800970c:	20000694 	.word	0x20000694

08009710 <__malloc_lock>:
 8009710:	4801      	ldr	r0, [pc, #4]	; (8009718 <__malloc_lock+0x8>)
 8009712:	f7ff bee8 	b.w	80094e6 <__retarget_lock_acquire_recursive>
 8009716:	bf00      	nop
 8009718:	20000690 	.word	0x20000690

0800971c <__malloc_unlock>:
 800971c:	4801      	ldr	r0, [pc, #4]	; (8009724 <__malloc_unlock+0x8>)
 800971e:	f7ff bee3 	b.w	80094e8 <__retarget_lock_release_recursive>
 8009722:	bf00      	nop
 8009724:	20000690 	.word	0x20000690

08009728 <__ssputs_r>:
 8009728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	688e      	ldr	r6, [r1, #8]
 800972e:	461f      	mov	r7, r3
 8009730:	42be      	cmp	r6, r7
 8009732:	680b      	ldr	r3, [r1, #0]
 8009734:	4682      	mov	sl, r0
 8009736:	460c      	mov	r4, r1
 8009738:	4690      	mov	r8, r2
 800973a:	d82c      	bhi.n	8009796 <__ssputs_r+0x6e>
 800973c:	898a      	ldrh	r2, [r1, #12]
 800973e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009742:	d026      	beq.n	8009792 <__ssputs_r+0x6a>
 8009744:	6965      	ldr	r5, [r4, #20]
 8009746:	6909      	ldr	r1, [r1, #16]
 8009748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800974c:	eba3 0901 	sub.w	r9, r3, r1
 8009750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009754:	1c7b      	adds	r3, r7, #1
 8009756:	444b      	add	r3, r9
 8009758:	106d      	asrs	r5, r5, #1
 800975a:	429d      	cmp	r5, r3
 800975c:	bf38      	it	cc
 800975e:	461d      	movcc	r5, r3
 8009760:	0553      	lsls	r3, r2, #21
 8009762:	d527      	bpl.n	80097b4 <__ssputs_r+0x8c>
 8009764:	4629      	mov	r1, r5
 8009766:	f7ff ff53 	bl	8009610 <_malloc_r>
 800976a:	4606      	mov	r6, r0
 800976c:	b360      	cbz	r0, 80097c8 <__ssputs_r+0xa0>
 800976e:	6921      	ldr	r1, [r4, #16]
 8009770:	464a      	mov	r2, r9
 8009772:	f000 fbab 	bl	8009ecc <memcpy>
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800977c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6126      	str	r6, [r4, #16]
 8009784:	6165      	str	r5, [r4, #20]
 8009786:	444e      	add	r6, r9
 8009788:	eba5 0509 	sub.w	r5, r5, r9
 800978c:	6026      	str	r6, [r4, #0]
 800978e:	60a5      	str	r5, [r4, #8]
 8009790:	463e      	mov	r6, r7
 8009792:	42be      	cmp	r6, r7
 8009794:	d900      	bls.n	8009798 <__ssputs_r+0x70>
 8009796:	463e      	mov	r6, r7
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	4632      	mov	r2, r6
 800979c:	4641      	mov	r1, r8
 800979e:	f000 fb6b 	bl	8009e78 <memmove>
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	1b9b      	subs	r3, r3, r6
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	4433      	add	r3, r6
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	2000      	movs	r0, #0
 80097b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b4:	462a      	mov	r2, r5
 80097b6:	f000 fb9e 	bl	8009ef6 <_realloc_r>
 80097ba:	4606      	mov	r6, r0
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e0      	bne.n	8009782 <__ssputs_r+0x5a>
 80097c0:	6921      	ldr	r1, [r4, #16]
 80097c2:	4650      	mov	r0, sl
 80097c4:	f7ff feb0 	bl	8009528 <_free_r>
 80097c8:	230c      	movs	r3, #12
 80097ca:	f8ca 3000 	str.w	r3, [sl]
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	f04f 30ff 	mov.w	r0, #4294967295
 80097da:	e7e9      	b.n	80097b0 <__ssputs_r+0x88>

080097dc <_svfiprintf_r>:
 80097dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	4698      	mov	r8, r3
 80097e2:	898b      	ldrh	r3, [r1, #12]
 80097e4:	061b      	lsls	r3, r3, #24
 80097e6:	b09d      	sub	sp, #116	; 0x74
 80097e8:	4607      	mov	r7, r0
 80097ea:	460d      	mov	r5, r1
 80097ec:	4614      	mov	r4, r2
 80097ee:	d50e      	bpl.n	800980e <_svfiprintf_r+0x32>
 80097f0:	690b      	ldr	r3, [r1, #16]
 80097f2:	b963      	cbnz	r3, 800980e <_svfiprintf_r+0x32>
 80097f4:	2140      	movs	r1, #64	; 0x40
 80097f6:	f7ff ff0b 	bl	8009610 <_malloc_r>
 80097fa:	6028      	str	r0, [r5, #0]
 80097fc:	6128      	str	r0, [r5, #16]
 80097fe:	b920      	cbnz	r0, 800980a <_svfiprintf_r+0x2e>
 8009800:	230c      	movs	r3, #12
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	e0d0      	b.n	80099ac <_svfiprintf_r+0x1d0>
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	616b      	str	r3, [r5, #20]
 800980e:	2300      	movs	r3, #0
 8009810:	9309      	str	r3, [sp, #36]	; 0x24
 8009812:	2320      	movs	r3, #32
 8009814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009818:	f8cd 800c 	str.w	r8, [sp, #12]
 800981c:	2330      	movs	r3, #48	; 0x30
 800981e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099c4 <_svfiprintf_r+0x1e8>
 8009822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009826:	f04f 0901 	mov.w	r9, #1
 800982a:	4623      	mov	r3, r4
 800982c:	469a      	mov	sl, r3
 800982e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009832:	b10a      	cbz	r2, 8009838 <_svfiprintf_r+0x5c>
 8009834:	2a25      	cmp	r2, #37	; 0x25
 8009836:	d1f9      	bne.n	800982c <_svfiprintf_r+0x50>
 8009838:	ebba 0b04 	subs.w	fp, sl, r4
 800983c:	d00b      	beq.n	8009856 <_svfiprintf_r+0x7a>
 800983e:	465b      	mov	r3, fp
 8009840:	4622      	mov	r2, r4
 8009842:	4629      	mov	r1, r5
 8009844:	4638      	mov	r0, r7
 8009846:	f7ff ff6f 	bl	8009728 <__ssputs_r>
 800984a:	3001      	adds	r0, #1
 800984c:	f000 80a9 	beq.w	80099a2 <_svfiprintf_r+0x1c6>
 8009850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009852:	445a      	add	r2, fp
 8009854:	9209      	str	r2, [sp, #36]	; 0x24
 8009856:	f89a 3000 	ldrb.w	r3, [sl]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 80a1 	beq.w	80099a2 <_svfiprintf_r+0x1c6>
 8009860:	2300      	movs	r3, #0
 8009862:	f04f 32ff 	mov.w	r2, #4294967295
 8009866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986a:	f10a 0a01 	add.w	sl, sl, #1
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	9307      	str	r3, [sp, #28]
 8009872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009876:	931a      	str	r3, [sp, #104]	; 0x68
 8009878:	4654      	mov	r4, sl
 800987a:	2205      	movs	r2, #5
 800987c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009880:	4850      	ldr	r0, [pc, #320]	; (80099c4 <_svfiprintf_r+0x1e8>)
 8009882:	f7f6 fce5 	bl	8000250 <memchr>
 8009886:	9a04      	ldr	r2, [sp, #16]
 8009888:	b9d8      	cbnz	r0, 80098c2 <_svfiprintf_r+0xe6>
 800988a:	06d0      	lsls	r0, r2, #27
 800988c:	bf44      	itt	mi
 800988e:	2320      	movmi	r3, #32
 8009890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009894:	0711      	lsls	r1, r2, #28
 8009896:	bf44      	itt	mi
 8009898:	232b      	movmi	r3, #43	; 0x2b
 800989a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989e:	f89a 3000 	ldrb.w	r3, [sl]
 80098a2:	2b2a      	cmp	r3, #42	; 0x2a
 80098a4:	d015      	beq.n	80098d2 <_svfiprintf_r+0xf6>
 80098a6:	9a07      	ldr	r2, [sp, #28]
 80098a8:	4654      	mov	r4, sl
 80098aa:	2000      	movs	r0, #0
 80098ac:	f04f 0c0a 	mov.w	ip, #10
 80098b0:	4621      	mov	r1, r4
 80098b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b6:	3b30      	subs	r3, #48	; 0x30
 80098b8:	2b09      	cmp	r3, #9
 80098ba:	d94d      	bls.n	8009958 <_svfiprintf_r+0x17c>
 80098bc:	b1b0      	cbz	r0, 80098ec <_svfiprintf_r+0x110>
 80098be:	9207      	str	r2, [sp, #28]
 80098c0:	e014      	b.n	80098ec <_svfiprintf_r+0x110>
 80098c2:	eba0 0308 	sub.w	r3, r0, r8
 80098c6:	fa09 f303 	lsl.w	r3, r9, r3
 80098ca:	4313      	orrs	r3, r2
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	46a2      	mov	sl, r4
 80098d0:	e7d2      	b.n	8009878 <_svfiprintf_r+0x9c>
 80098d2:	9b03      	ldr	r3, [sp, #12]
 80098d4:	1d19      	adds	r1, r3, #4
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	9103      	str	r1, [sp, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bfbb      	ittet	lt
 80098de:	425b      	neglt	r3, r3
 80098e0:	f042 0202 	orrlt.w	r2, r2, #2
 80098e4:	9307      	strge	r3, [sp, #28]
 80098e6:	9307      	strlt	r3, [sp, #28]
 80098e8:	bfb8      	it	lt
 80098ea:	9204      	strlt	r2, [sp, #16]
 80098ec:	7823      	ldrb	r3, [r4, #0]
 80098ee:	2b2e      	cmp	r3, #46	; 0x2e
 80098f0:	d10c      	bne.n	800990c <_svfiprintf_r+0x130>
 80098f2:	7863      	ldrb	r3, [r4, #1]
 80098f4:	2b2a      	cmp	r3, #42	; 0x2a
 80098f6:	d134      	bne.n	8009962 <_svfiprintf_r+0x186>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	1d1a      	adds	r2, r3, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	9203      	str	r2, [sp, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	bfb8      	it	lt
 8009904:	f04f 33ff 	movlt.w	r3, #4294967295
 8009908:	3402      	adds	r4, #2
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099d4 <_svfiprintf_r+0x1f8>
 8009910:	7821      	ldrb	r1, [r4, #0]
 8009912:	2203      	movs	r2, #3
 8009914:	4650      	mov	r0, sl
 8009916:	f7f6 fc9b 	bl	8000250 <memchr>
 800991a:	b138      	cbz	r0, 800992c <_svfiprintf_r+0x150>
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	eba0 000a 	sub.w	r0, r0, sl
 8009922:	2240      	movs	r2, #64	; 0x40
 8009924:	4082      	lsls	r2, r0
 8009926:	4313      	orrs	r3, r2
 8009928:	3401      	adds	r4, #1
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	4825      	ldr	r0, [pc, #148]	; (80099c8 <_svfiprintf_r+0x1ec>)
 8009932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009936:	2206      	movs	r2, #6
 8009938:	f7f6 fc8a 	bl	8000250 <memchr>
 800993c:	2800      	cmp	r0, #0
 800993e:	d038      	beq.n	80099b2 <_svfiprintf_r+0x1d6>
 8009940:	4b22      	ldr	r3, [pc, #136]	; (80099cc <_svfiprintf_r+0x1f0>)
 8009942:	bb1b      	cbnz	r3, 800998c <_svfiprintf_r+0x1b0>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	3308      	adds	r3, #8
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009952:	4433      	add	r3, r6
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	e768      	b.n	800982a <_svfiprintf_r+0x4e>
 8009958:	fb0c 3202 	mla	r2, ip, r2, r3
 800995c:	460c      	mov	r4, r1
 800995e:	2001      	movs	r0, #1
 8009960:	e7a6      	b.n	80098b0 <_svfiprintf_r+0xd4>
 8009962:	2300      	movs	r3, #0
 8009964:	3401      	adds	r4, #1
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	4619      	mov	r1, r3
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4620      	mov	r0, r4
 8009970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009974:	3a30      	subs	r2, #48	; 0x30
 8009976:	2a09      	cmp	r2, #9
 8009978:	d903      	bls.n	8009982 <_svfiprintf_r+0x1a6>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c6      	beq.n	800990c <_svfiprintf_r+0x130>
 800997e:	9105      	str	r1, [sp, #20]
 8009980:	e7c4      	b.n	800990c <_svfiprintf_r+0x130>
 8009982:	fb0c 2101 	mla	r1, ip, r1, r2
 8009986:	4604      	mov	r4, r0
 8009988:	2301      	movs	r3, #1
 800998a:	e7f0      	b.n	800996e <_svfiprintf_r+0x192>
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	462a      	mov	r2, r5
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <_svfiprintf_r+0x1f4>)
 8009994:	a904      	add	r1, sp, #16
 8009996:	4638      	mov	r0, r7
 8009998:	f3af 8000 	nop.w
 800999c:	1c42      	adds	r2, r0, #1
 800999e:	4606      	mov	r6, r0
 80099a0:	d1d6      	bne.n	8009950 <_svfiprintf_r+0x174>
 80099a2:	89ab      	ldrh	r3, [r5, #12]
 80099a4:	065b      	lsls	r3, r3, #25
 80099a6:	f53f af2d 	bmi.w	8009804 <_svfiprintf_r+0x28>
 80099aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ac:	b01d      	add	sp, #116	; 0x74
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	462a      	mov	r2, r5
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <_svfiprintf_r+0x1f4>)
 80099ba:	a904      	add	r1, sp, #16
 80099bc:	4638      	mov	r0, r7
 80099be:	f000 f879 	bl	8009ab4 <_printf_i>
 80099c2:	e7eb      	b.n	800999c <_svfiprintf_r+0x1c0>
 80099c4:	0800a74a 	.word	0x0800a74a
 80099c8:	0800a754 	.word	0x0800a754
 80099cc:	00000000 	.word	0x00000000
 80099d0:	08009729 	.word	0x08009729
 80099d4:	0800a750 	.word	0x0800a750

080099d8 <_printf_common>:
 80099d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099dc:	4616      	mov	r6, r2
 80099de:	4699      	mov	r9, r3
 80099e0:	688a      	ldr	r2, [r1, #8]
 80099e2:	690b      	ldr	r3, [r1, #16]
 80099e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099e8:	4293      	cmp	r3, r2
 80099ea:	bfb8      	it	lt
 80099ec:	4613      	movlt	r3, r2
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099f4:	4607      	mov	r7, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	b10a      	cbz	r2, 80099fe <_printf_common+0x26>
 80099fa:	3301      	adds	r3, #1
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	0699      	lsls	r1, r3, #26
 8009a02:	bf42      	ittt	mi
 8009a04:	6833      	ldrmi	r3, [r6, #0]
 8009a06:	3302      	addmi	r3, #2
 8009a08:	6033      	strmi	r3, [r6, #0]
 8009a0a:	6825      	ldr	r5, [r4, #0]
 8009a0c:	f015 0506 	ands.w	r5, r5, #6
 8009a10:	d106      	bne.n	8009a20 <_printf_common+0x48>
 8009a12:	f104 0a19 	add.w	sl, r4, #25
 8009a16:	68e3      	ldr	r3, [r4, #12]
 8009a18:	6832      	ldr	r2, [r6, #0]
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	dc26      	bgt.n	8009a6e <_printf_common+0x96>
 8009a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a24:	1e13      	subs	r3, r2, #0
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	bf18      	it	ne
 8009a2a:	2301      	movne	r3, #1
 8009a2c:	0692      	lsls	r2, r2, #26
 8009a2e:	d42b      	bmi.n	8009a88 <_printf_common+0xb0>
 8009a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a34:	4649      	mov	r1, r9
 8009a36:	4638      	mov	r0, r7
 8009a38:	47c0      	blx	r8
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d01e      	beq.n	8009a7c <_printf_common+0xa4>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	6922      	ldr	r2, [r4, #16]
 8009a42:	f003 0306 	and.w	r3, r3, #6
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	bf02      	ittt	eq
 8009a4a:	68e5      	ldreq	r5, [r4, #12]
 8009a4c:	6833      	ldreq	r3, [r6, #0]
 8009a4e:	1aed      	subeq	r5, r5, r3
 8009a50:	68a3      	ldr	r3, [r4, #8]
 8009a52:	bf0c      	ite	eq
 8009a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a58:	2500      	movne	r5, #0
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	bfc4      	itt	gt
 8009a5e:	1a9b      	subgt	r3, r3, r2
 8009a60:	18ed      	addgt	r5, r5, r3
 8009a62:	2600      	movs	r6, #0
 8009a64:	341a      	adds	r4, #26
 8009a66:	42b5      	cmp	r5, r6
 8009a68:	d11a      	bne.n	8009aa0 <_printf_common+0xc8>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	e008      	b.n	8009a80 <_printf_common+0xa8>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4652      	mov	r2, sl
 8009a72:	4649      	mov	r1, r9
 8009a74:	4638      	mov	r0, r7
 8009a76:	47c0      	blx	r8
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d103      	bne.n	8009a84 <_printf_common+0xac>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a84:	3501      	adds	r5, #1
 8009a86:	e7c6      	b.n	8009a16 <_printf_common+0x3e>
 8009a88:	18e1      	adds	r1, r4, r3
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	2030      	movs	r0, #48	; 0x30
 8009a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a92:	4422      	add	r2, r4
 8009a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	e7c7      	b.n	8009a30 <_printf_common+0x58>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	47c0      	blx	r8
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d0e6      	beq.n	8009a7c <_printf_common+0xa4>
 8009aae:	3601      	adds	r6, #1
 8009ab0:	e7d9      	b.n	8009a66 <_printf_common+0x8e>
	...

08009ab4 <_printf_i>:
 8009ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab8:	7e0f      	ldrb	r7, [r1, #24]
 8009aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009abc:	2f78      	cmp	r7, #120	; 0x78
 8009abe:	4691      	mov	r9, r2
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aca:	d807      	bhi.n	8009adc <_printf_i+0x28>
 8009acc:	2f62      	cmp	r7, #98	; 0x62
 8009ace:	d80a      	bhi.n	8009ae6 <_printf_i+0x32>
 8009ad0:	2f00      	cmp	r7, #0
 8009ad2:	f000 80d4 	beq.w	8009c7e <_printf_i+0x1ca>
 8009ad6:	2f58      	cmp	r7, #88	; 0x58
 8009ad8:	f000 80c0 	beq.w	8009c5c <_printf_i+0x1a8>
 8009adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ae4:	e03a      	b.n	8009b5c <_printf_i+0xa8>
 8009ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aea:	2b15      	cmp	r3, #21
 8009aec:	d8f6      	bhi.n	8009adc <_printf_i+0x28>
 8009aee:	a101      	add	r1, pc, #4	; (adr r1, 8009af4 <_printf_i+0x40>)
 8009af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009af4:	08009b4d 	.word	0x08009b4d
 8009af8:	08009b61 	.word	0x08009b61
 8009afc:	08009add 	.word	0x08009add
 8009b00:	08009add 	.word	0x08009add
 8009b04:	08009add 	.word	0x08009add
 8009b08:	08009add 	.word	0x08009add
 8009b0c:	08009b61 	.word	0x08009b61
 8009b10:	08009add 	.word	0x08009add
 8009b14:	08009add 	.word	0x08009add
 8009b18:	08009add 	.word	0x08009add
 8009b1c:	08009add 	.word	0x08009add
 8009b20:	08009c65 	.word	0x08009c65
 8009b24:	08009b8d 	.word	0x08009b8d
 8009b28:	08009c1f 	.word	0x08009c1f
 8009b2c:	08009add 	.word	0x08009add
 8009b30:	08009add 	.word	0x08009add
 8009b34:	08009c87 	.word	0x08009c87
 8009b38:	08009add 	.word	0x08009add
 8009b3c:	08009b8d 	.word	0x08009b8d
 8009b40:	08009add 	.word	0x08009add
 8009b44:	08009add 	.word	0x08009add
 8009b48:	08009c27 	.word	0x08009c27
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	1d1a      	adds	r2, r3, #4
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	602a      	str	r2, [r5, #0]
 8009b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e09f      	b.n	8009ca0 <_printf_i+0x1ec>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	0607      	lsls	r7, r0, #24
 8009b66:	f103 0104 	add.w	r1, r3, #4
 8009b6a:	6029      	str	r1, [r5, #0]
 8009b6c:	d501      	bpl.n	8009b72 <_printf_i+0xbe>
 8009b6e:	681e      	ldr	r6, [r3, #0]
 8009b70:	e003      	b.n	8009b7a <_printf_i+0xc6>
 8009b72:	0646      	lsls	r6, r0, #25
 8009b74:	d5fb      	bpl.n	8009b6e <_printf_i+0xba>
 8009b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b7a:	2e00      	cmp	r6, #0
 8009b7c:	da03      	bge.n	8009b86 <_printf_i+0xd2>
 8009b7e:	232d      	movs	r3, #45	; 0x2d
 8009b80:	4276      	negs	r6, r6
 8009b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b86:	485a      	ldr	r0, [pc, #360]	; (8009cf0 <_printf_i+0x23c>)
 8009b88:	230a      	movs	r3, #10
 8009b8a:	e012      	b.n	8009bb2 <_printf_i+0xfe>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1d19      	adds	r1, r3, #4
 8009b92:	6029      	str	r1, [r5, #0]
 8009b94:	0605      	lsls	r5, r0, #24
 8009b96:	d501      	bpl.n	8009b9c <_printf_i+0xe8>
 8009b98:	681e      	ldr	r6, [r3, #0]
 8009b9a:	e002      	b.n	8009ba2 <_printf_i+0xee>
 8009b9c:	0641      	lsls	r1, r0, #25
 8009b9e:	d5fb      	bpl.n	8009b98 <_printf_i+0xe4>
 8009ba0:	881e      	ldrh	r6, [r3, #0]
 8009ba2:	4853      	ldr	r0, [pc, #332]	; (8009cf0 <_printf_i+0x23c>)
 8009ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2308      	moveq	r3, #8
 8009baa:	230a      	movne	r3, #10
 8009bac:	2100      	movs	r1, #0
 8009bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bb2:	6865      	ldr	r5, [r4, #4]
 8009bb4:	60a5      	str	r5, [r4, #8]
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	bfa2      	ittt	ge
 8009bba:	6821      	ldrge	r1, [r4, #0]
 8009bbc:	f021 0104 	bicge.w	r1, r1, #4
 8009bc0:	6021      	strge	r1, [r4, #0]
 8009bc2:	b90e      	cbnz	r6, 8009bc8 <_printf_i+0x114>
 8009bc4:	2d00      	cmp	r5, #0
 8009bc6:	d04b      	beq.n	8009c60 <_printf_i+0x1ac>
 8009bc8:	4615      	mov	r5, r2
 8009bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bce:	fb03 6711 	mls	r7, r3, r1, r6
 8009bd2:	5dc7      	ldrb	r7, [r0, r7]
 8009bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd8:	4637      	mov	r7, r6
 8009bda:	42bb      	cmp	r3, r7
 8009bdc:	460e      	mov	r6, r1
 8009bde:	d9f4      	bls.n	8009bca <_printf_i+0x116>
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d10b      	bne.n	8009bfc <_printf_i+0x148>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	07de      	lsls	r6, r3, #31
 8009be8:	d508      	bpl.n	8009bfc <_printf_i+0x148>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	bfde      	ittt	le
 8009bf2:	2330      	movle	r3, #48	; 0x30
 8009bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bfc:	1b52      	subs	r2, r2, r5
 8009bfe:	6122      	str	r2, [r4, #16]
 8009c00:	f8cd a000 	str.w	sl, [sp]
 8009c04:	464b      	mov	r3, r9
 8009c06:	aa03      	add	r2, sp, #12
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7ff fee4 	bl	80099d8 <_printf_common>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d14a      	bne.n	8009caa <_printf_i+0x1f6>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b004      	add	sp, #16
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	f043 0320 	orr.w	r3, r3, #32
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	4833      	ldr	r0, [pc, #204]	; (8009cf4 <_printf_i+0x240>)
 8009c28:	2778      	movs	r7, #120	; 0x78
 8009c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	6829      	ldr	r1, [r5, #0]
 8009c32:	061f      	lsls	r7, r3, #24
 8009c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c38:	d402      	bmi.n	8009c40 <_printf_i+0x18c>
 8009c3a:	065f      	lsls	r7, r3, #25
 8009c3c:	bf48      	it	mi
 8009c3e:	b2b6      	uxthmi	r6, r6
 8009c40:	07df      	lsls	r7, r3, #31
 8009c42:	bf48      	it	mi
 8009c44:	f043 0320 	orrmi.w	r3, r3, #32
 8009c48:	6029      	str	r1, [r5, #0]
 8009c4a:	bf48      	it	mi
 8009c4c:	6023      	strmi	r3, [r4, #0]
 8009c4e:	b91e      	cbnz	r6, 8009c58 <_printf_i+0x1a4>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	f023 0320 	bic.w	r3, r3, #32
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	2310      	movs	r3, #16
 8009c5a:	e7a7      	b.n	8009bac <_printf_i+0xf8>
 8009c5c:	4824      	ldr	r0, [pc, #144]	; (8009cf0 <_printf_i+0x23c>)
 8009c5e:	e7e4      	b.n	8009c2a <_printf_i+0x176>
 8009c60:	4615      	mov	r5, r2
 8009c62:	e7bd      	b.n	8009be0 <_printf_i+0x12c>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	6826      	ldr	r6, [r4, #0]
 8009c68:	6961      	ldr	r1, [r4, #20]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6028      	str	r0, [r5, #0]
 8009c6e:	0635      	lsls	r5, r6, #24
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0x1c4>
 8009c74:	6019      	str	r1, [r3, #0]
 8009c76:	e002      	b.n	8009c7e <_printf_i+0x1ca>
 8009c78:	0670      	lsls	r0, r6, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0x1c0>
 8009c7c:	8019      	strh	r1, [r3, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	4615      	mov	r5, r2
 8009c84:	e7bc      	b.n	8009c00 <_printf_i+0x14c>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	1d1a      	adds	r2, r3, #4
 8009c8a:	602a      	str	r2, [r5, #0]
 8009c8c:	681d      	ldr	r5, [r3, #0]
 8009c8e:	6862      	ldr	r2, [r4, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	4628      	mov	r0, r5
 8009c94:	f7f6 fadc 	bl	8000250 <memchr>
 8009c98:	b108      	cbz	r0, 8009c9e <_printf_i+0x1ea>
 8009c9a:	1b40      	subs	r0, r0, r5
 8009c9c:	6060      	str	r0, [r4, #4]
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca8:	e7aa      	b.n	8009c00 <_printf_i+0x14c>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	462a      	mov	r2, r5
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	47d0      	blx	sl
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0ad      	beq.n	8009c14 <_printf_i+0x160>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	079b      	lsls	r3, r3, #30
 8009cbc:	d413      	bmi.n	8009ce6 <_printf_i+0x232>
 8009cbe:	68e0      	ldr	r0, [r4, #12]
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	bfb8      	it	lt
 8009cc6:	4618      	movlt	r0, r3
 8009cc8:	e7a6      	b.n	8009c18 <_printf_i+0x164>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4632      	mov	r2, r6
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	47d0      	blx	sl
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d09d      	beq.n	8009c14 <_printf_i+0x160>
 8009cd8:	3501      	adds	r5, #1
 8009cda:	68e3      	ldr	r3, [r4, #12]
 8009cdc:	9903      	ldr	r1, [sp, #12]
 8009cde:	1a5b      	subs	r3, r3, r1
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dcf2      	bgt.n	8009cca <_printf_i+0x216>
 8009ce4:	e7eb      	b.n	8009cbe <_printf_i+0x20a>
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	f104 0619 	add.w	r6, r4, #25
 8009cec:	e7f5      	b.n	8009cda <_printf_i+0x226>
 8009cee:	bf00      	nop
 8009cf0:	0800a75b 	.word	0x0800a75b
 8009cf4:	0800a76c 	.word	0x0800a76c

08009cf8 <__sflush_r>:
 8009cf8:	898a      	ldrh	r2, [r1, #12]
 8009cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfe:	4605      	mov	r5, r0
 8009d00:	0710      	lsls	r0, r2, #28
 8009d02:	460c      	mov	r4, r1
 8009d04:	d458      	bmi.n	8009db8 <__sflush_r+0xc0>
 8009d06:	684b      	ldr	r3, [r1, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc05      	bgt.n	8009d18 <__sflush_r+0x20>
 8009d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dc02      	bgt.n	8009d18 <__sflush_r+0x20>
 8009d12:	2000      	movs	r0, #0
 8009d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d1a:	2e00      	cmp	r6, #0
 8009d1c:	d0f9      	beq.n	8009d12 <__sflush_r+0x1a>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d24:	682f      	ldr	r7, [r5, #0]
 8009d26:	6a21      	ldr	r1, [r4, #32]
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	d032      	beq.n	8009d92 <__sflush_r+0x9a>
 8009d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	075a      	lsls	r2, r3, #29
 8009d32:	d505      	bpl.n	8009d40 <__sflush_r+0x48>
 8009d34:	6863      	ldr	r3, [r4, #4]
 8009d36:	1ac0      	subs	r0, r0, r3
 8009d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d3a:	b10b      	cbz	r3, 8009d40 <__sflush_r+0x48>
 8009d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d3e:	1ac0      	subs	r0, r0, r3
 8009d40:	2300      	movs	r3, #0
 8009d42:	4602      	mov	r2, r0
 8009d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d46:	6a21      	ldr	r1, [r4, #32]
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b0      	blx	r6
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	d106      	bne.n	8009d60 <__sflush_r+0x68>
 8009d52:	6829      	ldr	r1, [r5, #0]
 8009d54:	291d      	cmp	r1, #29
 8009d56:	d82b      	bhi.n	8009db0 <__sflush_r+0xb8>
 8009d58:	4a29      	ldr	r2, [pc, #164]	; (8009e00 <__sflush_r+0x108>)
 8009d5a:	410a      	asrs	r2, r1
 8009d5c:	07d6      	lsls	r6, r2, #31
 8009d5e:	d427      	bmi.n	8009db0 <__sflush_r+0xb8>
 8009d60:	2200      	movs	r2, #0
 8009d62:	6062      	str	r2, [r4, #4]
 8009d64:	04d9      	lsls	r1, r3, #19
 8009d66:	6922      	ldr	r2, [r4, #16]
 8009d68:	6022      	str	r2, [r4, #0]
 8009d6a:	d504      	bpl.n	8009d76 <__sflush_r+0x7e>
 8009d6c:	1c42      	adds	r2, r0, #1
 8009d6e:	d101      	bne.n	8009d74 <__sflush_r+0x7c>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b903      	cbnz	r3, 8009d76 <__sflush_r+0x7e>
 8009d74:	6560      	str	r0, [r4, #84]	; 0x54
 8009d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d78:	602f      	str	r7, [r5, #0]
 8009d7a:	2900      	cmp	r1, #0
 8009d7c:	d0c9      	beq.n	8009d12 <__sflush_r+0x1a>
 8009d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d82:	4299      	cmp	r1, r3
 8009d84:	d002      	beq.n	8009d8c <__sflush_r+0x94>
 8009d86:	4628      	mov	r0, r5
 8009d88:	f7ff fbce 	bl	8009528 <_free_r>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8009d90:	e7c0      	b.n	8009d14 <__sflush_r+0x1c>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4628      	mov	r0, r5
 8009d96:	47b0      	blx	r6
 8009d98:	1c41      	adds	r1, r0, #1
 8009d9a:	d1c8      	bne.n	8009d2e <__sflush_r+0x36>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0c5      	beq.n	8009d2e <__sflush_r+0x36>
 8009da2:	2b1d      	cmp	r3, #29
 8009da4:	d001      	beq.n	8009daa <__sflush_r+0xb2>
 8009da6:	2b16      	cmp	r3, #22
 8009da8:	d101      	bne.n	8009dae <__sflush_r+0xb6>
 8009daa:	602f      	str	r7, [r5, #0]
 8009dac:	e7b1      	b.n	8009d12 <__sflush_r+0x1a>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	e7ad      	b.n	8009d14 <__sflush_r+0x1c>
 8009db8:	690f      	ldr	r7, [r1, #16]
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	d0a9      	beq.n	8009d12 <__sflush_r+0x1a>
 8009dbe:	0793      	lsls	r3, r2, #30
 8009dc0:	680e      	ldr	r6, [r1, #0]
 8009dc2:	bf08      	it	eq
 8009dc4:	694b      	ldreq	r3, [r1, #20]
 8009dc6:	600f      	str	r7, [r1, #0]
 8009dc8:	bf18      	it	ne
 8009dca:	2300      	movne	r3, #0
 8009dcc:	eba6 0807 	sub.w	r8, r6, r7
 8009dd0:	608b      	str	r3, [r1, #8]
 8009dd2:	f1b8 0f00 	cmp.w	r8, #0
 8009dd6:	dd9c      	ble.n	8009d12 <__sflush_r+0x1a>
 8009dd8:	6a21      	ldr	r1, [r4, #32]
 8009dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ddc:	4643      	mov	r3, r8
 8009dde:	463a      	mov	r2, r7
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b0      	blx	r6
 8009de4:	2800      	cmp	r0, #0
 8009de6:	dc06      	bgt.n	8009df6 <__sflush_r+0xfe>
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	e78e      	b.n	8009d14 <__sflush_r+0x1c>
 8009df6:	4407      	add	r7, r0
 8009df8:	eba8 0800 	sub.w	r8, r8, r0
 8009dfc:	e7e9      	b.n	8009dd2 <__sflush_r+0xda>
 8009dfe:	bf00      	nop
 8009e00:	dfbffffe 	.word	0xdfbffffe

08009e04 <_fflush_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	690b      	ldr	r3, [r1, #16]
 8009e08:	4605      	mov	r5, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	b913      	cbnz	r3, 8009e14 <_fflush_r+0x10>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	4628      	mov	r0, r5
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	b118      	cbz	r0, 8009e1e <_fflush_r+0x1a>
 8009e16:	6a03      	ldr	r3, [r0, #32]
 8009e18:	b90b      	cbnz	r3, 8009e1e <_fflush_r+0x1a>
 8009e1a:	f7ff f9e1 	bl	80091e0 <__sinit>
 8009e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0f3      	beq.n	8009e0e <_fflush_r+0xa>
 8009e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e28:	07d0      	lsls	r0, r2, #31
 8009e2a:	d404      	bmi.n	8009e36 <_fflush_r+0x32>
 8009e2c:	0599      	lsls	r1, r3, #22
 8009e2e:	d402      	bmi.n	8009e36 <_fflush_r+0x32>
 8009e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e32:	f7ff fb58 	bl	80094e6 <__retarget_lock_acquire_recursive>
 8009e36:	4628      	mov	r0, r5
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f7ff ff5d 	bl	8009cf8 <__sflush_r>
 8009e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e40:	07da      	lsls	r2, r3, #31
 8009e42:	4605      	mov	r5, r0
 8009e44:	d4e4      	bmi.n	8009e10 <_fflush_r+0xc>
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	059b      	lsls	r3, r3, #22
 8009e4a:	d4e1      	bmi.n	8009e10 <_fflush_r+0xc>
 8009e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e4e:	f7ff fb4b 	bl	80094e8 <__retarget_lock_release_recursive>
 8009e52:	e7dd      	b.n	8009e10 <_fflush_r+0xc>

08009e54 <fiprintf>:
 8009e54:	b40e      	push	{r1, r2, r3}
 8009e56:	b503      	push	{r0, r1, lr}
 8009e58:	4601      	mov	r1, r0
 8009e5a:	ab03      	add	r3, sp, #12
 8009e5c:	4805      	ldr	r0, [pc, #20]	; (8009e74 <fiprintf+0x20>)
 8009e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e62:	6800      	ldr	r0, [r0, #0]
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	f000 f89f 	bl	8009fa8 <_vfiprintf_r>
 8009e6a:	b002      	add	sp, #8
 8009e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e70:	b003      	add	sp, #12
 8009e72:	4770      	bx	lr
 8009e74:	20000120 	.word	0x20000120

08009e78 <memmove>:
 8009e78:	4288      	cmp	r0, r1
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	eb01 0402 	add.w	r4, r1, r2
 8009e80:	d902      	bls.n	8009e88 <memmove+0x10>
 8009e82:	4284      	cmp	r4, r0
 8009e84:	4623      	mov	r3, r4
 8009e86:	d807      	bhi.n	8009e98 <memmove+0x20>
 8009e88:	1e43      	subs	r3, r0, #1
 8009e8a:	42a1      	cmp	r1, r4
 8009e8c:	d008      	beq.n	8009ea0 <memmove+0x28>
 8009e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e96:	e7f8      	b.n	8009e8a <memmove+0x12>
 8009e98:	4402      	add	r2, r0
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	428a      	cmp	r2, r1
 8009e9e:	d100      	bne.n	8009ea2 <memmove+0x2a>
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eaa:	e7f7      	b.n	8009e9c <memmove+0x24>

08009eac <_sbrk_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_sbrk_r+0x1c>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	f7f7 f87c 	bl	8000fb4 <_sbrk>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_sbrk_r+0x1a>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_sbrk_r+0x1a>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	2000068c 	.word	0x2000068c

08009ecc <memcpy>:
 8009ecc:	440a      	add	r2, r1
 8009ece:	4291      	cmp	r1, r2
 8009ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ed4:	d100      	bne.n	8009ed8 <memcpy+0xc>
 8009ed6:	4770      	bx	lr
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	d1f9      	bne.n	8009eda <memcpy+0xe>
 8009ee6:	bd10      	pop	{r4, pc}

08009ee8 <abort>:
 8009ee8:	b508      	push	{r3, lr}
 8009eea:	2006      	movs	r0, #6
 8009eec:	f000 fa34 	bl	800a358 <raise>
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f7f6 ffe7 	bl	8000ec4 <_exit>

08009ef6 <_realloc_r>:
 8009ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efa:	4680      	mov	r8, r0
 8009efc:	4614      	mov	r4, r2
 8009efe:	460e      	mov	r6, r1
 8009f00:	b921      	cbnz	r1, 8009f0c <_realloc_r+0x16>
 8009f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f06:	4611      	mov	r1, r2
 8009f08:	f7ff bb82 	b.w	8009610 <_malloc_r>
 8009f0c:	b92a      	cbnz	r2, 8009f1a <_realloc_r+0x24>
 8009f0e:	f7ff fb0b 	bl	8009528 <_free_r>
 8009f12:	4625      	mov	r5, r4
 8009f14:	4628      	mov	r0, r5
 8009f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1a:	f000 fa39 	bl	800a390 <_malloc_usable_size_r>
 8009f1e:	4284      	cmp	r4, r0
 8009f20:	4607      	mov	r7, r0
 8009f22:	d802      	bhi.n	8009f2a <_realloc_r+0x34>
 8009f24:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f28:	d812      	bhi.n	8009f50 <_realloc_r+0x5a>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	f7ff fb6f 	bl	8009610 <_malloc_r>
 8009f32:	4605      	mov	r5, r0
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0ed      	beq.n	8009f14 <_realloc_r+0x1e>
 8009f38:	42bc      	cmp	r4, r7
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	bf28      	it	cs
 8009f40:	463a      	movcs	r2, r7
 8009f42:	f7ff ffc3 	bl	8009ecc <memcpy>
 8009f46:	4631      	mov	r1, r6
 8009f48:	4640      	mov	r0, r8
 8009f4a:	f7ff faed 	bl	8009528 <_free_r>
 8009f4e:	e7e1      	b.n	8009f14 <_realloc_r+0x1e>
 8009f50:	4635      	mov	r5, r6
 8009f52:	e7df      	b.n	8009f14 <_realloc_r+0x1e>

08009f54 <__sfputc_r>:
 8009f54:	6893      	ldr	r3, [r2, #8]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	b410      	push	{r4}
 8009f5c:	6093      	str	r3, [r2, #8]
 8009f5e:	da08      	bge.n	8009f72 <__sfputc_r+0x1e>
 8009f60:	6994      	ldr	r4, [r2, #24]
 8009f62:	42a3      	cmp	r3, r4
 8009f64:	db01      	blt.n	8009f6a <__sfputc_r+0x16>
 8009f66:	290a      	cmp	r1, #10
 8009f68:	d103      	bne.n	8009f72 <__sfputc_r+0x1e>
 8009f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f6e:	f000 b935 	b.w	800a1dc <__swbuf_r>
 8009f72:	6813      	ldr	r3, [r2, #0]
 8009f74:	1c58      	adds	r0, r3, #1
 8009f76:	6010      	str	r0, [r2, #0]
 8009f78:	7019      	strb	r1, [r3, #0]
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <__sfputs_r>:
 8009f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	4614      	mov	r4, r2
 8009f8a:	18d5      	adds	r5, r2, r3
 8009f8c:	42ac      	cmp	r4, r5
 8009f8e:	d101      	bne.n	8009f94 <__sfputs_r+0x12>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e007      	b.n	8009fa4 <__sfputs_r+0x22>
 8009f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f98:	463a      	mov	r2, r7
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff ffda 	bl	8009f54 <__sfputc_r>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d1f3      	bne.n	8009f8c <__sfputs_r+0xa>
 8009fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fa8 <_vfiprintf_r>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	460d      	mov	r5, r1
 8009fae:	b09d      	sub	sp, #116	; 0x74
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	4698      	mov	r8, r3
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	b118      	cbz	r0, 8009fc0 <_vfiprintf_r+0x18>
 8009fb8:	6a03      	ldr	r3, [r0, #32]
 8009fba:	b90b      	cbnz	r3, 8009fc0 <_vfiprintf_r+0x18>
 8009fbc:	f7ff f910 	bl	80091e0 <__sinit>
 8009fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_vfiprintf_r+0x2a>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	059a      	lsls	r2, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_vfiprintf_r+0x2a>
 8009fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fce:	f7ff fa8a 	bl	80094e6 <__retarget_lock_acquire_recursive>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	071b      	lsls	r3, r3, #28
 8009fd6:	d501      	bpl.n	8009fdc <_vfiprintf_r+0x34>
 8009fd8:	692b      	ldr	r3, [r5, #16]
 8009fda:	b99b      	cbnz	r3, 800a004 <_vfiprintf_r+0x5c>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f000 f93a 	bl	800a258 <__swsetup_r>
 8009fe4:	b170      	cbz	r0, 800a004 <_vfiprintf_r+0x5c>
 8009fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe8:	07dc      	lsls	r4, r3, #31
 8009fea:	d504      	bpl.n	8009ff6 <_vfiprintf_r+0x4e>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	b01d      	add	sp, #116	; 0x74
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	0598      	lsls	r0, r3, #22
 8009ffa:	d4f7      	bmi.n	8009fec <_vfiprintf_r+0x44>
 8009ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffe:	f7ff fa73 	bl	80094e8 <__retarget_lock_release_recursive>
 800a002:	e7f3      	b.n	8009fec <_vfiprintf_r+0x44>
 800a004:	2300      	movs	r3, #0
 800a006:	9309      	str	r3, [sp, #36]	; 0x24
 800a008:	2320      	movs	r3, #32
 800a00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a00e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a012:	2330      	movs	r3, #48	; 0x30
 800a014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a1c8 <_vfiprintf_r+0x220>
 800a018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a01c:	f04f 0901 	mov.w	r9, #1
 800a020:	4623      	mov	r3, r4
 800a022:	469a      	mov	sl, r3
 800a024:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a028:	b10a      	cbz	r2, 800a02e <_vfiprintf_r+0x86>
 800a02a:	2a25      	cmp	r2, #37	; 0x25
 800a02c:	d1f9      	bne.n	800a022 <_vfiprintf_r+0x7a>
 800a02e:	ebba 0b04 	subs.w	fp, sl, r4
 800a032:	d00b      	beq.n	800a04c <_vfiprintf_r+0xa4>
 800a034:	465b      	mov	r3, fp
 800a036:	4622      	mov	r2, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffa1 	bl	8009f82 <__sfputs_r>
 800a040:	3001      	adds	r0, #1
 800a042:	f000 80a9 	beq.w	800a198 <_vfiprintf_r+0x1f0>
 800a046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a048:	445a      	add	r2, fp
 800a04a:	9209      	str	r2, [sp, #36]	; 0x24
 800a04c:	f89a 3000 	ldrb.w	r3, [sl]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 80a1 	beq.w	800a198 <_vfiprintf_r+0x1f0>
 800a056:	2300      	movs	r3, #0
 800a058:	f04f 32ff 	mov.w	r2, #4294967295
 800a05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a060:	f10a 0a01 	add.w	sl, sl, #1
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	9307      	str	r3, [sp, #28]
 800a068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a06c:	931a      	str	r3, [sp, #104]	; 0x68
 800a06e:	4654      	mov	r4, sl
 800a070:	2205      	movs	r2, #5
 800a072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a076:	4854      	ldr	r0, [pc, #336]	; (800a1c8 <_vfiprintf_r+0x220>)
 800a078:	f7f6 f8ea 	bl	8000250 <memchr>
 800a07c:	9a04      	ldr	r2, [sp, #16]
 800a07e:	b9d8      	cbnz	r0, 800a0b8 <_vfiprintf_r+0x110>
 800a080:	06d1      	lsls	r1, r2, #27
 800a082:	bf44      	itt	mi
 800a084:	2320      	movmi	r3, #32
 800a086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a08a:	0713      	lsls	r3, r2, #28
 800a08c:	bf44      	itt	mi
 800a08e:	232b      	movmi	r3, #43	; 0x2b
 800a090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a094:	f89a 3000 	ldrb.w	r3, [sl]
 800a098:	2b2a      	cmp	r3, #42	; 0x2a
 800a09a:	d015      	beq.n	800a0c8 <_vfiprintf_r+0x120>
 800a09c:	9a07      	ldr	r2, [sp, #28]
 800a09e:	4654      	mov	r4, sl
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f04f 0c0a 	mov.w	ip, #10
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ac:	3b30      	subs	r3, #48	; 0x30
 800a0ae:	2b09      	cmp	r3, #9
 800a0b0:	d94d      	bls.n	800a14e <_vfiprintf_r+0x1a6>
 800a0b2:	b1b0      	cbz	r0, 800a0e2 <_vfiprintf_r+0x13a>
 800a0b4:	9207      	str	r2, [sp, #28]
 800a0b6:	e014      	b.n	800a0e2 <_vfiprintf_r+0x13a>
 800a0b8:	eba0 0308 	sub.w	r3, r0, r8
 800a0bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	46a2      	mov	sl, r4
 800a0c6:	e7d2      	b.n	800a06e <_vfiprintf_r+0xc6>
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	1d19      	adds	r1, r3, #4
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	9103      	str	r1, [sp, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bfbb      	ittet	lt
 800a0d4:	425b      	neglt	r3, r3
 800a0d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0da:	9307      	strge	r3, [sp, #28]
 800a0dc:	9307      	strlt	r3, [sp, #28]
 800a0de:	bfb8      	it	lt
 800a0e0:	9204      	strlt	r2, [sp, #16]
 800a0e2:	7823      	ldrb	r3, [r4, #0]
 800a0e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e6:	d10c      	bne.n	800a102 <_vfiprintf_r+0x15a>
 800a0e8:	7863      	ldrb	r3, [r4, #1]
 800a0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ec:	d134      	bne.n	800a158 <_vfiprintf_r+0x1b0>
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	1d1a      	adds	r2, r3, #4
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	9203      	str	r2, [sp, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	bfb8      	it	lt
 800a0fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0fe:	3402      	adds	r4, #2
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a1d8 <_vfiprintf_r+0x230>
 800a106:	7821      	ldrb	r1, [r4, #0]
 800a108:	2203      	movs	r2, #3
 800a10a:	4650      	mov	r0, sl
 800a10c:	f7f6 f8a0 	bl	8000250 <memchr>
 800a110:	b138      	cbz	r0, 800a122 <_vfiprintf_r+0x17a>
 800a112:	9b04      	ldr	r3, [sp, #16]
 800a114:	eba0 000a 	sub.w	r0, r0, sl
 800a118:	2240      	movs	r2, #64	; 0x40
 800a11a:	4082      	lsls	r2, r0
 800a11c:	4313      	orrs	r3, r2
 800a11e:	3401      	adds	r4, #1
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	4829      	ldr	r0, [pc, #164]	; (800a1cc <_vfiprintf_r+0x224>)
 800a128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a12c:	2206      	movs	r2, #6
 800a12e:	f7f6 f88f 	bl	8000250 <memchr>
 800a132:	2800      	cmp	r0, #0
 800a134:	d03f      	beq.n	800a1b6 <_vfiprintf_r+0x20e>
 800a136:	4b26      	ldr	r3, [pc, #152]	; (800a1d0 <_vfiprintf_r+0x228>)
 800a138:	bb1b      	cbnz	r3, 800a182 <_vfiprintf_r+0x1da>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	3307      	adds	r3, #7
 800a13e:	f023 0307 	bic.w	r3, r3, #7
 800a142:	3308      	adds	r3, #8
 800a144:	9303      	str	r3, [sp, #12]
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	443b      	add	r3, r7
 800a14a:	9309      	str	r3, [sp, #36]	; 0x24
 800a14c:	e768      	b.n	800a020 <_vfiprintf_r+0x78>
 800a14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a152:	460c      	mov	r4, r1
 800a154:	2001      	movs	r0, #1
 800a156:	e7a6      	b.n	800a0a6 <_vfiprintf_r+0xfe>
 800a158:	2300      	movs	r3, #0
 800a15a:	3401      	adds	r4, #1
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	4619      	mov	r1, r3
 800a160:	f04f 0c0a 	mov.w	ip, #10
 800a164:	4620      	mov	r0, r4
 800a166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a16a:	3a30      	subs	r2, #48	; 0x30
 800a16c:	2a09      	cmp	r2, #9
 800a16e:	d903      	bls.n	800a178 <_vfiprintf_r+0x1d0>
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0c6      	beq.n	800a102 <_vfiprintf_r+0x15a>
 800a174:	9105      	str	r1, [sp, #20]
 800a176:	e7c4      	b.n	800a102 <_vfiprintf_r+0x15a>
 800a178:	fb0c 2101 	mla	r1, ip, r1, r2
 800a17c:	4604      	mov	r4, r0
 800a17e:	2301      	movs	r3, #1
 800a180:	e7f0      	b.n	800a164 <_vfiprintf_r+0x1bc>
 800a182:	ab03      	add	r3, sp, #12
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	462a      	mov	r2, r5
 800a188:	4b12      	ldr	r3, [pc, #72]	; (800a1d4 <_vfiprintf_r+0x22c>)
 800a18a:	a904      	add	r1, sp, #16
 800a18c:	4630      	mov	r0, r6
 800a18e:	f3af 8000 	nop.w
 800a192:	4607      	mov	r7, r0
 800a194:	1c78      	adds	r0, r7, #1
 800a196:	d1d6      	bne.n	800a146 <_vfiprintf_r+0x19e>
 800a198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a19a:	07d9      	lsls	r1, r3, #31
 800a19c:	d405      	bmi.n	800a1aa <_vfiprintf_r+0x202>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	059a      	lsls	r2, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_vfiprintf_r+0x202>
 800a1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1a6:	f7ff f99f 	bl	80094e8 <__retarget_lock_release_recursive>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	065b      	lsls	r3, r3, #25
 800a1ae:	f53f af1d 	bmi.w	8009fec <_vfiprintf_r+0x44>
 800a1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1b4:	e71c      	b.n	8009ff0 <_vfiprintf_r+0x48>
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <_vfiprintf_r+0x22c>)
 800a1be:	a904      	add	r1, sp, #16
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fc77 	bl	8009ab4 <_printf_i>
 800a1c6:	e7e4      	b.n	800a192 <_vfiprintf_r+0x1ea>
 800a1c8:	0800a74a 	.word	0x0800a74a
 800a1cc:	0800a754 	.word	0x0800a754
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	08009f83 	.word	0x08009f83
 800a1d8:	0800a750 	.word	0x0800a750

0800a1dc <__swbuf_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	460e      	mov	r6, r1
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b118      	cbz	r0, 800a1ee <__swbuf_r+0x12>
 800a1e6:	6a03      	ldr	r3, [r0, #32]
 800a1e8:	b90b      	cbnz	r3, 800a1ee <__swbuf_r+0x12>
 800a1ea:	f7fe fff9 	bl	80091e0 <__sinit>
 800a1ee:	69a3      	ldr	r3, [r4, #24]
 800a1f0:	60a3      	str	r3, [r4, #8]
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	071a      	lsls	r2, r3, #28
 800a1f6:	d525      	bpl.n	800a244 <__swbuf_r+0x68>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	b31b      	cbz	r3, 800a244 <__swbuf_r+0x68>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	6922      	ldr	r2, [r4, #16]
 800a200:	1a98      	subs	r0, r3, r2
 800a202:	6963      	ldr	r3, [r4, #20]
 800a204:	b2f6      	uxtb	r6, r6
 800a206:	4283      	cmp	r3, r0
 800a208:	4637      	mov	r7, r6
 800a20a:	dc04      	bgt.n	800a216 <__swbuf_r+0x3a>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f7ff fdf8 	bl	8009e04 <_fflush_r>
 800a214:	b9e0      	cbnz	r0, 800a250 <__swbuf_r+0x74>
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	3b01      	subs	r3, #1
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	701e      	strb	r6, [r3, #0]
 800a224:	6962      	ldr	r2, [r4, #20]
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	429a      	cmp	r2, r3
 800a22a:	d004      	beq.n	800a236 <__swbuf_r+0x5a>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	07db      	lsls	r3, r3, #31
 800a230:	d506      	bpl.n	800a240 <__swbuf_r+0x64>
 800a232:	2e0a      	cmp	r6, #10
 800a234:	d104      	bne.n	800a240 <__swbuf_r+0x64>
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f7ff fde3 	bl	8009e04 <_fflush_r>
 800a23e:	b938      	cbnz	r0, 800a250 <__swbuf_r+0x74>
 800a240:	4638      	mov	r0, r7
 800a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f000 f806 	bl	800a258 <__swsetup_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d0d5      	beq.n	800a1fc <__swbuf_r+0x20>
 800a250:	f04f 37ff 	mov.w	r7, #4294967295
 800a254:	e7f4      	b.n	800a240 <__swbuf_r+0x64>
	...

0800a258 <__swsetup_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4b2a      	ldr	r3, [pc, #168]	; (800a304 <__swsetup_r+0xac>)
 800a25c:	4605      	mov	r5, r0
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	460c      	mov	r4, r1
 800a262:	b118      	cbz	r0, 800a26c <__swsetup_r+0x14>
 800a264:	6a03      	ldr	r3, [r0, #32]
 800a266:	b90b      	cbnz	r3, 800a26c <__swsetup_r+0x14>
 800a268:	f7fe ffba 	bl	80091e0 <__sinit>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a272:	0718      	lsls	r0, r3, #28
 800a274:	d422      	bmi.n	800a2bc <__swsetup_r+0x64>
 800a276:	06d9      	lsls	r1, r3, #27
 800a278:	d407      	bmi.n	800a28a <__swsetup_r+0x32>
 800a27a:	2309      	movs	r3, #9
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e034      	b.n	800a2f4 <__swsetup_r+0x9c>
 800a28a:	0758      	lsls	r0, r3, #29
 800a28c:	d512      	bpl.n	800a2b4 <__swsetup_r+0x5c>
 800a28e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a290:	b141      	cbz	r1, 800a2a4 <__swsetup_r+0x4c>
 800a292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a296:	4299      	cmp	r1, r3
 800a298:	d002      	beq.n	800a2a0 <__swsetup_r+0x48>
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7ff f944 	bl	8009528 <_free_r>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	6063      	str	r3, [r4, #4]
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f043 0308 	orr.w	r3, r3, #8
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	b94b      	cbnz	r3, 800a2d4 <__swsetup_r+0x7c>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ca:	d003      	beq.n	800a2d4 <__swsetup_r+0x7c>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f88c 	bl	800a3ec <__smakebuf_r>
 800a2d4:	89a0      	ldrh	r0, [r4, #12]
 800a2d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2da:	f010 0301 	ands.w	r3, r0, #1
 800a2de:	d00a      	beq.n	800a2f6 <__swsetup_r+0x9e>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	6963      	ldr	r3, [r4, #20]
 800a2e6:	425b      	negs	r3, r3
 800a2e8:	61a3      	str	r3, [r4, #24]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	b943      	cbnz	r3, 800a300 <__swsetup_r+0xa8>
 800a2ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2f2:	d1c4      	bne.n	800a27e <__swsetup_r+0x26>
 800a2f4:	bd38      	pop	{r3, r4, r5, pc}
 800a2f6:	0781      	lsls	r1, r0, #30
 800a2f8:	bf58      	it	pl
 800a2fa:	6963      	ldrpl	r3, [r4, #20]
 800a2fc:	60a3      	str	r3, [r4, #8]
 800a2fe:	e7f4      	b.n	800a2ea <__swsetup_r+0x92>
 800a300:	2000      	movs	r0, #0
 800a302:	e7f7      	b.n	800a2f4 <__swsetup_r+0x9c>
 800a304:	20000120 	.word	0x20000120

0800a308 <_raise_r>:
 800a308:	291f      	cmp	r1, #31
 800a30a:	b538      	push	{r3, r4, r5, lr}
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	d904      	bls.n	800a31c <_raise_r+0x14>
 800a312:	2316      	movs	r3, #22
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	f04f 30ff 	mov.w	r0, #4294967295
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a31e:	b112      	cbz	r2, 800a326 <_raise_r+0x1e>
 800a320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a324:	b94b      	cbnz	r3, 800a33a <_raise_r+0x32>
 800a326:	4620      	mov	r0, r4
 800a328:	f000 f830 	bl	800a38c <_getpid_r>
 800a32c:	462a      	mov	r2, r5
 800a32e:	4601      	mov	r1, r0
 800a330:	4620      	mov	r0, r4
 800a332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a336:	f000 b817 	b.w	800a368 <_kill_r>
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d00a      	beq.n	800a354 <_raise_r+0x4c>
 800a33e:	1c59      	adds	r1, r3, #1
 800a340:	d103      	bne.n	800a34a <_raise_r+0x42>
 800a342:	2316      	movs	r3, #22
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	2001      	movs	r0, #1
 800a348:	e7e7      	b.n	800a31a <_raise_r+0x12>
 800a34a:	2400      	movs	r4, #0
 800a34c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a350:	4628      	mov	r0, r5
 800a352:	4798      	blx	r3
 800a354:	2000      	movs	r0, #0
 800a356:	e7e0      	b.n	800a31a <_raise_r+0x12>

0800a358 <raise>:
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <raise+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f7ff bfd3 	b.w	800a308 <_raise_r>
 800a362:	bf00      	nop
 800a364:	20000120 	.word	0x20000120

0800a368 <_kill_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	; (800a388 <_kill_r+0x20>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7f6 fd95 	bl	8000ea4 <_kill>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d102      	bne.n	800a384 <_kill_r+0x1c>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b103      	cbz	r3, 800a384 <_kill_r+0x1c>
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	2000068c 	.word	0x2000068c

0800a38c <_getpid_r>:
 800a38c:	f7f6 bd82 	b.w	8000e94 <_getpid>

0800a390 <_malloc_usable_size_r>:
 800a390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a394:	1f18      	subs	r0, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	bfbc      	itt	lt
 800a39a:	580b      	ldrlt	r3, [r1, r0]
 800a39c:	18c0      	addlt	r0, r0, r3
 800a39e:	4770      	bx	lr

0800a3a0 <__swhatbuf_r>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	2900      	cmp	r1, #0
 800a3aa:	b096      	sub	sp, #88	; 0x58
 800a3ac:	4615      	mov	r5, r2
 800a3ae:	461e      	mov	r6, r3
 800a3b0:	da0d      	bge.n	800a3ce <__swhatbuf_r+0x2e>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3b8:	f04f 0100 	mov.w	r1, #0
 800a3bc:	bf0c      	ite	eq
 800a3be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3c2:	2340      	movne	r3, #64	; 0x40
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	6031      	str	r1, [r6, #0]
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	b016      	add	sp, #88	; 0x58
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	466a      	mov	r2, sp
 800a3d0:	f000 f848 	bl	800a464 <_fstat_r>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	dbec      	blt.n	800a3b2 <__swhatbuf_r+0x12>
 800a3d8:	9901      	ldr	r1, [sp, #4]
 800a3da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3e2:	4259      	negs	r1, r3
 800a3e4:	4159      	adcs	r1, r3
 800a3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ea:	e7eb      	b.n	800a3c4 <__swhatbuf_r+0x24>

0800a3ec <__smakebuf_r>:
 800a3ec:	898b      	ldrh	r3, [r1, #12]
 800a3ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3f0:	079d      	lsls	r5, r3, #30
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	d507      	bpl.n	800a408 <__smakebuf_r+0x1c>
 800a3f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	2301      	movs	r3, #1
 800a402:	6163      	str	r3, [r4, #20]
 800a404:	b002      	add	sp, #8
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	ab01      	add	r3, sp, #4
 800a40a:	466a      	mov	r2, sp
 800a40c:	f7ff ffc8 	bl	800a3a0 <__swhatbuf_r>
 800a410:	9900      	ldr	r1, [sp, #0]
 800a412:	4605      	mov	r5, r0
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff f8fb 	bl	8009610 <_malloc_r>
 800a41a:	b948      	cbnz	r0, 800a430 <__smakebuf_r+0x44>
 800a41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a420:	059a      	lsls	r2, r3, #22
 800a422:	d4ef      	bmi.n	800a404 <__smakebuf_r+0x18>
 800a424:	f023 0303 	bic.w	r3, r3, #3
 800a428:	f043 0302 	orr.w	r3, r3, #2
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	e7e3      	b.n	800a3f8 <__smakebuf_r+0xc>
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a438:	81a3      	strh	r3, [r4, #12]
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	6163      	str	r3, [r4, #20]
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	6120      	str	r0, [r4, #16]
 800a442:	b15b      	cbz	r3, 800a45c <__smakebuf_r+0x70>
 800a444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a448:	4630      	mov	r0, r6
 800a44a:	f000 f81d 	bl	800a488 <_isatty_r>
 800a44e:	b128      	cbz	r0, 800a45c <__smakebuf_r+0x70>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	431d      	orrs	r5, r3
 800a460:	81a5      	strh	r5, [r4, #12]
 800a462:	e7cf      	b.n	800a404 <__smakebuf_r+0x18>

0800a464 <_fstat_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d07      	ldr	r5, [pc, #28]	; (800a484 <_fstat_r+0x20>)
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	4611      	mov	r1, r2
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	f7f6 fd76 	bl	8000f62 <_fstat>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	d102      	bne.n	800a480 <_fstat_r+0x1c>
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	b103      	cbz	r3, 800a480 <_fstat_r+0x1c>
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	bd38      	pop	{r3, r4, r5, pc}
 800a482:	bf00      	nop
 800a484:	2000068c 	.word	0x2000068c

0800a488 <_isatty_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d06      	ldr	r5, [pc, #24]	; (800a4a4 <_isatty_r+0x1c>)
 800a48c:	2300      	movs	r3, #0
 800a48e:	4604      	mov	r4, r0
 800a490:	4608      	mov	r0, r1
 800a492:	602b      	str	r3, [r5, #0]
 800a494:	f7f6 fd75 	bl	8000f82 <_isatty>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d102      	bne.n	800a4a2 <_isatty_r+0x1a>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	b103      	cbz	r3, 800a4a2 <_isatty_r+0x1a>
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	2000068c 	.word	0x2000068c

0800a4a8 <_init>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr

0800a4b4 <_fini>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr
