
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800cec8  0800cec8  0001cec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3a0  0800d3a0  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3a0  0800d3a0  0001d3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3a8  0800d3a8  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3a8  0800d3a8  0001d3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3ac  0800d3ac  0001d3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800d3b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000298  0800d648  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  0800d648  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc51  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8c  00000000  00000000  0003bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001173  00000000  00000000  00041098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bdad  00000000  00000000  0004220b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed1b  00000000  00000000  0006dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115205  00000000  00000000  0008ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071c4  00000000  00000000  001a1ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001a909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000298 	.word	0x20000298
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ceb0 	.word	0x0800ceb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000029c 	.word	0x2000029c
 800021c:	0800ceb0 	.word	0x0800ceb0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b970 	b.w	8000ff0 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2220      	movs	r2, #32
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f009 fdf6 	bl	800abfe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001014:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001018:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <MX_ADC1_Init+0xec>)
 800101c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001020:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <MX_ADC1_Init+0xec>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_ADC1_Init+0xec>)
 800103c:	2204      	movs	r2, #4
 800103e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MX_ADC1_Init+0xec>)
 800104e:	2201      	movs	r2, #1
 8001050:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC1_Init+0xec>)
 800105c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_ADC1_Init+0xec>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <MX_ADC1_Init+0xec>)
 8001082:	f001 ffdf 	bl	8003044 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800108c:	f000 fc5c 	bl	8001948 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <MX_ADC1_Init+0xec>)
 800109c:	f003 f8c6 	bl	800422c <HAL_ADCEx_MultiModeConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a6:	f000 fc4f 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_ADC1_Init+0xf0>)
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	2306      	movs	r3, #6
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010b2:	2304      	movs	r3, #4
 80010b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b6:	237f      	movs	r3, #127	; 0x7f
 80010b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ba:	2304      	movs	r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC1_Init+0xec>)
 80010c8:	f002 fa66 	bl	8003598 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010d2:	f000 fc39 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002b4 	.word	0x200002b4
 80010e4:	08600004 	.word	0x08600004

080010e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2220      	movs	r2, #32
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 fd82 	bl	800abfe <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <MX_ADC2_Init+0xc0>)
 80010fc:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <MX_ADC2_Init+0xc4>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001102:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001106:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001122:	2204      	movs	r2, #4
 8001124:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001128:	2200      	movs	r2, #0
 800112a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800112e:	2200      	movs	r2, #0
 8001130:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001134:	2201      	movs	r2, #1
 8001136:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001142:	2200      	movs	r2, #0
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001156:	2200      	movs	r2, #0
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001164:	f001 ff6e 	bl	8003044 <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800116e:	f000 fbeb 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_ADC2_Init+0xc8>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001176:	2306      	movs	r3, #6
 8001178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800117e:	237f      	movs	r3, #127	; 0x7f
 8001180:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001182:	2304      	movs	r3, #4
 8001184:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001190:	f002 fa02 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800119a:	f000 fbd5 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000320 	.word	0x20000320
 80011ac:	50000100 	.word	0x50000100
 80011b0:	04300002 	.word	0x04300002

080011b4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0a4      	sub	sp, #144	; 0x90
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d0:	2254      	movs	r2, #84	; 0x54
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f009 fd12 	bl	800abfe <memset>
  if(adcHandle->Instance==ADC1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e2:	f040 80a0 	bne.w	8001326 <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fd08 	bl	8005c0c <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001202:	f000 fba1 	bl	8001948 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <HAL_ADC_MspInit+0x238>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_ADC_MspInit+0x238>)
 800120e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_ADC_MspInit+0x238>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10b      	bne.n	8001230 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001218:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800121e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001224:	4b72      	ldr	r3, [pc, #456]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	4a6e      	ldr	r2, [pc, #440]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123c:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	623b      	str	r3, [r7, #32]
 8001246:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	4a68      	ldr	r2, [pc, #416]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001254:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	4a62      	ldr	r2, [pc, #392]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126c:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001278:	2304      	movs	r3, #4
 800127a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800128c:	4619      	mov	r1, r3
 800128e:	4859      	ldr	r0, [pc, #356]	; (80013f4 <HAL_ADC_MspInit+0x240>)
 8001290:	f003 fd16 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001294:	2302      	movs	r3, #2
 8001296:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f003 fd07 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_ADC1_IN15_Pin|V_Imes_ADC1_IN12_Pin;
 80012b2:	2303      	movs	r3, #3
 80012b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c6:	4619      	mov	r1, r3
 80012c8:	484b      	ldr	r0, [pc, #300]	; (80013f8 <HAL_ADC_MspInit+0x244>)
 80012ca:	f003 fcf9 	bl	8004cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_ADC_MspInit+0x24c>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012d4:	4b49      	ldr	r3, [pc, #292]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012d6:	2205      	movs	r2, #5
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b46      	ldr	r3, [pc, #280]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ec:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f4:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_ADC_MspInit+0x248>)
 80012fe:	2220      	movs	r2, #32
 8001300:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_ADC_MspInit+0x248>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001308:	483c      	ldr	r0, [pc, #240]	; (80013fc <HAL_ADC_MspInit+0x248>)
 800130a:	f003 f9a7 	bl	800465c <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001314:	f000 fb18 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a38      	ldr	r2, [pc, #224]	; (80013fc <HAL_ADC_MspInit+0x248>)
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
 800131e:	4a37      	ldr	r2, [pc, #220]	; (80013fc <HAL_ADC_MspInit+0x248>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001324:	e05e      	b.n	80013e4 <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <HAL_ADC_MspInit+0x250>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d159      	bne.n	80013e4 <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001336:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800133a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fc63 	bl	8005c0c <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 800134c:	f000 fafc 	bl	8001948 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_ADC_MspInit+0x238>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a25      	ldr	r2, [pc, #148]	; (80013ec <HAL_ADC_MspInit+0x238>)
 8001358:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_ADC_MspInit+0x238>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10b      	bne.n	800137a <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_ADC_MspInit+0x23c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80013aa:	230b      	movs	r3, #11
 80013ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_ADC_MspInit+0x240>)
 80013c2:	f003 fc7d 	bl	8004cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80013c6:	2301      	movs	r3, #1
 80013c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f003 fc6e 	bl	8004cc0 <HAL_GPIO_Init>
}
 80013e4:	bf00      	nop
 80013e6:	3790      	adds	r7, #144	; 0x90
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200003ec 	.word	0x200003ec
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000800 	.word	0x48000800
 80013f8:	48000400 	.word	0x48000400
 80013fc:	2000038c 	.word	0x2000038c
 8001400:	40020008 	.word	0x40020008
 8001404:	50000100 	.word	0x50000100

08001408 <compute_current>:
 *      Author: peret
 */

#include "main.h"

float compute_current(uint32_t voltage){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	float current;
	current = (voltage*3300.0/4096-1650)/50;
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff f8af 	bl	8000574 <__aeabi_ui2d>
 8001416:	a31c      	add	r3, pc, #112	; (adr r3, 8001488 <compute_current+0x80>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f924 	bl	8000668 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <compute_current+0x78>)
 800142e:	f7ff fa45 	bl	80008bc <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	a30f      	add	r3, pc, #60	; (adr r3, 8001478 <compute_current+0x70>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7fe ff5a 	bl	80002f8 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <compute_current+0x7c>)
 8001452:	f7ff fa33 	bl	80008bc <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbfb 	bl	8000c58 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	60fb      	str	r3, [r7, #12]
	return current;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ee07 3a90 	vmov	s15, r3
}
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	00000000 	.word	0x00000000
 800147c:	4099c800 	.word	0x4099c800
 8001480:	40b00000 	.word	0x40b00000
 8001484:	40490000 	.word	0x40490000
 8001488:	00000000 	.word	0x00000000
 800148c:	40a9c800 	.word	0x40a9c800

08001490 <compute_speed>:
 *  Created on: Oct 25, 2023
 *      Author: peret
 */

float compute_speed(float * speed_table)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	float sum = 0;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<100;i++){
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	e00e      	b.n	80014c2 <compute_speed+0x32>
		sum+=speed_table[i];
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b8:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i=0;i<100;i++){
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3301      	adds	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b63      	cmp	r3, #99	; 0x63
 80014c6:	dded      	ble.n	80014a4 <compute_speed+0x14>
	}
	return sum/100;
 80014c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014e8 <compute_speed+0x58>
 80014d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	42c80000 	.word	0x42c80000
 80014ec:	00000000 	.word	0x00000000

080014f0 <current_enslavement>:
float current_error = 0.0;

float old_order_alpha = 0.0;
float order_alpha = 0.0;

void current_enslavement(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	float b_zero = 0.86625; // k_p+k_I*T_e/2 = 0.8+2650*0.5*10^(-4)/2
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <current_enslavement+0xc0>)
 80014f8:	607b      	str	r3, [r7, #4]
	float b_one = -0.73375; // k_I*T_e/2 - k_p = 2650*0.5*10^(-4)/2 - 0.8
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <current_enslavement+0xc4>)
 80014fc:	603b      	str	r3, [r7, #0]
	order_alpha = old_order_alpha + b_zero * current_error
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <current_enslavement+0xc8>)
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 7a01 	vldr	s15, [r7, #4]
 8001508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <current_enslavement+0xcc>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ b_one * old_current_error;
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <current_enslavement+0xd0>)
 8001518:	edd3 6a00 	vldr	s13, [r3]
 800151c:	edd7 7a00 	vldr	s15, [r7]
 8001520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
	order_alpha = old_order_alpha + b_zero * current_error
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <current_enslavement+0xd4>)
 800152a:	edc3 7a00 	vstr	s15, [r3]
	current_error = order_current - current;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <current_enslavement+0xd8>)
 8001530:	ed93 7a00 	vldr	s14, [r3]
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <current_enslavement+0xdc>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <current_enslavement+0xc8>)
 8001540:	edc3 7a00 	vstr	s15, [r3]
	old_order_alpha = order_alpha;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <current_enslavement+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <current_enslavement+0xcc>)
 800154a:	6013      	str	r3, [r2, #0]
	old_current_error = current_error;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <current_enslavement+0xc8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <current_enslavement+0xd0>)
 8001552:	6013      	str	r3, [r2, #0]
	if (order_alpha > 0.8)
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <current_enslavement+0xd4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f82d 	bl	80005b8 <__aeabi_f2d>
 800155e:	a310      	add	r3, pc, #64	; (adr r3, 80015a0 <current_enslavement+0xb0>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff fb10 	bl	8000b88 <__aeabi_dcmpgt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <current_enslavement+0x84>
		order_alpha = 0.8;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <current_enslavement+0xd4>)
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <current_enslavement+0xe0>)
 8001572:	601a      	str	r2, [r3, #0]
	if (order_alpha < 0.2)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <current_enslavement+0xd4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f81d 	bl	80005b8 <__aeabi_f2d>
 800157e:	a30a      	add	r3, pc, #40	; (adr r3, 80015a8 <current_enslavement+0xb8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff fae2 	bl	8000b4c <__aeabi_dcmplt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <current_enslavement+0xa0>
		order_alpha = 0.2;
}
 800158e:	e002      	b.n	8001596 <current_enslavement+0xa6>
		order_alpha = 0.2;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <current_enslavement+0xd4>)
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <current_enslavement+0xe4>)
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	9999999a 	.word	0x9999999a
 80015a4:	3fe99999 	.word	0x3fe99999
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fc99999 	.word	0x3fc99999
 80015b0:	3f5dc28f 	.word	0x3f5dc28f
 80015b4:	bf3bd70a 	.word	0xbf3bd70a
 80015b8:	200003f4 	.word	0x200003f4
 80015bc:	200003f8 	.word	0x200003f8
 80015c0:	200003f0 	.word	0x200003f0
 80015c4:	200003fc 	.word	0x200003fc
 80015c8:	200005b0 	.word	0x200005b0
 80015cc:	2000081c 	.word	0x2000081c
 80015d0:	3f4ccccd 	.word	0x3f4ccccd
 80015d4:	3e4ccccd 	.word	0x3e4ccccd

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_DMA_Init+0x50>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <MX_DMA_Init+0x50>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6493      	str	r3, [r2, #72]	; 0x48
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_DMA_Init+0x50>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_DMA_Init+0x50>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <MX_DMA_Init+0x50>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6493      	str	r3, [r2, #72]	; 0x48
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_DMA_Init+0x50>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	200b      	movs	r0, #11
 8001614:	f002 ffed 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001618:	200b      	movs	r0, #11
 800161a:	f003 f804 	bl	8004626 <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <MX_GPIO_Init+0x114>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <MX_GPIO_Init+0x114>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <MX_GPIO_Init+0x114>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <MX_GPIO_Init+0x114>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a38      	ldr	r2, [pc, #224]	; (8001740 <MX_GPIO_Init+0x114>)
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_GPIO_Init+0x114>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <MX_GPIO_Init+0x114>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <MX_GPIO_Init+0x114>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <MX_GPIO_Init+0x114>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <MX_GPIO_Init+0x114>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a2c      	ldr	r2, [pc, #176]	; (8001740 <MX_GPIO_Init+0x114>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <MX_GPIO_Init+0x114>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <MX_GPIO_Init+0x114>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a26      	ldr	r2, [pc, #152]	; (8001740 <MX_GPIO_Init+0x114>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MX_GPIO_Init+0x114>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f003 fc7f 	bl	8004fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2104      	movs	r1, #4
 80016ca:	481e      	ldr	r0, [pc, #120]	; (8001744 <MX_GPIO_Init+0x118>)
 80016cc:	f003 fc7a 	bl	8004fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80016d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4818      	ldr	r0, [pc, #96]	; (8001748 <MX_GPIO_Init+0x11c>)
 80016e8:	f003 faea 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80016ec:	2320      	movs	r3, #32
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f003 fadb 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800170a:	2304      	movs	r3, #4
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <MX_GPIO_Init+0x118>)
 8001722:	f003 facd 	bl	8004cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2028      	movs	r0, #40	; 0x28
 800172c:	f002 ff61 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001730:	2028      	movs	r0, #40	; 0x28
 8001732:	f002 ff78 	bl	8004626 <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48000800 	.word	0x48000800

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(int i=0;i<100;i++){
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	e009      	b.n	800176c <main+0x20>
		speed_table[i] = 0.0; // speed_table is used for computing a mean speed
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <main+0x94>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
	for(int i=0;i<100;i++){
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3301      	adds	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b63      	cmp	r3, #99	; 0x63
 8001770:	ddf2      	ble.n	8001758 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f001 f9ae 	bl	8002ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f83b 	bl	80017f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f7ff ff57 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 800177e:	f7ff ff2b 	bl	80015d8 <MX_DMA_Init>
  MX_ADC2_Init();
 8001782:	f7ff fcb1 	bl	80010e8 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001786:	f7ff fc35 	bl	8000ff4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800178a:	f000 fbcf 	bl	8001f2c <MX_TIM1_Init>
  MX_TIM3_Init();
 800178e:	f000 fc95 	bl	80020bc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001792:	f000 fe29 	bl	80023e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001796:	f000 fe73 	bl	8002480 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800179a:	f000 fce3 	bl	8002164 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 800179e:	f000 ff63 	bl	8002668 <Shell_Init>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80017a2:	217f      	movs	r1, #127	; 0x7f
 80017a4:	480f      	ldr	r0, [pc, #60]	; (80017e4 <main+0x98>)
 80017a6:	f002 fcdf 	bl	8004168 <HAL_ADCEx_Calibration_Start>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <main+0x68>
		Error_Handler();
 80017b0:	f000 f8ca 	bl	8001948 <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 80017b4:	2201      	movs	r2, #1
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <main+0x9c>)
 80017b8:	480a      	ldr	r0, [pc, #40]	; (80017e4 <main+0x98>)
 80017ba:	f001 fe05 	bl	80033c8 <HAL_ADC_Start_DMA>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <main+0x7c>
		Error_Handler();
 80017c4:	f000 f8c0 	bl	8001948 <Error_Handler>
//	if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
//		Error_Handler();
	if (HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 80017c8:	213c      	movs	r1, #60	; 0x3c
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <main+0xa0>)
 80017cc:	f004 ff78 	bl	80066c0 <HAL_TIM_Encoder_Start_IT>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <main+0x8e>
		Error_Handler();
 80017d6:	f000 f8b7 	bl	8001948 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Shell_Loop();
 80017da:	f000 ff85 	bl	80026e8 <Shell_Loop>
 80017de:	e7fc      	b.n	80017da <main+0x8e>
 80017e0:	2000040c 	.word	0x2000040c
 80017e4:	200002b4 	.word	0x200002b4
 80017e8:	2000059c 	.word	0x2000059c
 80017ec:	20000618 	.word	0x20000618

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b094      	sub	sp, #80	; 0x50
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0318 	add.w	r3, r7, #24
 80017fa:	2238      	movs	r2, #56	; 0x38
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 f9fd 	bl	800abfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001812:	2000      	movs	r0, #0
 8001814:	f003 fc12 	bl	800503c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001818:	2301      	movs	r3, #1
 800181a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001822:	2302      	movs	r3, #2
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001826:	2303      	movs	r3, #3
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800182a:	2306      	movs	r3, #6
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800182e:	2355      	movs	r3, #85	; 0x55
 8001830:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001832:	2302      	movs	r3, #2
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001836:	2302      	movs	r3, #2
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800183a:	2302      	movs	r3, #2
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fcae 	bl	80051a4 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800184e:	f000 f87b 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2303      	movs	r3, #3
 8001858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2104      	movs	r1, #4
 800186a:	4618      	mov	r0, r3
 800186c:	f003 ffb2 	bl	80057d4 <HAL_RCC_ClockConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001876:	f000 f867 	bl	8001948 <Error_Handler>
  }
}
 800187a:	bf00      	nop
 800187c:	3750      	adds	r7, #80	; 0x50
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	//			if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
	//				Error_Handler();
	current_flag = 1;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200005a0 	.word	0x200005a0

080018a4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d137      	bne.n	8001926 <HAL_TIM_IC_CaptureCallback+0x82>
		counter = __HAL_TIM_GET_COUNTER(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x90>)
 80018be:	6013      	str	r3, [r2, #0]
//			count = (int16_t) counter;
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d107      	bne.n	80018de <HAL_TIM_IC_CaptureCallback+0x3a>
			count = COUNTER_ARR - counter;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x90>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80018d6:	33ff      	adds	r3, #255	; 0xff
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x94>)
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e003      	b.n	80018e6 <HAL_TIM_IC_CaptureCallback+0x42>
		} else {
			count = counter;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x90>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x94>)
 80018e4:	6013      	str	r3, [r2, #0]
		}
		number_of_rotations = (count + 0.0) / 4096;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x94>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe42 	bl	8000574 <__aeabi_ui2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f7fe fd00 	bl	80002fc <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_TIM_IC_CaptureCallback+0x98>)
 800190a:	f7fe ffd7 	bl	80008bc <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f99f 	bl	8000c58 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800191e:	6013      	str	r3, [r2, #0]
		speed_flag = 1;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
	}
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40000400 	.word	0x40000400
 8001934:	20000404 	.word	0x20000404
 8001938:	20000408 	.word	0x20000408
 800193c:	40b00000 	.word	0x40b00000
 8001940:	20000400 	.word	0x20000400
 8001944:	200005a1 	.word	0x200005a1

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
 8001952:	0000      	movs	r0, r0
 8001954:	0000      	movs	r0, r0
	...

08001958 <set_motor_speed>:

uint32_t current_duty_cycle1 = 511; // The motor is initialized at a duty cylce of 50 % to start at null speed
uint32_t current_duty_cycle2 = 512;
extern uint8_t wait_flag;

void set_motor_speed(int speed) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint32_t targeted_duty_cycle1 = speed * 0.01 * COUNTER_PERIOD;
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7fe fe17 	bl	8000594 <__aeabi_i2d>
 8001966:	a33a      	add	r3, pc, #232	; (adr r3, 8001a50 <set_motor_speed+0xf8>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fe7c 	bl	8000668 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	a337      	add	r3, pc, #220	; (adr r3, 8001a58 <set_motor_speed+0x100>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fe73 	bl	8000668 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f945 	bl	8000c18 <__aeabi_d2uiz>
 800198e:	4603      	mov	r3, r0
 8001990:	60fb      	str	r3, [r7, #12]
	while (current_duty_cycle1 < targeted_duty_cycle1) {
 8001992:	e01c      	b.n	80019ce <set_motor_speed+0x76>
		if (wait_flag) {
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <set_motor_speed+0xe8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <set_motor_speed+0x76>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_duty_cycle1);
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <set_motor_speed+0xec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <set_motor_speed+0xf0>)
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, current_duty_cycle2);
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <set_motor_speed+0xec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <set_motor_speed+0xf4>)
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
			current_duty_cycle1++;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <set_motor_speed+0xf0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <set_motor_speed+0xf0>)
 80019b8:	6013      	str	r3, [r2, #0]
			current_duty_cycle2 = COUNTER_PERIOD - current_duty_cycle1;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <set_motor_speed+0xf0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80019c2:	3303      	adds	r3, #3
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <set_motor_speed+0xf4>)
 80019c6:	6013      	str	r3, [r2, #0]
			wait_flag = 0;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <set_motor_speed+0xe8>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	while (current_duty_cycle1 < targeted_duty_cycle1) {
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <set_motor_speed+0xf0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8dd      	bhi.n	8001994 <set_motor_speed+0x3c>
		}
	}
	while (current_duty_cycle1 > targeted_duty_cycle1) {
 80019d8:	e01c      	b.n	8001a14 <set_motor_speed+0xbc>
		if (wait_flag) {
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <set_motor_speed+0xe8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d018      	beq.n	8001a14 <set_motor_speed+0xbc>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_duty_cycle1);
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <set_motor_speed+0xec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <set_motor_speed+0xf0>)
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, current_duty_cycle2);
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <set_motor_speed+0xec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <set_motor_speed+0xf4>)
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
			current_duty_cycle1--;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <set_motor_speed+0xf0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <set_motor_speed+0xf0>)
 80019fe:	6013      	str	r3, [r2, #0]
			current_duty_cycle2 = COUNTER_PERIOD - current_duty_cycle1;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <set_motor_speed+0xf0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8001a08:	3303      	adds	r3, #3
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <set_motor_speed+0xf4>)
 8001a0c:	6013      	str	r3, [r2, #0]
			wait_flag = 0;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <set_motor_speed+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	while (current_duty_cycle1 > targeted_duty_cycle1) {
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <set_motor_speed+0xf0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3dd      	bcc.n	80019da <set_motor_speed+0x82>
		}
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_duty_cycle1);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <set_motor_speed+0xec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <set_motor_speed+0xf0>)
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, current_duty_cycle2);
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <set_motor_speed+0xec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <set_motor_speed+0xf4>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	f3af 8000 	nop.w
 8001a40:	200005c4 	.word	0x200005c4
 8001a44:	200005cc 	.word	0x200005cc
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000004 	.word	0x20000004
 8001a50:	47ae147b 	.word	0x47ae147b
 8001a54:	3f847ae1 	.word	0x3f847ae1
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	408ff800 	.word	0x408ff800

08001a60 <speed_enslavement>:
float speed_error = 0.0;

float old_order_current = 0.0;
float order_current = 0.0;

void speed_enslavement(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
	float b_zero = 0.4775; // k_p+k_I*T_e/2 = 0.354+2.47*0.1/2
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <speed_enslavement+0x110>)
 8001a68:	60fb      	str	r3, [r7, #12]
	float b_one = -0.2305; // k_I*T_e/2 - k_p = 2.47*0.1/2 - 0.354
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <speed_enslavement+0x114>)
 8001a6c:	60bb      	str	r3, [r7, #8]
	float physical_filtered_measured_speed = 2 * M_PI * filtered_measured_speed
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <speed_enslavement+0x118>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fda0 	bl	80005b8 <__aeabi_f2d>
 8001a78:	a33b      	add	r3, pc, #236	; (adr r3, 8001b68 <speed_enslavement+0x108>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fdf3 	bl	8000668 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
			/ 60;
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <speed_enslavement+0x11c>)
 8001a90:	f7fe ff14 	bl	80008bc <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
	float physical_filtered_measured_speed = 2 * M_PI * filtered_measured_speed
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f8dc 	bl	8000c58 <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	607b      	str	r3, [r7, #4]
	float physical_order_speed = 2 * M_PI * (order_speed / 100 * 3000) / 60; // a ratio of the maximum rotation speed (3000 rpm) "physical_order_speed" is in rad/s
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <speed_enslavement+0x120>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <speed_enslavement+0x124>)
 8001aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8001aae:	1152      	asrs	r2, r2, #5
 8001ab0:	17db      	asrs	r3, r3, #31
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd69 	bl	8000594 <__aeabi_i2d>
 8001ac2:	a329      	add	r3, pc, #164	; (adr r3, 8001b68 <speed_enslavement+0x108>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fdce 	bl	8000668 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <speed_enslavement+0x11c>)
 8001ada:	f7fe feef 	bl	80008bc <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f8b7 	bl	8000c58 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	603b      	str	r3, [r7, #0]
	speed_error = physical_filtered_measured_speed - physical_order_speed;
 8001aee:	ed97 7a01 	vldr	s14, [r7, #4]
 8001af2:	edd7 7a00 	vldr	s15, [r7]
 8001af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <speed_enslavement+0x128>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
	order_current = old_order_current + b_zero * speed_error
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <speed_enslavement+0x128>)
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <speed_enslavement+0x12c>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ b_one * old_speed_error;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <speed_enslavement+0x130>)
 8001b1a:	edd3 6a00 	vldr	s13, [r3]
 8001b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
	order_current = old_order_current + b_zero * speed_error
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <speed_enslavement+0x134>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
	old_order_current = order_current;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <speed_enslavement+0x134>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <speed_enslavement+0x12c>)
 8001b36:	6013      	str	r3, [r2, #0]
	old_speed_error = speed_error;
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <speed_enslavement+0x128>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <speed_enslavement+0x130>)
 8001b3e:	6013      	str	r3, [r2, #0]
	if (order_current > 3.0)
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <speed_enslavement+0x134>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	dc00      	bgt.n	8001b56 <speed_enslavement+0xf6>
		order_current = 3.0;
}
 8001b54:	e002      	b.n	8001b5c <speed_enslavement+0xfc>
		order_current = 3.0;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <speed_enslavement+0x134>)
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <speed_enslavement+0x138>)
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	f3af 8000 	nop.w
 8001b68:	54442d18 	.word	0x54442d18
 8001b6c:	401921fb 	.word	0x401921fb
 8001b70:	3ef47ae1 	.word	0x3ef47ae1
 8001b74:	be6c0831 	.word	0xbe6c0831
 8001b78:	200005b8 	.word	0x200005b8
 8001b7c:	404e0000 	.word	0x404e0000
 8001b80:	20000818 	.word	0x20000818
 8001b84:	51eb851f 	.word	0x51eb851f
 8001b88:	200005a8 	.word	0x200005a8
 8001b8c:	200005ac 	.word	0x200005ac
 8001b90:	200005a4 	.word	0x200005a4
 8001b94:	200005b0 	.word	0x200005b0
 8001b98:	40400000 	.word	0x40400000

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_MspInit+0x44>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_MspInit+0x44>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6613      	str	r3, [r2, #96]	; 0x60
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_MspInit+0x44>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x44>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x44>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x44>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bd2:	f003 fad7 	bl	8005184 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001bec:	1d39      	adds	r1, r7, #4
 8001bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <__io_putchar+0x20>)
 8001bf6:	f006 f99a 	bl	8007f2e <HAL_UART_Transmit>
  return ch;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200006b0 	.word	0x200006b0

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <SysTick_Handler+0x94>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <SysTick_Handler+0x94>)
 8001c5c:	6013      	str	r3, [r2, #0]
	if (indx == 50)
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <SysTick_Handler+0x94>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b32      	cmp	r3, #50	; 0x32
 8001c64:	d102      	bne.n	8001c6c <SysTick_Handler+0x1c>
		wait_flag = 1;
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <SysTick_Handler+0x98>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
	if (indx == 100) {
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <SysTick_Handler+0x94>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d132      	bne.n	8001cda <SysTick_Handler+0x8a>
		indx = 0;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <SysTick_Handler+0x94>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
		measured_speed = number_of_rotations * 10 * 60; // in rpm
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <SysTick_Handler+0x9c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001cf0 <SysTick_Handler+0xa0>
 8001c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <SysTick_Handler+0xa4>)
 8001c92:	edc3 7a00 	vstr	s15, [r3]
		number_of_rotations = 0.0;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <SysTick_Handler+0x9c>)
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
		speed_table[i_speed_table] = measured_speed;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <SysTick_Handler+0xa8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <SysTick_Handler+0xa4>)
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4915      	ldr	r1, [pc, #84]	; (8001cfc <SysTick_Handler+0xac>)
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	601a      	str	r2, [r3, #0]
		i_speed_table++;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <SysTick_Handler+0xa8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <SysTick_Handler+0xa8>)
 8001cb6:	6013      	str	r3, [r2, #0]
		if (i_speed_table == 99)
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <SysTick_Handler+0xa8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b63      	cmp	r3, #99	; 0x63
 8001cbe:	d102      	bne.n	8001cc6 <SysTick_Handler+0x76>
			i_speed_table = 0;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <SysTick_Handler+0xa8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
		filtered_measured_speed = compute_speed(speed_table);
 8001cc6:	480d      	ldr	r0, [pc, #52]	; (8001cfc <SysTick_Handler+0xac>)
 8001cc8:	f7ff fbe2 	bl	8001490 <compute_speed>
 8001ccc:	eef0 7a40 	vmov.f32	s15, s0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <SysTick_Handler+0xb0>)
 8001cd2:	edc3 7a00 	vstr	s15, [r3]

		speed_enslavement();
 8001cd6:	f7ff fec3 	bl	8001a60 <speed_enslavement>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cda:	f000 ff4d 	bl	8002b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200005bc 	.word	0x200005bc
 8001ce8:	200005c4 	.word	0x200005c4
 8001cec:	20000400 	.word	0x20000400
 8001cf0:	42700000 	.word	0x42700000
 8001cf4:	200005b4 	.word	0x200005b4
 8001cf8:	200005c0 	.word	0x200005c0
 8001cfc:	2000040c 	.word	0x2000040c
 8001d00:	200005b8 	.word	0x200005b8

08001d04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <DMA1_Channel1_IRQHandler+0x10>)
 8001d0a:	f002 fe8a 	bl	8004a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000038c 	.word	0x2000038c

08001d18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM3_IRQHandler+0x10>)
 8001d1e:	f004 fd7d 	bl	800681c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000618 	.word	0x20000618

08001d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USART2_IRQHandler+0x10>)
 8001d32:	f006 f9e9 	bl	8008108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200006b0 	.word	0x200006b0

08001d40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART3_IRQHandler+0x10>)
 8001d46:	f006 f9df 	bl	8008108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000740 	.word	0x20000740

08001d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001d58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d5c:	f003 f94a 	bl	8004ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */
	current_enslavement();
 8001d68:	f7ff fbc2 	bl	80014f0 <current_enslavement>
  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <TIM7_DAC_IRQHandler+0x14>)
 8001d6e:	f004 fd55 	bl	800681c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000664 	.word	0x20000664

08001d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_kill>:

int _kill(int pid, int sig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d96:	f008 ffe1 	bl	800ad5c <__errno>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2216      	movs	r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_exit>:

void _exit (int status)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffe7 	bl	8001d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dbe:	e7fe      	b.n	8001dbe <_exit+0x12>

08001dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e00a      	b.n	8001de8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd2:	f3af 8000 	nop.w
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf0      	blt.n	8001dd2 <_read+0x12>
  }

  return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e009      	b.n	8001e20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fee5 	bl	8001be4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf1      	blt.n	8001e0c <_write+0x12>
  }
  return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_close>:

int _close(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_isatty>:

int _isatty(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f008 ff46 	bl	800ad5c <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20020000 	.word	0x20020000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	200005c8 	.word	0x200005c8
 8001f04:	200009e8 	.word	0x200009e8

08001f08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09c      	sub	sp, #112	; 0x70
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2234      	movs	r2, #52	; 0x34
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f008 fe49 	bl	800abfe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f6c:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f6e:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <MX_TIM1_Init+0x18c>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001f72:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f78:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001f7e:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f80:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001f84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f8c:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f98:	4846      	ldr	r0, [pc, #280]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001f9a:	f004 f885 	bl	80060a8 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fa4:	f7ff fcd0 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	483f      	ldr	r0, [pc, #252]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001fb6:	f004 fec5 	bl	8006d44 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fc0:	f7ff fcc2 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fc4:	483b      	ldr	r0, [pc, #236]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001fc6:	f004 f8c6 	bl	8006156 <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fd0:	f7ff fcba 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fe0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4833      	ldr	r0, [pc, #204]	; (80020b4 <MX_TIM1_Init+0x188>)
 8001fe8:	f005 fd9e 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ff2:	f7ff fca9 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff6:	2360      	movs	r3, #96	; 0x60
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffe:	2300      	movs	r3, #0
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002002:	2300      	movs	r3, #0
 8002004:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002012:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	4826      	ldr	r0, [pc, #152]	; (80020b4 <MX_TIM1_Init+0x188>)
 800201c:	f004 fd7e 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002026:	f7ff fc8f 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800202a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800202e:	2204      	movs	r2, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4820      	ldr	r0, [pc, #128]	; (80020b4 <MX_TIM1_Init+0x188>)
 8002034:	f004 fd72 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800203e:	f7ff fc83 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002046:	2208      	movs	r2, #8
 8002048:	4619      	mov	r1, r3
 800204a:	481a      	ldr	r0, [pc, #104]	; (80020b4 <MX_TIM1_Init+0x188>)
 800204c:	f004 fd66 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002056:	f7ff fc77 	bl	8001948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8002066:	2332      	movs	r3, #50	; 0x32
 8002068:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800206e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002072:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM1_Init+0x188>)
 8002098:	f005 fddc 	bl	8007c54 <HAL_TIMEx_ConfigBreakDeadTime>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80020a2:	f7ff fc51 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020a6:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM1_Init+0x188>)
 80020a8:	f000 f936 	bl	8002318 <HAL_TIM_MspPostInit>

}
 80020ac:	bf00      	nop
 80020ae:	3770      	adds	r7, #112	; 0x70
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200005cc 	.word	0x200005cc
 80020b8:	40012c00 	.word	0x40012c00

080020bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 fd97 	bl	800abfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	463b      	mov	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <MX_TIM3_Init+0xa0>)
 80020dc:	4a20      	ldr	r2, [pc, #128]	; (8002160 <MX_TIM3_Init+0xa4>)
 80020de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_TIM3_Init+0xa0>)
 80020e2:	22a9      	movs	r2, #169	; 0xa9
 80020e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_TIM3_Init+0xa0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_TIM3_Init+0xa0>)
 80020ee:	2231      	movs	r2, #49	; 0x31
 80020f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_TIM3_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_TIM3_Init+0xa0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020fe:	2303      	movs	r3, #3
 8002100:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002102:	2302      	movs	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002112:	2302      	movs	r3, #2
 8002114:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <MX_TIM3_Init+0xa0>)
 800212a:	f004 fa23 	bl	8006574 <HAL_TIM_Encoder_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002134:	f7ff fc08 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_TIM3_Init+0xa0>)
 8002146:	f005 fcef 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002150:	f7ff fbfa 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000618 	.word	0x20000618
 8002160:	40000400 	.word	0x40000400

08002164 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_TIM7_Init+0x64>)
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <MX_TIM7_Init+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170;
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <MX_TIM7_Init+0x64>)
 800217c:	22aa      	movs	r2, #170	; 0xaa
 800217e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_TIM7_Init+0x64>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <MX_TIM7_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_TIM7_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002192:	480d      	ldr	r0, [pc, #52]	; (80021c8 <MX_TIM7_Init+0x64>)
 8002194:	f003 ff88 	bl	80060a8 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800219e:	f7ff fbd3 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021a2:	2320      	movs	r3, #32
 80021a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	; (80021c8 <MX_TIM7_Init+0x64>)
 80021b0:	f005 fcba 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80021ba:	f7ff fbc5 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000664 	.word	0x20000664
 80021cc:	40001400 	.word	0x40001400

080021d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_TIM_Base_MspInit+0x68>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10c      	bne.n	80021fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_TIM_Base_MspInit+0x6c>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_TIM_Base_MspInit+0x6c>)
 80021e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021ec:	6613      	str	r3, [r2, #96]	; 0x60
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_TIM_Base_MspInit+0x6c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80021fa:	e018      	b.n	800222e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_TIM_Base_MspInit+0x70>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d113      	bne.n	800222e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_TIM_Base_MspInit+0x6c>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_TIM_Base_MspInit+0x6c>)
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_TIM_Base_MspInit+0x6c>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2037      	movs	r0, #55	; 0x37
 8002224:	f002 f9e5 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002228:	2037      	movs	r0, #55	; 0x37
 800222a:	f002 f9fc 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40021000 	.word	0x40021000
 8002240:	40001400 	.word	0x40001400

08002244 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2a      	ldr	r2, [pc, #168]	; (800230c <HAL_TIM_Encoder_MspInit+0xc8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d14d      	bne.n	8002302 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6593      	str	r3, [r2, #88]	; 0x58
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_TIM_Encoder_MspInit+0xcc>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80022ae:	2350      	movs	r3, #80	; 0x50
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f002 fcf8 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022e2:	2302      	movs	r3, #2
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <HAL_TIM_Encoder_MspInit+0xd0>)
 80022ee:	f002 fce7 	bl	8004cc0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	201d      	movs	r0, #29
 80022f8:	f002 f97b 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022fc:	201d      	movs	r0, #29
 80022fe:	f002 f992 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40000400 	.word	0x40000400
 8002310:	40021000 	.word	0x40021000
 8002314:	48000800 	.word	0x48000800

08002318 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_TIM_MspPostInit+0xc4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d14b      	bne.n	80023d2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_TIM_MspPostInit+0xc8>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <HAL_TIM_MspPostInit+0xc8>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_TIM_MspPostInit+0xc8>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_TIM_MspPostInit+0xc8>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_TIM_MspPostInit+0xc8>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_TIM_MspPostInit+0xc8>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800236a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800237c:	2306      	movs	r3, #6
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4817      	ldr	r0, [pc, #92]	; (80023e4 <HAL_TIM_MspPostInit+0xcc>)
 8002388:	f002 fc9a 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800238c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800239e:	2304      	movs	r3, #4
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	480e      	ldr	r0, [pc, #56]	; (80023e4 <HAL_TIM_MspPostInit+0xcc>)
 80023aa:	f002 fc89 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80023ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023c0:	2306      	movs	r3, #6
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ce:	f002 fc77 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400

080023e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <MX_USART2_UART_Init+0x90>)
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <MX_USART2_UART_Init+0x94>)
 80023f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <MX_USART2_UART_Init+0x90>)
 80023f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023fa:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <MX_USART2_UART_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <MX_USART2_UART_Init+0x90>)
 800240e:	220c      	movs	r2, #12
 8002410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <MX_USART2_UART_Init+0x90>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <MX_USART2_UART_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002430:	4811      	ldr	r0, [pc, #68]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002432:	f005 fd2c 	bl	8007e8e <HAL_UART_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800243c:	f7ff fa84 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002440:	2100      	movs	r1, #0
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002444:	f007 fccf 	bl	8009de6 <HAL_UARTEx_SetTxFifoThreshold>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800244e:	f7ff fa7b 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002452:	2100      	movs	r1, #0
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002456:	f007 fd04 	bl	8009e62 <HAL_UARTEx_SetRxFifoThreshold>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002460:	f7ff fa72 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <MX_USART2_UART_Init+0x90>)
 8002466:	f007 fc85 	bl	8009d74 <HAL_UARTEx_DisableFifoMode>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002470:	f7ff fa6a 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200006b0 	.word	0x200006b0
 800247c:	40004400 	.word	0x40004400

08002480 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <MX_USART3_UART_Init+0x90>)
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <MX_USART3_UART_Init+0x94>)
 8002488:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <MX_USART3_UART_Init+0x90>)
 800248c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002490:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <MX_USART3_UART_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_USART3_UART_Init+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024c8:	4811      	ldr	r0, [pc, #68]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024ca:	f005 fce0 	bl	8007e8e <HAL_UART_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024d4:	f7ff fa38 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024dc:	f007 fc83 	bl	8009de6 <HAL_UARTEx_SetTxFifoThreshold>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80024e6:	f7ff fa2f 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ea:	2100      	movs	r1, #0
 80024ec:	4808      	ldr	r0, [pc, #32]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024ee:	f007 fcb8 	bl	8009e62 <HAL_UARTEx_SetRxFifoThreshold>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80024f8:	f7ff fa26 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <MX_USART3_UART_Init+0x90>)
 80024fe:	f007 fc39 	bl	8009d74 <HAL_UARTEx_DisableFifoMode>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002508:	f7ff fa1e 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000740 	.word	0x20000740
 8002514:	40004800 	.word	0x40004800

08002518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0a0      	sub	sp, #128	; 0x80
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	2254      	movs	r2, #84	; 0x54
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f008 fb60 	bl	800abfe <memset>
  if(uartHandle->Instance==USART2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a45      	ldr	r2, [pc, #276]	; (8002658 <HAL_UART_MspInit+0x140>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d13f      	bne.n	80025c8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002548:	2302      	movs	r3, #2
 800254a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fb59 	bl	8005c0c <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002560:	f7ff f9f2 	bl	8001948 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_UART_MspInit+0x144>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a3c      	ldr	r2, [pc, #240]	; (800265c <HAL_UART_MspInit+0x144>)
 800256a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_UART_MspInit+0x144>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_UART_MspInit+0x144>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	4a36      	ldr	r2, [pc, #216]	; (800265c <HAL_UART_MspInit+0x144>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002588:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_UART_MspInit+0x144>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002594:	230c      	movs	r3, #12
 8002596:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a4:	2307      	movs	r3, #7
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ac:	4619      	mov	r1, r3
 80025ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b2:	f002 fb85 	bl	8004cc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2026      	movs	r0, #38	; 0x26
 80025bc:	f002 f819 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025c0:	2026      	movs	r0, #38	; 0x26
 80025c2:	f002 f830 	bl	8004626 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025c6:	e043      	b.n	8002650 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a24      	ldr	r2, [pc, #144]	; (8002660 <HAL_UART_MspInit+0x148>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d13e      	bne.n	8002650 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025d2:	2304      	movs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025da:	f107 0318 	add.w	r3, r7, #24
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fb14 	bl	8005c0c <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80025ea:	f7ff f9ad 	bl	8001948 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_UART_MspInit+0x144>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_UART_MspInit+0x144>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_UART_MspInit+0x144>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_UART_MspInit+0x144>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_UART_MspInit+0x144>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_UART_MspInit+0x144>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800261e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002622:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002630:	2307      	movs	r3, #7
 8002632:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002638:	4619      	mov	r1, r3
 800263a:	480a      	ldr	r0, [pc, #40]	; (8002664 <HAL_UART_MspInit+0x14c>)
 800263c:	f002 fb40 	bl	8004cc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2027      	movs	r0, #39	; 0x27
 8002646:	f001 ffd4 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800264a:	2027      	movs	r0, #39	; 0x27
 800264c:	f001 ffeb 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 8002650:	bf00      	nop
 8002652:	3780      	adds	r7, #128	; 0x80
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40004400 	.word	0x40004400
 800265c:	40021000 	.word	0x40021000
 8002660:	40004800 	.word	0x40004800
 8002664:	48000800 	.word	0x48000800

08002668 <Shell_Init>:
int argc = 0;
char *token;
int newCmdReady = 0;
int onOffCmd;

void Shell_Init(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	memset(argv, (int) NULL, MAX_ARGS * sizeof(char*));
 800266c:	2224      	movs	r2, #36	; 0x24
 800266e:	2100      	movs	r1, #0
 8002670:	4816      	ldr	r0, [pc, #88]	; (80026cc <Shell_Init+0x64>)
 8002672:	f008 fac4 	bl	800abfe <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8002676:	2240      	movs	r2, #64	; 0x40
 8002678:	2100      	movs	r1, #0
 800267a:	4815      	ldr	r0, [pc, #84]	; (80026d0 <Shell_Init+0x68>)
 800267c:	f008 fabf 	bl	800abfe <memset>
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <Shell_Init+0x6c>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	2100      	movs	r1, #0
 800268a:	4813      	ldr	r0, [pc, #76]	; (80026d8 <Shell_Init+0x70>)
 800268c:	f008 fab7 	bl	800abfe <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002690:	2201      	movs	r2, #1
 8002692:	4910      	ldr	r1, [pc, #64]	; (80026d4 <Shell_Init+0x6c>)
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <Shell_Init+0x74>)
 8002696:	f005 fce1 	bl	800805c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char*) started), HAL_MAX_DELAY);
 800269a:	4811      	ldr	r0, [pc, #68]	; (80026e0 <Shell_Init+0x78>)
 800269c:	f7fd fe20 	bl	80002e0 <strlen>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	490d      	ldr	r1, [pc, #52]	; (80026e0 <Shell_Init+0x78>)
 80026aa:	480c      	ldr	r0, [pc, #48]	; (80026dc <Shell_Init+0x74>)
 80026ac:	f005 fc3f 	bl	8007f2e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char*) prompt), HAL_MAX_DELAY);
 80026b0:	480c      	ldr	r0, [pc, #48]	; (80026e4 <Shell_Init+0x7c>)
 80026b2:	f7fd fe15 	bl	80002e0 <strlen>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	4909      	ldr	r1, [pc, #36]	; (80026e4 <Shell_Init+0x7c>)
 80026c0:	4806      	ldr	r0, [pc, #24]	; (80026dc <Shell_Init+0x74>)
 80026c2:	f005 fc34 	bl	8007f2e <HAL_UART_Transmit>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000864 	.word	0x20000864
 80026d0:	20000820 	.word	0x20000820
 80026d4:	200007d4 	.word	0x200007d4
 80026d8:	200007d8 	.word	0x200007d8
 80026dc:	200006b0 	.word	0x200006b0
 80026e0:	20000028 	.word	0x20000028
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <Shell_Loop>:

void Shell_Loop(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
	if (uartRxReceived) {
 80026ee:	4b69      	ldr	r3, [pc, #420]	; (8002894 <Shell_Loop+0x1ac>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d05b      	beq.n	80027ae <Shell_Loop+0xc6>
		switch (uartRxBuffer[0]) {
 80026f6:	4b68      	ldr	r3, [pc, #416]	; (8002898 <Shell_Loop+0x1b0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d034      	beq.n	8002768 <Shell_Loop+0x80>
 80026fe:	2b0d      	cmp	r3, #13
 8002700:	d142      	bne.n	8002788 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	2203      	movs	r2, #3
 8002708:	4964      	ldr	r1, [pc, #400]	; (800289c <Shell_Loop+0x1b4>)
 800270a:	4865      	ldr	r0, [pc, #404]	; (80028a0 <Shell_Loop+0x1b8>)
 800270c:	f005 fc0f 	bl	8007f2e <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002710:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <Shell_Loop+0x1bc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a64      	ldr	r2, [pc, #400]	; (80028a8 <Shell_Loop+0x1c0>)
 8002716:	2100      	movs	r1, #0
 8002718:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800271a:	4b64      	ldr	r3, [pc, #400]	; (80028ac <Shell_Loop+0x1c4>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002720:	4963      	ldr	r1, [pc, #396]	; (80028b0 <Shell_Loop+0x1c8>)
 8002722:	4861      	ldr	r0, [pc, #388]	; (80028a8 <Shell_Loop+0x1c0>)
 8002724:	f008 fa74 	bl	800ac10 <strtok>
 8002728:	4603      	mov	r3, r0
 800272a:	4a62      	ldr	r2, [pc, #392]	; (80028b4 <Shell_Loop+0x1cc>)
 800272c:	6013      	str	r3, [r2, #0]
			while (token != NULL) {
 800272e:	e010      	b.n	8002752 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002730:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <Shell_Loop+0x1c4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	495d      	ldr	r1, [pc, #372]	; (80028ac <Shell_Loop+0x1c4>)
 8002738:	600a      	str	r2, [r1, #0]
 800273a:	4a5e      	ldr	r2, [pc, #376]	; (80028b4 <Shell_Loop+0x1cc>)
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	495e      	ldr	r1, [pc, #376]	; (80028b8 <Shell_Loop+0x1d0>)
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002744:	495a      	ldr	r1, [pc, #360]	; (80028b0 <Shell_Loop+0x1c8>)
 8002746:	2000      	movs	r0, #0
 8002748:	f008 fa62 	bl	800ac10 <strtok>
 800274c:	4603      	mov	r3, r0
 800274e:	4a59      	ldr	r2, [pc, #356]	; (80028b4 <Shell_Loop+0x1cc>)
 8002750:	6013      	str	r3, [r2, #0]
			while (token != NULL) {
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <Shell_Loop+0x1cc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ea      	bne.n	8002730 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800275a:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <Shell_Loop+0x1bc>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <Shell_Loop+0x1d4>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]
			break;
 8002766:	e01f      	b.n	80027a8 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002768:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <Shell_Loop+0x1bc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	494d      	ldr	r1, [pc, #308]	; (80028a4 <Shell_Loop+0x1bc>)
 8002770:	600a      	str	r2, [r1, #0]
 8002772:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <Shell_Loop+0x1c0>)
 8002774:	2100      	movs	r1, #0
 8002776:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace),
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	2204      	movs	r2, #4
 800277e:	4950      	ldr	r1, [pc, #320]	; (80028c0 <Shell_Loop+0x1d8>)
 8002780:	4847      	ldr	r0, [pc, #284]	; (80028a0 <Shell_Loop+0x1b8>)
 8002782:	f005 fbd4 	bl	8007f2e <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			break;
 8002786:	e00f      	b.n	80027a8 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <Shell_Loop+0x1bc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	4945      	ldr	r1, [pc, #276]	; (80028a4 <Shell_Loop+0x1bc>)
 8002790:	600a      	str	r2, [r1, #0]
 8002792:	4a41      	ldr	r2, [pc, #260]	; (8002898 <Shell_Loop+0x1b0>)
 8002794:	7811      	ldrb	r1, [r2, #0]
 8002796:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <Shell_Loop+0x1c0>)
 8002798:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE,
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	2201      	movs	r2, #1
 80027a0:	493d      	ldr	r1, [pc, #244]	; (8002898 <Shell_Loop+0x1b0>)
 80027a2:	483f      	ldr	r0, [pc, #252]	; (80028a0 <Shell_Loop+0x1b8>)
 80027a4:	f005 fbc3 	bl	8007f2e <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		uartRxReceived = 0;
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <Shell_Loop+0x1ac>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
	}

	if (newCmdReady) {
 80027ae:	4b43      	ldr	r3, [pc, #268]	; (80028bc <Shell_Loop+0x1d4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8129 	beq.w	8002a0a <Shell_Loop+0x322>
		if (strcmp(argv[0], "WhereisBrian?") == 0) {
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <Shell_Loop+0x1d0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4941      	ldr	r1, [pc, #260]	; (80028c4 <Shell_Loop+0x1dc>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fd2e 	bl	8000220 <strcmp>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	221a      	movs	r2, #26
 80027d0:	493d      	ldr	r1, [pc, #244]	; (80028c8 <Shell_Loop+0x1e0>)
 80027d2:	4833      	ldr	r0, [pc, #204]	; (80028a0 <Shell_Loop+0x1b8>)
 80027d4:	f005 fbab 	bl	8007f2e <HAL_UART_Transmit>
 80027d8:	e10d      	b.n	80029f6 <Shell_Loop+0x30e>
		} else if (strcmp(argv[0], "help") == 0) {
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <Shell_Loop+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	493b      	ldr	r1, [pc, #236]	; (80028cc <Shell_Loop+0x1e4>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fd1d 	bl	8000220 <strcmp>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10e      	bne.n	800280a <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char*) uartTxBuffer,
 80027ec:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <Shell_Loop+0x1e8>)
 80027ee:	2140      	movs	r1, #64	; 0x40
 80027f0:	4838      	ldr	r0, [pc, #224]	; (80028d4 <Shell_Loop+0x1ec>)
 80027f2:	f008 f98d 	bl	800ab10 <sniprintf>
 80027f6:	6038      	str	r0, [r7, #0]
			UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength,
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	4934      	ldr	r1, [pc, #208]	; (80028d4 <Shell_Loop+0x1ec>)
 8002802:	4827      	ldr	r0, [pc, #156]	; (80028a0 <Shell_Loop+0x1b8>)
 8002804:	f005 fb93 	bl	8007f2e <HAL_UART_Transmit>
 8002808:	e0f5      	b.n	80029f6 <Shell_Loop+0x30e>
			HAL_MAX_DELAY);
		} else if (strcmp(argv[0], "start") == 0) {
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <Shell_Loop+0x1d0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4932      	ldr	r1, [pc, #200]	; (80028d8 <Shell_Loop+0x1f0>)
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fd05 	bl	8000220 <strcmp>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d118      	bne.n	800284e <Shell_Loop+0x166>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800281c:	2100      	movs	r1, #0
 800281e:	482f      	ldr	r0, [pc, #188]	; (80028dc <Shell_Loop+0x1f4>)
 8002820:	f003 fcfa 	bl	8006218 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002824:	2100      	movs	r1, #0
 8002826:	482d      	ldr	r0, [pc, #180]	; (80028dc <Shell_Loop+0x1f4>)
 8002828:	f005 f85e 	bl	80078e8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800282c:	2104      	movs	r1, #4
 800282e:	482b      	ldr	r0, [pc, #172]	; (80028dc <Shell_Loop+0x1f4>)
 8002830:	f003 fcf2 	bl	8006218 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002834:	2104      	movs	r1, #4
 8002836:	4829      	ldr	r0, [pc, #164]	; (80028dc <Shell_Loop+0x1f4>)
 8002838:	f005 f856 	bl	80078e8 <HAL_TIMEx_PWMN_Start>
			order_speed = 50;
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <Shell_Loop+0x1f8>)
 800283e:	2232      	movs	r2, #50	; 0x32
 8002840:	601a      	str	r2, [r3, #0]
			set_motor_speed(order_speed);
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <Shell_Loop+0x1f8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f886 	bl	8001958 <set_motor_speed>
 800284c:	e0d3      	b.n	80029f6 <Shell_Loop+0x30e>
		} else if (strcmp(argv[0], "stop") == 0) {
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <Shell_Loop+0x1d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4924      	ldr	r1, [pc, #144]	; (80028e4 <Shell_Loop+0x1fc>)
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fce3 	bl	8000220 <strcmp>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d143      	bne.n	80028e8 <Shell_Loop+0x200>
			order_speed = 50;
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <Shell_Loop+0x1f8>)
 8002862:	2232      	movs	r2, #50	; 0x32
 8002864:	601a      	str	r2, [r3, #0]
			set_motor_speed(order_speed);
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <Shell_Loop+0x1f8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f874 	bl	8001958 <set_motor_speed>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002870:	2100      	movs	r1, #0
 8002872:	481a      	ldr	r0, [pc, #104]	; (80028dc <Shell_Loop+0x1f4>)
 8002874:	f003 fde2 	bl	800643c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002878:	2100      	movs	r1, #0
 800287a:	4818      	ldr	r0, [pc, #96]	; (80028dc <Shell_Loop+0x1f4>)
 800287c:	f005 f8f6 	bl	8007a6c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002880:	2104      	movs	r1, #4
 8002882:	4816      	ldr	r0, [pc, #88]	; (80028dc <Shell_Loop+0x1f4>)
 8002884:	f003 fdda 	bl	800643c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002888:	2104      	movs	r1, #4
 800288a:	4814      	ldr	r0, [pc, #80]	; (80028dc <Shell_Loop+0x1f4>)
 800288c:	f005 f8ee 	bl	8007a6c <HAL_TIMEx_PWMN_Stop>
 8002890:	e0b1      	b.n	80029f6 <Shell_Loop+0x30e>
 8002892:	bf00      	nop
 8002894:	200007d0 	.word	0x200007d0
 8002898:	200007d4 	.word	0x200007d4
 800289c:	20000090 	.word	0x20000090
 80028a0:	200006b0 	.word	0x200006b0
 80028a4:	20000860 	.word	0x20000860
 80028a8:	20000820 	.word	0x20000820
 80028ac:	20000888 	.word	0x20000888
 80028b0:	0800cec8 	.word	0x0800cec8
 80028b4:	2000088c 	.word	0x2000088c
 80028b8:	20000864 	.word	0x20000864
 80028bc:	20000890 	.word	0x20000890
 80028c0:	20000094 	.word	0x20000094
 80028c4:	0800cecc 	.word	0x0800cecc
 80028c8:	200000ac 	.word	0x200000ac
 80028cc:	0800cedc 	.word	0x0800cedc
 80028d0:	0800cee4 	.word	0x0800cee4
 80028d4:	200007d8 	.word	0x200007d8
 80028d8:	0800cf0c 	.word	0x0800cf0c
 80028dc:	200005cc 	.word	0x200005cc
 80028e0:	20000818 	.word	0x20000818
 80028e4:	0800cf14 	.word	0x0800cf14
		} else if (strcmp(argv[0], "speed") == 0) {
 80028e8:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <Shell_Loop+0x32c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	494a      	ldr	r1, [pc, #296]	; (8002a18 <Shell_Loop+0x330>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fc96 	bl	8000220 <strcmp>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d176      	bne.n	80029e8 <Shell_Loop+0x300>
			if (atoi(argv[1]) > MAX_SPEED_HIGH) {
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <Shell_Loop+0x32c>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	f007 fb3c 	bl	8009f7c <atoi>
 8002904:	4603      	mov	r3, r0
 8002906:	2b50      	cmp	r3, #80	; 0x50
 8002908:	dd15      	ble.n	8002936 <Shell_Loop+0x24e>
				int uartTxStringLength = snprintf((char*) uartTxBuffer,
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <Shell_Loop+0x334>)
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	4844      	ldr	r0, [pc, #272]	; (8002a20 <Shell_Loop+0x338>)
 8002910:	f008 f8fe 	bl	800ab10 <sniprintf>
 8002914:	60f8      	str	r0, [r7, #12]
				UART_TX_BUFFER_SIZE,
						"Input speed superior to maximum speed.\r\n");
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength,
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	b29a      	uxth	r2, r3
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	4940      	ldr	r1, [pc, #256]	; (8002a20 <Shell_Loop+0x338>)
 8002920:	4840      	ldr	r0, [pc, #256]	; (8002a24 <Shell_Loop+0x33c>)
 8002922:	f005 fb04 	bl	8007f2e <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				order_speed = MAX_SPEED_HIGH;
 8002926:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <Shell_Loop+0x340>)
 8002928:	2250      	movs	r2, #80	; 0x50
 800292a:	601a      	str	r2, [r3, #0]
				set_motor_speed(order_speed);
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <Shell_Loop+0x340>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f811 	bl	8001958 <set_motor_speed>
			}
			if (atoi(argv[1]) < MAX_SPEED_LOW) {
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <Shell_Loop+0x32c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4618      	mov	r0, r3
 800293c:	f007 fb1e 	bl	8009f7c <atoi>
 8002940:	4603      	mov	r3, r0
 8002942:	2b13      	cmp	r3, #19
 8002944:	dc15      	bgt.n	8002972 <Shell_Loop+0x28a>
				int uartTxStringLength = snprintf((char*) uartTxBuffer,
 8002946:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <Shell_Loop+0x334>)
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	4835      	ldr	r0, [pc, #212]	; (8002a20 <Shell_Loop+0x338>)
 800294c:	f008 f8e0 	bl	800ab10 <sniprintf>
 8002950:	60b8      	str	r0, [r7, #8]
				UART_TX_BUFFER_SIZE,
						"Input speed superior to maximum speed.\r\n");
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength,
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	b29a      	uxth	r2, r3
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	4931      	ldr	r1, [pc, #196]	; (8002a20 <Shell_Loop+0x338>)
 800295c:	4831      	ldr	r0, [pc, #196]	; (8002a24 <Shell_Loop+0x33c>)
 800295e:	f005 fae6 	bl	8007f2e <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				order_speed = MAX_SPEED_LOW;
 8002962:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <Shell_Loop+0x340>)
 8002964:	2214      	movs	r2, #20
 8002966:	601a      	str	r2, [r3, #0]
				set_motor_speed(order_speed);
 8002968:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <Shell_Loop+0x340>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fff3 	bl	8001958 <set_motor_speed>
			}
			order_speed = atoi(argv[1]);
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <Shell_Loop+0x32c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f007 fb00 	bl	8009f7c <atoi>
 800297c:	4603      	mov	r3, r0
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <Shell_Loop+0x340>)
 8002980:	6013      	str	r3, [r2, #0]
			set_motor_speed(order_speed);
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <Shell_Loop+0x340>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ffe6 	bl	8001958 <set_motor_speed>
//			set_motor_speed(order_alpha); // corrected speed but we didn't have time to make tests with the motor
			if (speed_flag) {
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <Shell_Loop+0x344>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00c      	beq.n	80029ae <Shell_Loop+0x2c6>
				printf("Vitesse du moteur : %f tours/minute\r\n",
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <Shell_Loop+0x348>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fe0d 	bl	80005b8 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4824      	ldr	r0, [pc, #144]	; (8002a34 <Shell_Loop+0x34c>)
 80029a4:	f008 f8a2 	bl	800aaec <iprintf>
						measured_speed); // printf enables to retrieve strings on the UART terminal as some lines have been added to the stm32g4xx_hal_msp.c file
				speed_flag = 0;
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <Shell_Loop+0x344>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
			}
			if (current_flag) {
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <Shell_Loop+0x350>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01f      	beq.n	80029f6 <Shell_Loop+0x30e>
				uint32_t voltage = ADC_buffer[0];
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <Shell_Loop+0x354>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	607b      	str	r3, [r7, #4]
				current = compute_current(voltage);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe fd23 	bl	8001408 <compute_current>
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <Shell_Loop+0x358>)
 80029c8:	edc3 7a00 	vstr	s15, [r3]
				printf("Valeur du courant : %f A\r\n", current);
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <Shell_Loop+0x358>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fdf1 	bl	80005b8 <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	481a      	ldr	r0, [pc, #104]	; (8002a44 <Shell_Loop+0x35c>)
 80029dc:	f008 f886 	bl	800aaec <iprintf>
				current_flag = 0;
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <Shell_Loop+0x350>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e006      	b.n	80029f6 <Shell_Loop+0x30e>
			}
		} else {
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound),
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ec:	2214      	movs	r2, #20
 80029ee:	4916      	ldr	r1, [pc, #88]	; (8002a48 <Shell_Loop+0x360>)
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <Shell_Loop+0x33c>)
 80029f2:	f005 fa9c 	bl	8007f2e <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	221c      	movs	r2, #28
 80029fc:	4913      	ldr	r1, [pc, #76]	; (8002a4c <Shell_Loop+0x364>)
 80029fe:	4809      	ldr	r0, [pc, #36]	; (8002a24 <Shell_Loop+0x33c>)
 8002a00:	f005 fa95 	bl	8007f2e <HAL_UART_Transmit>
		newCmdReady = 0;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <Shell_Loop+0x368>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
	}
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000864 	.word	0x20000864
 8002a18:	0800cf1c 	.word	0x0800cf1c
 8002a1c:	0800cf24 	.word	0x0800cf24
 8002a20:	200007d8 	.word	0x200007d8
 8002a24:	200006b0 	.word	0x200006b0
 8002a28:	20000818 	.word	0x20000818
 8002a2c:	200005a1 	.word	0x200005a1
 8002a30:	200005b4 	.word	0x200005b4
 8002a34:	0800cf50 	.word	0x0800cf50
 8002a38:	200005a0 	.word	0x200005a0
 8002a3c:	2000059c 	.word	0x2000059c
 8002a40:	2000081c 	.word	0x2000081c
 8002a44:	0800cf78 	.word	0x0800cf78
 8002a48:	20000098 	.word	0x20000098
 8002a4c:	2000000c 	.word	0x2000000c
 8002a50:	20000890 	.word	0x20000890

08002a54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_UART_RxCpltCallback+0x20>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002a62:	2201      	movs	r2, #1
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <HAL_UART_RxCpltCallback+0x24>)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <HAL_UART_RxCpltCallback+0x28>)
 8002a68:	f005 faf8 	bl	800805c <HAL_UART_Receive_IT>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200007d0 	.word	0x200007d0
 8002a78:	200007d4 	.word	0x200007d4
 8002a7c:	200006b0 	.word	0x200006b0

08002a80 <Reset_Handler>:
 8002a80:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <LoopForever+0x2>)
 8002a82:	4685      	mov	sp, r0
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <LoopForever+0x6>)
 8002a86:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <LoopForever+0xa>)
 8002a88:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <LoopForever+0xe>)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e002      	b.n	8002a94 <LoopCopyDataInit>

08002a8e <CopyDataInit>:
 8002a8e:	58d4      	ldr	r4, [r2, r3]
 8002a90:	50c4      	str	r4, [r0, r3]
 8002a92:	3304      	adds	r3, #4

08002a94 <LoopCopyDataInit>:
 8002a94:	18c4      	adds	r4, r0, r3
 8002a96:	428c      	cmp	r4, r1
 8002a98:	d3f9      	bcc.n	8002a8e <CopyDataInit>
 8002a9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <LoopForever+0x12>)
 8002a9c:	4c0b      	ldr	r4, [pc, #44]	; (8002acc <LoopForever+0x16>)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e001      	b.n	8002aa6 <LoopFillZerobss>

08002aa2 <FillZerobss>:
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	3204      	adds	r2, #4

08002aa6 <LoopFillZerobss>:
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	d3fb      	bcc.n	8002aa2 <FillZerobss>
 8002aaa:	f7ff fa2d 	bl	8001f08 <SystemInit>
 8002aae:	f008 f95b 	bl	800ad68 <__libc_init_array>
 8002ab2:	f7fe fe4b 	bl	800174c <main>

08002ab6 <LoopForever>:
 8002ab6:	e7fe      	b.n	8002ab6 <LoopForever>
 8002ab8:	20020000 	.word	0x20020000
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000298 	.word	0x20000298
 8002ac4:	0800d3b0 	.word	0x0800d3b0
 8002ac8:	20000298 	.word	0x20000298
 8002acc:	200009e4 	.word	0x200009e4

08002ad0 <ADC1_2_IRQHandler>:
 8002ad0:	e7fe      	b.n	8002ad0 <ADC1_2_IRQHandler>

08002ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002adc:	2003      	movs	r0, #3
 8002ade:	f001 fd7d 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f000 f80e 	bl	8002b04 <HAL_InitTick>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	71fb      	strb	r3, [r7, #7]
 8002af2:	e001      	b.n	8002af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002af4:	f7ff f852 	bl	8001b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002af8:	79fb      	ldrb	r3, [r7, #7]

}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_InitTick+0x68>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_InitTick+0x6c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_InitTick+0x68>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 fd88 	bl	8004642 <HAL_SYSTICK_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10f      	bne.n	8002b58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	d809      	bhi.n	8002b52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	f04f 30ff 	mov.w	r0, #4294967295
 8002b46:	f001 fd54 	bl	80045f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_InitTick+0x70>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e007      	b.n	8002b62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e004      	b.n	8002b62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e001      	b.n	8002b62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200000cc 	.word	0x200000cc
 8002b70:	20000008 	.word	0x20000008
 8002b74:	200000c8 	.word	0x200000c8

08002b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_IncTick+0x1c>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_IncTick+0x20>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_IncTick+0x1c>)
 8002b88:	6013      	str	r3, [r2, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	20000894 	.word	0x20000894
 8002b98:	200000cc 	.word	0x200000cc

08002b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_GetTick+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000894 	.word	0x20000894

08002bb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <LL_ADC_SetOffset+0x44>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	03fff000 	.word	0x03fff000

08002c64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	461a      	mov	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3360      	adds	r3, #96	; 0x60
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3360      	adds	r3, #96	; 0x60
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	615a      	str	r2, [r3, #20]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3330      	adds	r3, #48	; 0x30
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	4413      	add	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	211f      	movs	r1, #31
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	401a      	ands	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 011f 	and.w	r1, r3, #31
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b087      	sub	sp, #28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3314      	adds	r3, #20
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0e5b      	lsrs	r3, r3, #25
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0d1b      	lsrs	r3, r3, #20
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2107      	movs	r1, #7
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0d1b      	lsrs	r3, r3, #20
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10a      	bne.n	8002e56 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002e54:	e00a      	b.n	8002e6c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	407f0000 	.word	0x407f0000

08002e7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 031f 	and.w	r3, r3, #31
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6093      	str	r3, [r2, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed0:	d101      	bne.n	8002ed6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f20:	d101      	bne.n	8002f26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f70:	f043 0202 	orr.w	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <LL_ADC_IsEnabled+0x18>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <LL_ADC_IsEnabled+0x1a>
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d101      	bne.n	8002fc2 <LL_ADC_IsDisableOngoing+0x18>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <LL_ADC_IsDisableOngoing+0x1a>
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d101      	bne.n	8003010 <LL_ADC_REG_IsConversionOngoing+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d101      	bne.n	8003036 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b089      	sub	sp, #36	; 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1af      	b.n	80033be <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fe f8a1 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff19 	bl	8002ebc <LL_ADC_IsDeepPowerDownEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff feff 	bl	8002e98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff34 	bl	8002f0c <LL_ADC_IsInternalRegulatorEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff18 	bl	8002ee4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030b4:	4b9f      	ldr	r3, [pc, #636]	; (8003334 <HAL_ADC_Init+0x2f0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	4a9f      	ldr	r2, [pc, #636]	; (8003338 <HAL_ADC_Init+0x2f4>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f9      	bne.n	80030ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff16 	bl	8002f0c <LL_ADC_IsInternalRegulatorEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff76 	bl	8002ff8 <LL_ADC_REG_IsConversionOngoing>
 800310c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 8148 	bne.w	80033ac <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 8144 	bne.w	80033ac <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800312c:	f043 0202 	orr.w	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff23 	bl	8002f84 <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d141      	bne.n	80031c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314c:	d004      	beq.n	8003158 <HAL_ADC_Init+0x114>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7a      	ldr	r2, [pc, #488]	; (800333c <HAL_ADC_Init+0x2f8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10f      	bne.n	8003178 <HAL_ADC_Init+0x134>
 8003158:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800315c:	f7ff ff12 	bl	8002f84 <LL_ADC_IsEnabled>
 8003160:	4604      	mov	r4, r0
 8003162:	4876      	ldr	r0, [pc, #472]	; (800333c <HAL_ADC_Init+0x2f8>)
 8003164:	f7ff ff0e 	bl	8002f84 <LL_ADC_IsEnabled>
 8003168:	4603      	mov	r3, r0
 800316a:	4323      	orrs	r3, r4
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e012      	b.n	800319e <HAL_ADC_Init+0x15a>
 8003178:	4871      	ldr	r0, [pc, #452]	; (8003340 <HAL_ADC_Init+0x2fc>)
 800317a:	f7ff ff03 	bl	8002f84 <LL_ADC_IsEnabled>
 800317e:	4604      	mov	r4, r0
 8003180:	4870      	ldr	r0, [pc, #448]	; (8003344 <HAL_ADC_Init+0x300>)
 8003182:	f7ff feff 	bl	8002f84 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	431c      	orrs	r4, r3
 800318a:	486f      	ldr	r0, [pc, #444]	; (8003348 <HAL_ADC_Init+0x304>)
 800318c:	f7ff fefa 	bl	8002f84 <LL_ADC_IsEnabled>
 8003190:	4603      	mov	r3, r0
 8003192:	4323      	orrs	r3, r4
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031aa:	d004      	beq.n	80031b6 <HAL_ADC_Init+0x172>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a62      	ldr	r2, [pc, #392]	; (800333c <HAL_ADC_Init+0x2f8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Init+0x176>
 80031b6:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_ADC_Init+0x308>)
 80031b8:	e000      	b.n	80031bc <HAL_ADC_Init+0x178>
 80031ba:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_ADC_Init+0x30c>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f7ff fcf6 	bl	8002bb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7f5b      	ldrb	r3, [r3, #29]
 80031cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d106      	bne.n	8003204 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	045b      	lsls	r3, r3, #17
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_ADC_Init+0x310>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	430b      	orrs	r3, r1
 8003232:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fed2 	bl	8002ff8 <LL_ADC_REG_IsConversionOngoing>
 8003254:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fedf 	bl	800301e <LL_ADC_INJ_IsConversionOngoing>
 8003260:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d17f      	bne.n	8003368 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d17c      	bne.n	8003368 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003272:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800327a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800328a:	f023 0302 	bic.w	r3, r3, #2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	430b      	orrs	r3, r1
 8003296:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d017      	beq.n	80032d0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6911      	ldr	r1, [r2, #16]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80032ce:	e013      	b.n	80032f8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d12a      	bne.n	8003358 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003324:	430a      	orrs	r2, r1
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	e019      	b.n	8003368 <HAL_ADC_Init+0x324>
 8003334:	20000008 	.word	0x20000008
 8003338:	053e2d63 	.word	0x053e2d63
 800333c:	50000100 	.word	0x50000100
 8003340:	50000400 	.word	0x50000400
 8003344:	50000500 	.word	0x50000500
 8003348:	50000600 	.word	0x50000600
 800334c:	50000300 	.word	0x50000300
 8003350:	50000700 	.word	0x50000700
 8003354:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d10c      	bne.n	800338a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f023 010f 	bic.w	r1, r3, #15
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
 8003388:	e007      	b.n	800339a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 020f 	bic.w	r2, r2, #15
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033aa:	e007      	b.n	80033bc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	bf00      	nop

080033c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d004      	beq.n	80033e8 <HAL_ADC_Start_DMA+0x20>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5a      	ldr	r2, [pc, #360]	; (800354c <HAL_ADC_Start_DMA+0x184>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_Start_DMA+0x24>
 80033e8:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_ADC_Start_DMA+0x188>)
 80033ea:	e000      	b.n	80033ee <HAL_ADC_Start_DMA+0x26>
 80033ec:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_ADC_Start_DMA+0x18c>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fd44 	bl	8002e7c <LL_ADC_GetMultimode>
 80033f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fdfc 	bl	8002ff8 <LL_ADC_REG_IsConversionOngoing>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 809b 	bne.w	800353e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Start_DMA+0x4e>
 8003412:	2302      	movs	r3, #2
 8003414:	e096      	b.n	8003544 <HAL_ADC_Start_DMA+0x17c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <HAL_ADC_Start_DMA+0x190>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d008      	beq.n	800343a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d002      	beq.n	800343a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b09      	cmp	r3, #9
 8003438:	d17a      	bne.n	8003530 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fcec 	bl	8003e18 <ADC_Enable>
 8003440:	4603      	mov	r3, r0
 8003442:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d16d      	bne.n	8003526 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a3a      	ldr	r2, [pc, #232]	; (800354c <HAL_ADC_Start_DMA+0x184>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_ADC_Start_DMA+0xb4>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_ADC_Start_DMA+0x194>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d002      	beq.n	8003478 <HAL_ADC_Start_DMA+0xb0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e003      	b.n	8003480 <HAL_ADC_Start_DMA+0xb8>
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_ADC_Start_DMA+0x198>)
 800347a:	e001      	b.n	8003480 <HAL_ADC_Start_DMA+0xb8>
 800347c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	4293      	cmp	r3, r2
 8003486:	d002      	beq.n	800348e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	f023 0206 	bic.w	r2, r3, #6
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60
 80034b2:	e002      	b.n	80034ba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_ADC_Start_DMA+0x19c>)
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_ADC_Start_DMA+0x1a0>)
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_ADC_Start_DMA+0x1a4>)
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	221c      	movs	r2, #28
 80034d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0210 	orr.w	r2, r2, #16
 80034f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3340      	adds	r3, #64	; 0x40
 800350c:	4619      	mov	r1, r3
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f001 f94b 	bl	80047ac <HAL_DMA_Start_IT>
 8003516:	4603      	mov	r3, r0
 8003518:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fd56 	bl	8002fd0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003524:	e00d      	b.n	8003542 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800352e:	e008      	b.n	8003542 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800353c:	e001      	b.n	8003542 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	50000100 	.word	0x50000100
 8003550:	50000300 	.word	0x50000300
 8003554:	50000700 	.word	0x50000700
 8003558:	50000600 	.word	0x50000600
 800355c:	50000500 	.word	0x50000500
 8003560:	50000400 	.word	0x50000400
 8003564:	08003f9b 	.word	0x08003f9b
 8003568:	08004073 	.word	0x08004073
 800356c:	0800408f 	.word	0x0800408f

08003570 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0b6      	sub	sp, #216	; 0xd8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d102      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x24>
 80035b6:	2302      	movs	r3, #2
 80035b8:	f000 bc13 	b.w	8003de2 <HAL_ADC_ConfigChannel+0x84a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fd15 	bl	8002ff8 <LL_ADC_REG_IsConversionOngoing>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 83f3 	bne.w	8003dbc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f7ff fbcb 	bl	8002d7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fd03 	bl	8002ff8 <LL_ADC_REG_IsConversionOngoing>
 80035f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fd0f 	bl	800301e <LL_ADC_INJ_IsConversionOngoing>
 8003600:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 81d9 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800360e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 81d4 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003620:	d10f      	bne.n	8003642 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	f7ff fbd2 	bl	8002dd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fb79 	bl	8002d32 <LL_ADC_SetSamplingTimeCommonConfig>
 8003640:	e00e      	b.n	8003660 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	461a      	mov	r2, r3
 8003650:	f7ff fbc1 	bl	8002dd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fb69 	bl	8002d32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	08db      	lsrs	r3, r3, #3
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d022      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003692:	f7ff fac3 	bl	8002c1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6919      	ldr	r1, [r3, #16]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f7ff fb0f 	bl	8002cc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6919      	ldr	r1, [r3, #16]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	7f1b      	ldrb	r3, [r3, #28]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d102      	bne.n	80036be <HAL_ADC_ConfigChannel+0x126>
 80036b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036bc:	e000      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x128>
 80036be:	2300      	movs	r3, #0
 80036c0:	461a      	mov	r2, r3
 80036c2:	f7ff fb1b 	bl	8002cfc <LL_ADC_SetOffsetSaturation>
 80036c6:	e17b      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fac8 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x15c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fabd 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	f003 021f 	and.w	r2, r3, #31
 80036f2:	e01e      	b.n	8003732 <HAL_ADC_ConfigChannel+0x19a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fab2 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800371a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003722:	2320      	movs	r3, #32
 8003724:	e004      	b.n	8003730 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_ADC_ConfigChannel+0x1b2>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0e9b      	lsrs	r3, r3, #26
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	e018      	b.n	800377c <HAL_ADC_ConfigChannel+0x1e4>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800375e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e004      	b.n	800377c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800377c:	429a      	cmp	r2, r3
 800377e:	d106      	bne.n	800378e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fa81 	bl	8002c90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fa65 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 800379a:	4603      	mov	r3, r0
 800379c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x222>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fa5a 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 80037b0:	4603      	mov	r3, r0
 80037b2:	0e9b      	lsrs	r3, r3, #26
 80037b4:	f003 021f 	and.w	r2, r3, #31
 80037b8:	e01e      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x260>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fa4f 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037e8:	2320      	movs	r3, #32
 80037ea:	e004      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x278>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	e018      	b.n	8003842 <HAL_ADC_ConfigChannel+0x2aa>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800382c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e004      	b.n	8003842 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003842:	429a      	cmp	r2, r3
 8003844:	d106      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	2101      	movs	r1, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fa1e 	bl	8002c90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fa02 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 8003860:	4603      	mov	r3, r0
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x2e8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2102      	movs	r1, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff f9f7 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	f003 021f 	and.w	r2, r3, #31
 800387e:	e01e      	b.n	80038be <HAL_ADC_ConfigChannel+0x326>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2102      	movs	r1, #2
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f9ec 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800389e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e004      	b.n	80038bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x33e>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	0e9b      	lsrs	r3, r3, #26
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	e016      	b.n	8003904 <HAL_ADC_ConfigChannel+0x36c>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e004      	b.n	8003904 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80038fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003904:	429a      	cmp	r2, r3
 8003906:	d106      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f9bd 	bl	8002c90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2103      	movs	r1, #3
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f9a1 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 8003922:	4603      	mov	r3, r0
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x3aa>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2103      	movs	r1, #3
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f996 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	e017      	b.n	8003972 <HAL_ADC_ConfigChannel+0x3da>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2103      	movs	r1, #3
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f98b 	bl	8002c64 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800395a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800395c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800395e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003964:	2320      	movs	r3, #32
 8003966:	e003      	b.n	8003970 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_ADC_ConfigChannel+0x3f2>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	e011      	b.n	80039ae <HAL_ADC_ConfigChannel+0x416>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039a2:	2320      	movs	r3, #32
 80039a4:	e003      	b.n	80039ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d106      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	2103      	movs	r1, #3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f968 	bl	8002c90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fadd 	bl	8002f84 <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 813d 	bne.w	8003c4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7ff fa24 	bl	8002e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4aa2      	ldr	r2, [pc, #648]	; (8003c74 <HAL_ADC_ConfigChannel+0x6dc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f040 812e 	bne.w	8003c4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x480>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	3301      	adds	r3, #1
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e019      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x4b4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	bf94      	ite	ls
 8003a46:	2301      	movls	r3, #1
 8003a48:	2300      	movhi	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d079      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x4d4>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e9b      	lsrs	r3, r3, #26
 8003a62:	3301      	adds	r3, #1
 8003a64:	069b      	lsls	r3, r3, #26
 8003a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6a:	e015      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x500>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	e003      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3301      	adds	r3, #1
 8003a92:	069b      	lsls	r3, r3, #26
 8003a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x520>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	e017      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x550>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	ea42 0103 	orr.w	r1, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x576>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	051b      	lsls	r3, r3, #20
 8003b0c:	e018      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x5a8>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b26:	2320      	movs	r3, #32
 8003b28:	e003      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b40:	430b      	orrs	r3, r1
 8003b42:	e07e      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x5c8>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	3301      	adds	r3, #1
 8003b58:	069b      	lsls	r3, r3, #26
 8003b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b5e:	e015      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x5f4>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x614>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	e017      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x644>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x670>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b1e      	subs	r3, #30
 8003c00:	051b      	lsls	r3, r3, #20
 8003c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c06:	e01b      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x6a8>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	613b      	str	r3, [r7, #16]
  return result;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c20:	2320      	movs	r3, #32
 8003c22:	e003      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f003 021f 	and.w	r2, r3, #31
 8003c32:	4613      	mov	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	3b1e      	subs	r3, #30
 8003c3a:	051b      	lsls	r3, r3, #20
 8003c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	430b      	orrs	r3, r1
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7ff f8c5 	bl	8002dd6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80be 	beq.w	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c62:	d004      	beq.n	8003c6e <HAL_ADC_ConfigChannel+0x6d6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_ADC_ConfigChannel+0x6e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10a      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x6ec>
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c70:	e009      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x6ee>
 8003c72:	bf00      	nop
 8003c74:	407f0000 	.word	0x407f0000
 8003c78:	80080000 	.word	0x80080000
 8003c7c:	50000100 	.word	0x50000100
 8003c80:	50000300 	.word	0x50000300
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_ADC_ConfigChannel+0x854>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe ffba 	bl	8002c00 <LL_ADC_GetCommonPathInternalCh>
 8003c8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a56      	ldr	r2, [pc, #344]	; (8003df0 <HAL_ADC_ConfigChannel+0x858>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d004      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x70c>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a55      	ldr	r2, [pc, #340]	; (8003df4 <HAL_ADC_ConfigChannel+0x85c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d13a      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d134      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb8:	d005      	beq.n	8003cc6 <HAL_ADC_ConfigChannel+0x72e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a4e      	ldr	r2, [pc, #312]	; (8003df8 <HAL_ADC_ConfigChannel+0x860>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	f040 8085 	bne.w	8003dd0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cce:	d004      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x742>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a49      	ldr	r2, [pc, #292]	; (8003dfc <HAL_ADC_ConfigChannel+0x864>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x746>
 8003cda:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_ADC_ConfigChannel+0x868>)
 8003cdc:	e000      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x748>
 8003cde:	4a43      	ldr	r2, [pc, #268]	; (8003dec <HAL_ADC_ConfigChannel+0x854>)
 8003ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fe ff75 	bl	8002bda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf0:	4b44      	ldr	r3, [pc, #272]	; (8003e04 <HAL_ADC_ConfigChannel+0x86c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	4a44      	ldr	r2, [pc, #272]	; (8003e08 <HAL_ADC_ConfigChannel+0x870>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d0a:	e002      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f9      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d18:	e05a      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3b      	ldr	r2, [pc, #236]	; (8003e0c <HAL_ADC_ConfigChannel+0x874>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d125      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x7d8>
 8003d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11f      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <HAL_ADC_ConfigChannel+0x864>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d104      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x7ac>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a34      	ldr	r2, [pc, #208]	; (8003e10 <HAL_ADC_ConfigChannel+0x878>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d047      	beq.n	8003dd4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4c:	d004      	beq.n	8003d58 <HAL_ADC_ConfigChannel+0x7c0>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <HAL_ADC_ConfigChannel+0x864>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x7c4>
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <HAL_ADC_ConfigChannel+0x868>)
 8003d5a:	e000      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x7c6>
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_ADC_ConfigChannel+0x854>)
 8003d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d66:	4619      	mov	r1, r3
 8003d68:	4610      	mov	r0, r2
 8003d6a:	f7fe ff36 	bl	8002bda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d6e:	e031      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_ADC_ConfigChannel+0x87c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d12d      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d127      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_ADC_ConfigChannel+0x864>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d98:	d004      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x80c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <HAL_ADC_ConfigChannel+0x864>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x810>
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_ADC_ConfigChannel+0x868>)
 8003da6:	e000      	b.n	8003daa <HAL_ADC_ConfigChannel+0x812>
 8003da8:	4a10      	ldr	r2, [pc, #64]	; (8003dec <HAL_ADC_ConfigChannel+0x854>)
 8003daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe ff10 	bl	8002bda <LL_ADC_SetCommonPathInternalCh>
 8003dba:	e00c      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003dce:	e002      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	37d8      	adds	r7, #216	; 0xd8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	50000700 	.word	0x50000700
 8003df0:	c3210000 	.word	0xc3210000
 8003df4:	90c00010 	.word	0x90c00010
 8003df8:	50000600 	.word	0x50000600
 8003dfc:	50000100 	.word	0x50000100
 8003e00:	50000300 	.word	0x50000300
 8003e04:	20000008 	.word	0x20000008
 8003e08:	053e2d63 	.word	0x053e2d63
 8003e0c:	c7520000 	.word	0xc7520000
 8003e10:	50000500 	.word	0x50000500
 8003e14:	cb840000 	.word	0xcb840000

08003e18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f8ad 	bl	8002f84 <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d14d      	bne.n	8003ecc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <ADC_Enable+0xc0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e039      	b.n	8003ece <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f868 	bl	8002f34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e64:	f7fe fe9a 	bl	8002b9c <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e6a:	e028      	b.n	8003ebe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f887 	bl	8002f84 <LL_ADC_IsEnabled>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff f857 	bl	8002f34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e86:	f7fe fe89 	bl	8002b9c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d914      	bls.n	8003ebe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d00d      	beq.n	8003ebe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e007      	b.n	8003ece <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d1cf      	bne.n	8003e6c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	8000003f 	.word	0x8000003f

08003edc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f85e 	bl	8002faa <LL_ADC_IsDisableOngoing>
 8003eee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f845 	bl	8002f84 <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d047      	beq.n	8003f90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d144      	bne.n	8003f90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030d 	and.w	r3, r3, #13
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10c      	bne.n	8003f2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff f81f 	bl	8002f5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2203      	movs	r2, #3
 8003f24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f26:	f7fe fe39 	bl	8002b9c <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f2c:	e029      	b.n	8003f82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	f043 0210 	orr.w	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e023      	b.n	8003f92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f4a:	f7fe fe27 	bl	8002b9c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d914      	bls.n	8003f82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e007      	b.n	8003f92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1dc      	bne.n	8003f4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d14b      	bne.n	800404c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d021      	beq.n	8004012 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fec0 	bl	8002d58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d032      	beq.n	8004044 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d12b      	bne.n	8004044 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11f      	bne.n	8004044 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004010:	e018      	b.n	8004044 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d111      	bne.n	8004044 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7fd fc1d 	bl	8001884 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800404a:	e00e      	b.n	800406a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7ff fa93 	bl	8003584 <HAL_ADC_ErrorCallback>
}
 800405e:	e004      	b.n	800406a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fa75 	bl	8003570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff fa65 	bl	8003584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <LL_ADC_IsEnabled>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <LL_ADC_IsEnabled+0x18>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <LL_ADC_IsEnabled+0x1a>
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_StartCalibration>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80040fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004104:	4313      	orrs	r3, r2
 8004106:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_ADC_IsCalibrationOnGoing>:
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800412a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800412e:	d101      	bne.n	8004134 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_REG_IsConversionOngoing>:
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d101      	bne.n	800415a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_ADCEx_Calibration_Start+0x1c>
 8004180:	2302      	movs	r3, #2
 8004182:	e04d      	b.n	8004220 <HAL_ADCEx_Calibration_Start+0xb8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fea5 	bl	8003edc <ADC_Disable>
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d136      	bne.n	800420a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041a4:	f023 0302 	bic.w	r3, r3, #2
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6839      	ldr	r1, [r7, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff96 	bl	80040e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041bc:	e014      	b.n	80041e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_ADCEx_Calibration_Start+0xc0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d90d      	bls.n	80041e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f023 0312 	bic.w	r3, r3, #18
 80041d4:	f043 0210 	orr.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e01b      	b.n	8004220 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff94 	bl	800411a <LL_ADC_IsCalibrationOnGoing>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e2      	bne.n	80041be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f023 0303 	bic.w	r3, r3, #3
 8004200:	f043 0201 	orr.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c
 8004208:	e005      	b.n	8004216 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	f043 0210 	orr.w	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	0004de01 	.word	0x0004de01

0800422c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b0a1      	sub	sp, #132	; 0x84
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004246:	2302      	movs	r3, #2
 8004248:	e0e7      	b.n	800441a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004252:	2300      	movs	r3, #0
 8004254:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004256:	2300      	movs	r3, #0
 8004258:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004262:	d102      	bne.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	e009      	b.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6e      	ldr	r2, [pc, #440]	; (8004428 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d102      	bne.n	800427a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004274:	4b6d      	ldr	r3, [pc, #436]	; (800442c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	e001      	b.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0be      	b.n	800441a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ff4f 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 80042a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ff49 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80a0 	bne.w	80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80042b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 809c 	bne.w	80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c8:	d004      	beq.n	80042d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a55      	ldr	r2, [pc, #340]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d101      	bne.n	80042d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80042d4:	4b56      	ldr	r3, [pc, #344]	; (8004430 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80042d6:	e000      	b.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80042d8:	4b56      	ldr	r3, [pc, #344]	; (8004434 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80042da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d04b      	beq.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042f6:	035b      	lsls	r3, r3, #13
 80042f8:	430b      	orrs	r3, r1
 80042fa:	431a      	orrs	r2, r3
 80042fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004308:	d004      	beq.n	8004314 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a45      	ldr	r2, [pc, #276]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10f      	bne.n	8004334 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004314:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004318:	f7ff fed3 	bl	80040c2 <LL_ADC_IsEnabled>
 800431c:	4604      	mov	r4, r0
 800431e:	4841      	ldr	r0, [pc, #260]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004320:	f7ff fecf 	bl	80040c2 <LL_ADC_IsEnabled>
 8004324:	4603      	mov	r3, r0
 8004326:	4323      	orrs	r3, r4
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e012      	b.n	800435a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004334:	483c      	ldr	r0, [pc, #240]	; (8004428 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004336:	f7ff fec4 	bl	80040c2 <LL_ADC_IsEnabled>
 800433a:	4604      	mov	r4, r0
 800433c:	483b      	ldr	r0, [pc, #236]	; (800442c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800433e:	f7ff fec0 	bl	80040c2 <LL_ADC_IsEnabled>
 8004342:	4603      	mov	r3, r0
 8004344:	431c      	orrs	r4, r3
 8004346:	483c      	ldr	r0, [pc, #240]	; (8004438 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004348:	f7ff febb 	bl	80040c2 <LL_ADC_IsEnabled>
 800434c:	4603      	mov	r3, r0
 800434e:	4323      	orrs	r3, r4
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d056      	beq.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800435e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004366:	f023 030f 	bic.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	6811      	ldr	r1, [r2, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	6892      	ldr	r2, [r2, #8]
 8004372:	430a      	orrs	r2, r1
 8004374:	431a      	orrs	r2, r3
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800437a:	e047      	b.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004386:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004390:	d004      	beq.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a23      	ldr	r2, [pc, #140]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d10f      	bne.n	80043bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800439c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80043a0:	f7ff fe8f 	bl	80040c2 <LL_ADC_IsEnabled>
 80043a4:	4604      	mov	r4, r0
 80043a6:	481f      	ldr	r0, [pc, #124]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043a8:	f7ff fe8b 	bl	80040c2 <LL_ADC_IsEnabled>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4323      	orrs	r3, r4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e012      	b.n	80043e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80043bc:	481a      	ldr	r0, [pc, #104]	; (8004428 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043be:	f7ff fe80 	bl	80040c2 <LL_ADC_IsEnabled>
 80043c2:	4604      	mov	r4, r0
 80043c4:	4819      	ldr	r0, [pc, #100]	; (800442c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043c6:	f7ff fe7c 	bl	80040c2 <LL_ADC_IsEnabled>
 80043ca:	4603      	mov	r3, r0
 80043cc:	431c      	orrs	r4, r3
 80043ce:	481a      	ldr	r0, [pc, #104]	; (8004438 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043d0:	f7ff fe77 	bl	80040c2 <LL_ADC_IsEnabled>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4323      	orrs	r3, r4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d012      	beq.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043ee:	f023 030f 	bic.w	r3, r3, #15
 80043f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043f6:	e009      	b.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800440a:	e000      	b.n	800440e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800440c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004416:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800441a:	4618      	mov	r0, r3
 800441c:	3784      	adds	r7, #132	; 0x84
 800441e:	46bd      	mov	sp, r7
 8004420:	bd90      	pop	{r4, r7, pc}
 8004422:	bf00      	nop
 8004424:	50000100 	.word	0x50000100
 8004428:	50000400 	.word	0x50000400
 800442c:	50000500 	.word	0x50000500
 8004430:	50000300 	.word	0x50000300
 8004434:	50000700 	.word	0x50000700
 8004438:	50000600 	.word	0x50000600

0800443c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004458:	4013      	ands	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800446e:	4a04      	ldr	r2, [pc, #16]	; (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	60d3      	str	r3, [r2, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <__NVIC_GetPriorityGrouping+0x18>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 0307 	and.w	r3, r3, #7
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	db0b      	blt.n	80044ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	f003 021f 	and.w	r2, r3, #31
 80044b8:	4907      	ldr	r1, [pc, #28]	; (80044d8 <__NVIC_EnableIRQ+0x38>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2001      	movs	r0, #1
 80044c2:	fa00 f202 	lsl.w	r2, r0, r2
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e100 	.word	0xe000e100

080044dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db0a      	blt.n	8004506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	490c      	ldr	r1, [pc, #48]	; (8004528 <__NVIC_SetPriority+0x4c>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	440b      	add	r3, r1
 8004500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004504:	e00a      	b.n	800451c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4908      	ldr	r1, [pc, #32]	; (800452c <__NVIC_SetPriority+0x50>)
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3b04      	subs	r3, #4
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	440b      	add	r3, r1
 800451a:	761a      	strb	r2, [r3, #24]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000e100 	.word	0xe000e100
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	; 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f1c3 0307 	rsb	r3, r3, #7
 800454a:	2b04      	cmp	r3, #4
 800454c:	bf28      	it	cs
 800454e:	2304      	movcs	r3, #4
 8004550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3304      	adds	r3, #4
 8004556:	2b06      	cmp	r3, #6
 8004558:	d902      	bls.n	8004560 <NVIC_EncodePriority+0x30>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3b03      	subs	r3, #3
 800455e:	e000      	b.n	8004562 <NVIC_EncodePriority+0x32>
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004578:	f04f 31ff 	mov.w	r1, #4294967295
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43d9      	mvns	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	4313      	orrs	r3, r2
         );
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	; 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a8:	d301      	bcc.n	80045ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00f      	b.n	80045ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <SysTick_Config+0x40>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b6:	210f      	movs	r1, #15
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	f7ff ff8e 	bl	80044dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <SysTick_Config+0x40>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <SysTick_Config+0x40>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff29 	bl	800443c <__NVIC_SetPriorityGrouping>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004600:	f7ff ff40 	bl	8004484 <__NVIC_GetPriorityGrouping>
 8004604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f7ff ff90 	bl	8004530 <NVIC_EncodePriority>
 8004610:	4602      	mov	r2, r0
 8004612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff5f 	bl	80044dc <__NVIC_SetPriority>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff33 	bl	80044a0 <__NVIC_EnableIRQ>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ffa4 	bl	8004598 <SysTick_Config>
 8004650:	4603      	mov	r3, r0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e08d      	b.n	800478a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_DMA_Init+0x138>)
 8004676:	429a      	cmp	r2, r3
 8004678:	d80f      	bhi.n	800469a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	4b45      	ldr	r3, [pc, #276]	; (8004798 <HAL_DMA_Init+0x13c>)
 8004682:	4413      	add	r3, r2
 8004684:	4a45      	ldr	r2, [pc, #276]	; (800479c <HAL_DMA_Init+0x140>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	009a      	lsls	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a42      	ldr	r2, [pc, #264]	; (80047a0 <HAL_DMA_Init+0x144>)
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
 8004698:	e00e      	b.n	80046b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <HAL_DMA_Init+0x148>)
 80046a2:	4413      	add	r3, r2
 80046a4:	4a3d      	ldr	r2, [pc, #244]	; (800479c <HAL_DMA_Init+0x140>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	009a      	lsls	r2, r3, #2
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <HAL_DMA_Init+0x14c>)
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa76 	bl	8004bfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004718:	d102      	bne.n	8004720 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004734:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d010      	beq.n	8004760 <HAL_DMA_Init+0x104>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b04      	cmp	r3, #4
 8004744:	d80c      	bhi.n	8004760 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa96 	bl	8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	e008      	b.n	8004772 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40020407 	.word	0x40020407
 8004798:	bffdfff8 	.word	0xbffdfff8
 800479c:	cccccccd 	.word	0xcccccccd
 80047a0:	40020000 	.word	0x40020000
 80047a4:	bffdfbf8 	.word	0xbffdfbf8
 80047a8:	40020400 	.word	0x40020400

080047ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_DMA_Start_IT+0x20>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e066      	b.n	800489a <HAL_DMA_Start_IT+0xee>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d155      	bne.n	800488c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f9bb 	bl	8004b80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 020e 	orr.w	r2, r2, #14
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e00f      	b.n	8004844 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 020a 	orr.w	r2, r2, #10
 8004842:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004878:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e005      	b.n	8004898 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d005      	beq.n	80048c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2204      	movs	r2, #4
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	e037      	b.n	8004936 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 020e 	bic.w	r2, r2, #14
 80048d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f003 021f 	and.w	r2, r3, #31
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f202 	lsl.w	r2, r1, r2
 8004908:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004912:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004934:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d00d      	beq.n	8004988 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2204      	movs	r2, #4
 8004970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
 8004986:	e047      	b.n	8004a18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 020e 	bic.w	r2, r2, #14
 8004996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	f003 021f 	and.w	r2, r3, #31
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2101      	movs	r1, #1
 80049c6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
    }
  }
  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2204      	movs	r2, #4
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d026      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x7a>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d021      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d107      	bne.n	8004a76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0204 	bic.w	r2, r2, #4
 8004a74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f003 021f 	and.w	r2, r3, #31
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2104      	movs	r1, #4
 8004a84:	fa01 f202 	lsl.w	r2, r1, r2
 8004a88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d071      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a9a:	e06c      	b.n	8004b76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d02e      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d029      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 020a 	bic.w	r2, r2, #10
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2102      	movs	r1, #2
 8004aee:	fa01 f202 	lsl.w	r2, r1, r2
 8004af2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d038      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b0c:	e033      	b.n	8004b76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2208      	movs	r2, #8
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02a      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d025      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 020e 	bic.w	r2, r2, #14
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
}
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ba8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f003 021f 	and.w	r2, r3, #31
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d108      	bne.n	8004be0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bde:	e007      	b.n	8004bf0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d802      	bhi.n	8004c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e001      	b.n	8004c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c18:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	3b08      	subs	r3, #8
 8004c26:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c46:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2201      	movs	r2, #1
 8004c50:	409a      	lsls	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40020407 	.word	0x40020407
 8004c68:	40020800 	.word	0x40020800
 8004c6c:	40020820 	.word	0x40020820
 8004c70:	cccccccd 	.word	0xcccccccd
 8004c74:	40020880 	.word	0x40020880

08004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c9a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	1000823f 	.word	0x1000823f
 8004cbc:	40020940 	.word	0x40020940

08004cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cce:	e15a      	b.n	8004f86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 814c 	beq.w	8004f80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d005      	beq.n	8004d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d130      	bne.n	8004d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d36:	2201      	movs	r2, #1
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 0201 	and.w	r2, r3, #1
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d017      	beq.n	8004d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	2203      	movs	r2, #3
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d123      	bne.n	8004df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	08da      	lsrs	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3208      	adds	r2, #8
 8004db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	08da      	lsrs	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3208      	adds	r2, #8
 8004dec:	6939      	ldr	r1, [r7, #16]
 8004dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0203 	and.w	r2, r3, #3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80a6 	beq.w	8004f80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e34:	4b5b      	ldr	r3, [pc, #364]	; (8004fa4 <HAL_GPIO_Init+0x2e4>)
 8004e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e38:	4a5a      	ldr	r2, [pc, #360]	; (8004fa4 <HAL_GPIO_Init+0x2e4>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8004e40:	4b58      	ldr	r3, [pc, #352]	; (8004fa4 <HAL_GPIO_Init+0x2e4>)
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4c:	4a56      	ldr	r2, [pc, #344]	; (8004fa8 <HAL_GPIO_Init+0x2e8>)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	3302      	adds	r3, #2
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	220f      	movs	r2, #15
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e76:	d01f      	beq.n	8004eb8 <HAL_GPIO_Init+0x1f8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a4c      	ldr	r2, [pc, #304]	; (8004fac <HAL_GPIO_Init+0x2ec>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d019      	beq.n	8004eb4 <HAL_GPIO_Init+0x1f4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a4b      	ldr	r2, [pc, #300]	; (8004fb0 <HAL_GPIO_Init+0x2f0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_GPIO_Init+0x1f0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <HAL_GPIO_Init+0x2f4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00d      	beq.n	8004eac <HAL_GPIO_Init+0x1ec>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a49      	ldr	r2, [pc, #292]	; (8004fb8 <HAL_GPIO_Init+0x2f8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <HAL_GPIO_Init+0x1e8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a48      	ldr	r2, [pc, #288]	; (8004fbc <HAL_GPIO_Init+0x2fc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_GPIO_Init+0x1e4>
 8004ea0:	2305      	movs	r3, #5
 8004ea2:	e00a      	b.n	8004eba <HAL_GPIO_Init+0x1fa>
 8004ea4:	2306      	movs	r3, #6
 8004ea6:	e008      	b.n	8004eba <HAL_GPIO_Init+0x1fa>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	e006      	b.n	8004eba <HAL_GPIO_Init+0x1fa>
 8004eac:	2303      	movs	r3, #3
 8004eae:	e004      	b.n	8004eba <HAL_GPIO_Init+0x1fa>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e002      	b.n	8004eba <HAL_GPIO_Init+0x1fa>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_GPIO_Init+0x1fa>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	f002 0203 	and.w	r2, r2, #3
 8004ec0:	0092      	lsls	r2, r2, #2
 8004ec2:	4093      	lsls	r3, r2
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eca:	4937      	ldr	r1, [pc, #220]	; (8004fa8 <HAL_GPIO_Init+0x2e8>)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	089b      	lsrs	r3, r3, #2
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ed8:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004efc:	4a30      	ldr	r2, [pc, #192]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f02:	4b2f      	ldr	r3, [pc, #188]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f26:	4a26      	ldr	r2, [pc, #152]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f50:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f56:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f7a:	4a11      	ldr	r2, [pc, #68]	; (8004fc0 <HAL_GPIO_Init+0x300>)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3301      	adds	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f47f ae9d 	bne.w	8004cd0 <HAL_GPIO_Init+0x10>
  }
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	48000400 	.word	0x48000400
 8004fb0:	48000800 	.word	0x48000800
 8004fb4:	48000c00 	.word	0x48000c00
 8004fb8:	48001000 	.word	0x48001000
 8004fbc:	48001400 	.word	0x48001400
 8004fc0:	40010400 	.word	0x40010400

08004fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	807b      	strh	r3, [r7, #2]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fd4:	787b      	ldrb	r3, [r7, #1]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fe0:	e002      	b.n	8004fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800500a:	4a05      	ldr	r2, [pc, #20]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f806 	bl	8005024 <HAL_GPIO_EXTI_Callback>
  }
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40010400 	.word	0x40010400

08005024 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d141      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800504a:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d131      	bne.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005058:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505e:	4a46      	ldr	r2, [pc, #280]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005068:	4b43      	ldr	r3, [pc, #268]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005070:	4a41      	ldr	r2, [pc, #260]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005078:	4b40      	ldr	r3, [pc, #256]	; (800517c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2232      	movs	r2, #50	; 0x32
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	4a3f      	ldr	r2, [pc, #252]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	0c9b      	lsrs	r3, r3, #18
 800508a:	3301      	adds	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508e:	e002      	b.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3b01      	subs	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005096:	4b38      	ldr	r3, [pc, #224]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	d102      	bne.n	80050aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f2      	bne.n	8005090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d158      	bne.n	800516a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e057      	b.n	800516c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050bc:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c2:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050cc:	e04d      	b.n	800516a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d141      	bne.n	800515a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050d6:	4b28      	ldr	r3, [pc, #160]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e2:	d131      	bne.n	8005148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e4:	4b24      	ldr	r3, [pc, #144]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ea:	4a23      	ldr	r2, [pc, #140]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050f4:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050fc:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2232      	movs	r2, #50	; 0x32
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	0c9b      	lsrs	r3, r3, #18
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800511a:	e002      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3b01      	subs	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005122:	4b15      	ldr	r3, [pc, #84]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512e:	d102      	bne.n	8005136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f2      	bne.n	800511c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005142:	d112      	bne.n	800516a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e011      	b.n	800516c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005158:	e007      	b.n	800516a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005162:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40007000 	.word	0x40007000
 800517c:	20000008 	.word	0x20000008
 8005180:	431bde83 	.word	0x431bde83

08005184 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800518e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005192:	6093      	str	r3, [r2, #8]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40007000 	.word	0x40007000

080051a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e306      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d075      	beq.n	80052ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c2:	4b97      	ldr	r3, [pc, #604]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051cc:	4b94      	ldr	r3, [pc, #592]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d102      	bne.n	80051e2 <HAL_RCC_OscConfig+0x3e>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d002      	beq.n	80051e8 <HAL_RCC_OscConfig+0x44>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d10b      	bne.n	8005200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	4b8d      	ldr	r3, [pc, #564]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d05b      	beq.n	80052ac <HAL_RCC_OscConfig+0x108>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d157      	bne.n	80052ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e2e1      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d106      	bne.n	8005218 <HAL_RCC_OscConfig+0x74>
 800520a:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a84      	ldr	r2, [pc, #528]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e01d      	b.n	8005254 <HAL_RCC_OscConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x98>
 8005222:	4b7f      	ldr	r3, [pc, #508]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7e      	ldr	r2, [pc, #504]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4b7c      	ldr	r3, [pc, #496]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7b      	ldr	r2, [pc, #492]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e00b      	b.n	8005254 <HAL_RCC_OscConfig+0xb0>
 800523c:	4b78      	ldr	r3, [pc, #480]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a77      	ldr	r2, [pc, #476]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	4b75      	ldr	r3, [pc, #468]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a74      	ldr	r2, [pc, #464]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800524e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d013      	beq.n	8005284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd fc9e 	bl	8002b9c <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005264:	f7fd fc9a 	bl	8002b9c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b64      	cmp	r3, #100	; 0x64
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e2a6      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0xc0>
 8005282:	e014      	b.n	80052ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fd fc8a 	bl	8002b9c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7fd fc86 	bl	8002b9c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	; 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e292      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800529e:	4b60      	ldr	r3, [pc, #384]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0xe8>
 80052aa:	e000      	b.n	80052ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d075      	beq.n	80053a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ba:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c4:	4b56      	ldr	r3, [pc, #344]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b0c      	cmp	r3, #12
 80052d2:	d102      	bne.n	80052da <HAL_RCC_OscConfig+0x136>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_OscConfig+0x13c>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d11f      	bne.n	8005320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e0:	4b4f      	ldr	r3, [pc, #316]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_OscConfig+0x154>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e265      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f8:	4b49      	ldr	r3, [pc, #292]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	4946      	ldr	r1, [pc, #280]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800530c:	4b45      	ldr	r3, [pc, #276]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fd fbf7 	bl	8002b04 <HAL_InitTick>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d043      	beq.n	80053a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e251      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d023      	beq.n	8005370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005328:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3c      	ldr	r2, [pc, #240]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fd fc32 	bl	8002b9c <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533c:	f7fd fc2e 	bl	8002b9c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e23a      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800534e:	4b34      	ldr	r3, [pc, #208]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	492d      	ldr	r1, [pc, #180]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 800536a:	4313      	orrs	r3, r2
 800536c:	604b      	str	r3, [r1, #4]
 800536e:	e01a      	b.n	80053a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005370:	4b2b      	ldr	r3, [pc, #172]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800537a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd fc0e 	bl	8002b9c <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005384:	f7fd fc0a 	bl	8002b9c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e216      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005396:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x1e0>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d041      	beq.n	8005436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01c      	beq.n	80053f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c0:	4a17      	ldr	r2, [pc, #92]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ca:	f7fd fbe7 	bl	8002b9c <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d2:	f7fd fbe3 	bl	8002b9c <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e1ef      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ef      	beq.n	80053d2 <HAL_RCC_OscConfig+0x22e>
 80053f2:	e020      	b.n	8005436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fa:	4a09      	ldr	r2, [pc, #36]	; (8005420 <HAL_RCC_OscConfig+0x27c>)
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fd fbca 	bl	8002b9c <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800540a:	e00d      	b.n	8005428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540c:	f7fd fbc6 	bl	8002b9c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d906      	bls.n	8005428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1d2      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005428:	4b8c      	ldr	r3, [pc, #560]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1ea      	bne.n	800540c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80a6 	beq.w	8005590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005444:	2300      	movs	r3, #0
 8005446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005448:	4b84      	ldr	r3, [pc, #528]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_OscConfig+0x2b4>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x2b6>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	4b7f      	ldr	r3, [pc, #508]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	4a7e      	ldr	r2, [pc, #504]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005468:	6593      	str	r3, [r2, #88]	; 0x58
 800546a:	4b7c      	ldr	r3, [pc, #496]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005476:	2301      	movs	r3, #1
 8005478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547a:	4b79      	ldr	r3, [pc, #484]	; (8005660 <HAL_RCC_OscConfig+0x4bc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d118      	bne.n	80054b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005486:	4b76      	ldr	r3, [pc, #472]	; (8005660 <HAL_RCC_OscConfig+0x4bc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a75      	ldr	r2, [pc, #468]	; (8005660 <HAL_RCC_OscConfig+0x4bc>)
 800548c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005492:	f7fd fb83 	bl	8002b9c <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549a:	f7fd fb7f 	bl	8002b9c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e18b      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ac:	4b6c      	ldr	r3, [pc, #432]	; (8005660 <HAL_RCC_OscConfig+0x4bc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d108      	bne.n	80054d2 <HAL_RCC_OscConfig+0x32e>
 80054c0:	4b66      	ldr	r3, [pc, #408]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	4a65      	ldr	r2, [pc, #404]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054d0:	e024      	b.n	800551c <HAL_RCC_OscConfig+0x378>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d110      	bne.n	80054fc <HAL_RCC_OscConfig+0x358>
 80054da:	4b60      	ldr	r3, [pc, #384]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	4a5e      	ldr	r2, [pc, #376]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054ea:	4b5c      	ldr	r3, [pc, #368]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	4a5a      	ldr	r2, [pc, #360]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054fa:	e00f      	b.n	800551c <HAL_RCC_OscConfig+0x378>
 80054fc:	4b57      	ldr	r3, [pc, #348]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	4a56      	ldr	r2, [pc, #344]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800550c:	4b53      	ldr	r3, [pc, #332]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	4a52      	ldr	r2, [pc, #328]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d016      	beq.n	8005552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005524:	f7fd fb3a 	bl	8002b9c <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552a:	e00a      	b.n	8005542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552c:	f7fd fb36 	bl	8002b9c <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e140      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005542:	4b46      	ldr	r3, [pc, #280]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0ed      	beq.n	800552c <HAL_RCC_OscConfig+0x388>
 8005550:	e015      	b.n	800557e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fd fb23 	bl	8002b9c <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555a:	f7fd fb1f 	bl	8002b9c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f241 3288 	movw	r2, #5000	; 0x1388
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e129      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005570:	4b3a      	ldr	r3, [pc, #232]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1ed      	bne.n	800555a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800557e:	7ffb      	ldrb	r3, [r7, #31]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	4a34      	ldr	r2, [pc, #208]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d03c      	beq.n	8005616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01c      	beq.n	80055de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055aa:	4a2c      	ldr	r2, [pc, #176]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fd faf2 	bl	8002b9c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055bc:	f7fd faee 	bl	8002b9c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0fa      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ce:	4b23      	ldr	r3, [pc, #140]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0ef      	beq.n	80055bc <HAL_RCC_OscConfig+0x418>
 80055dc:	e01b      	b.n	8005616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80055e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ee:	f7fd fad5 	bl	8002b9c <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f6:	f7fd fad1 	bl	8002b9c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e0dd      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005608:	4b14      	ldr	r3, [pc, #80]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800560a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1ef      	bne.n	80055f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80d1 	beq.w	80057c2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b0c      	cmp	r3, #12
 800562a:	f000 808b 	beq.w	8005744 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d15e      	bne.n	80056f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a08      	ldr	r2, [pc, #32]	; (800565c <HAL_RCC_OscConfig+0x4b8>)
 800563c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fd faab 	bl	8002b9c <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	e00c      	b.n	8005664 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fd faa7 	bl	8002b9c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d905      	bls.n	8005664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e0b3      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
 800565c:	40021000 	.word	0x40021000
 8005660:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005664:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ec      	bne.n	800564a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005670:	4b56      	ldr	r3, [pc, #344]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <HAL_RCC_OscConfig+0x62c>)
 8005676:	4013      	ands	r3, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6a11      	ldr	r1, [r2, #32]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005680:	3a01      	subs	r2, #1
 8005682:	0112      	lsls	r2, r2, #4
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800568a:	0212      	lsls	r2, r2, #8
 800568c:	4311      	orrs	r1, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005692:	0852      	lsrs	r2, r2, #1
 8005694:	3a01      	subs	r2, #1
 8005696:	0552      	lsls	r2, r2, #21
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800569e:	0852      	lsrs	r2, r2, #1
 80056a0:	3a01      	subs	r2, #1
 80056a2:	0652      	lsls	r2, r2, #25
 80056a4:	4311      	orrs	r1, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056aa:	06d2      	lsls	r2, r2, #27
 80056ac:	430a      	orrs	r2, r1
 80056ae:	4947      	ldr	r1, [pc, #284]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a44      	ldr	r2, [pc, #272]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056c0:	4b42      	ldr	r3, [pc, #264]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a41      	ldr	r2, [pc, #260]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fd fa66 	bl	8002b9c <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fd fa62 	bl	8002b9c <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e06e      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056e6:	4b39      	ldr	r3, [pc, #228]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x530>
 80056f2:	e066      	b.n	80057c2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f4:	4b35      	ldr	r3, [pc, #212]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 80056fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005700:	4b32      	ldr	r3, [pc, #200]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a31      	ldr	r2, [pc, #196]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800570c:	4b2f      	ldr	r3, [pc, #188]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005712:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fd fa3e 	bl	8002b9c <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005724:	f7fd fa3a 	bl	8002b9c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e046      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005736:	4b25      	ldr	r3, [pc, #148]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x580>
 8005742:	e03e      	b.n	80057c2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e039      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_RCC_OscConfig+0x628>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f003 0203 	and.w	r2, r3, #3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	429a      	cmp	r2, r3
 8005762:	d12c      	bne.n	80057be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	3b01      	subs	r3, #1
 8005770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d123      	bne.n	80057be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d11b      	bne.n	80057be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d113      	bne.n	80057be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	3b01      	subs	r3, #1
 80057a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d109      	bne.n	80057be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	3b01      	subs	r3, #1
 80057b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000
 80057d0:	019f800c 	.word	0x019f800c

080057d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e11e      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057ec:	4b91      	ldr	r3, [pc, #580]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d910      	bls.n	800581c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b8e      	ldr	r3, [pc, #568]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	498c      	ldr	r1, [pc, #560]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b8a      	ldr	r3, [pc, #552]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e106      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d073      	beq.n	8005910 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d129      	bne.n	8005884 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005830:	4b81      	ldr	r3, [pc, #516]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0f4      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005840:	f000 f99e 	bl	8005b80 <RCC_GetSysClockFreqFromPLLSource>
 8005844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4a7c      	ldr	r2, [pc, #496]	; (8005a3c <HAL_RCC_ClockConfig+0x268>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d93f      	bls.n	80058ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800584e:	4b7a      	ldr	r3, [pc, #488]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d033      	beq.n	80058ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800586a:	2b00      	cmp	r3, #0
 800586c:	d12f      	bne.n	80058ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800586e:	4b72      	ldr	r3, [pc, #456]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005876:	4a70      	ldr	r2, [pc, #448]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e024      	b.n	80058ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d107      	bne.n	800589c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588c:	4b6a      	ldr	r3, [pc, #424]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0c6      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800589c:	4b66      	ldr	r3, [pc, #408]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0be      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058ac:	f000 f8ce 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4a61      	ldr	r2, [pc, #388]	; (8005a3c <HAL_RCC_ClockConfig+0x268>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d909      	bls.n	80058ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ba:	4b5f      	ldr	r3, [pc, #380]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	4a5d      	ldr	r2, [pc, #372]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058ce:	4b5a      	ldr	r3, [pc, #360]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 0203 	bic.w	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4957      	ldr	r1, [pc, #348]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fd f95c 	bl	8002b9c <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e8:	f7fd f958 	bl	8002b9c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e095      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	4b4e      	ldr	r3, [pc, #312]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 020c 	and.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	429a      	cmp	r2, r3
 800590e:	d1eb      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d023      	beq.n	8005964 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005928:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a42      	ldr	r2, [pc, #264]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800592e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005932:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005940:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005948:	4a3b      	ldr	r2, [pc, #236]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800594a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800594e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005950:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4936      	ldr	r1, [pc, #216]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
 8005962:	e008      	b.n	8005976 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b80      	cmp	r3, #128	; 0x80
 8005968:	d105      	bne.n	8005976 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800596a:	4b33      	ldr	r3, [pc, #204]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	4a32      	ldr	r2, [pc, #200]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005974:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d21d      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005984:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 020f 	bic.w	r2, r3, #15
 800598c:	4929      	ldr	r1, [pc, #164]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005994:	f7fd f902 	bl	8002b9c <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fd f8fe 	bl	8002b9c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e03b      	b.n	8005a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_ClockConfig+0x260>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1ed      	bne.n	800599c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4917      	ldr	r1, [pc, #92]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	490f      	ldr	r1, [pc, #60]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059fe:	f000 f825 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <HAL_RCC_ClockConfig+0x264>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	490c      	ldr	r1, [pc, #48]	; (8005a40 <HAL_RCC_ClockConfig+0x26c>)
 8005a10:	5ccb      	ldrb	r3, [r1, r3]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <HAL_RCC_ClockConfig+0x270>)
 8005a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x274>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd f86e 	bl	8002b04 <HAL_InitTick>
 8005a28:	4603      	mov	r3, r0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40022000 	.word	0x40022000
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	04c4b400 	.word	0x04c4b400
 8005a40:	0800cf94 	.word	0x0800cf94
 8005a44:	20000008 	.word	0x20000008
 8005a48:	200000c8 	.word	0x200000c8

08005a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a52:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d102      	bne.n	8005a64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	e047      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a64:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 030c 	and.w	r3, r3, #12
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a70:	4b26      	ldr	r3, [pc, #152]	; (8005b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e03e      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a76:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d136      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a82:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	3301      	adds	r3, #1
 8005a98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d10c      	bne.n	8005aba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aaa:	68d2      	ldr	r2, [r2, #12]
 8005aac:	0a12      	lsrs	r2, r2, #8
 8005aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	617b      	str	r3, [r7, #20]
      break;
 8005ab8:	e00c      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aba:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	4a10      	ldr	r2, [pc, #64]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac4:	68d2      	ldr	r2, [r2, #12]
 8005ac6:	0a12      	lsrs	r2, r2, #8
 8005ac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
      break;
 8005ad2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	0e5b      	lsrs	r3, r3, #25
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	e001      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005af4:	693b      	ldr	r3, [r7, #16]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	016e3600 	.word	0x016e3600

08005b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000008 	.word	0x20000008

08005b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b2c:	f7ff fff0 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4904      	ldr	r1, [pc, #16]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3e:	5ccb      	ldrb	r3, [r1, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	0800cfa4 	.word	0x0800cfa4

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b58:	f7ff ffda 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0adb      	lsrs	r3, r3, #11
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4904      	ldr	r1, [pc, #16]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	0800cfa4 	.word	0x0800cfa4

08005b80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b86:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b90:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d10c      	bne.n	8005bbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ba4:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bae:	68d2      	ldr	r2, [r2, #12]
 8005bb0:	0a12      	lsrs	r2, r2, #8
 8005bb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	617b      	str	r3, [r7, #20]
    break;
 8005bbc:	e00c      	b.n	8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bbe:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bc8:	68d2      	ldr	r2, [r2, #12]
 8005bca:	0a12      	lsrs	r2, r2, #8
 8005bcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bd0:	fb02 f303 	mul.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
    break;
 8005bd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	0e5b      	lsrs	r3, r3, #25
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	3301      	adds	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bf2:	687b      	ldr	r3, [r7, #4]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40021000 	.word	0x40021000
 8005c04:	016e3600 	.word	0x016e3600
 8005c08:	00f42400 	.word	0x00f42400

08005c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c14:	2300      	movs	r3, #0
 8005c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c18:	2300      	movs	r3, #0
 8005c1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8098 	beq.w	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2e:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10d      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	4a3f      	ldr	r2, [pc, #252]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6593      	str	r3, [r2, #88]	; 0x58
 8005c46:	4b3d      	ldr	r3, [pc, #244]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c52:	2301      	movs	r3, #1
 8005c54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c56:	4b3a      	ldr	r3, [pc, #232]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a39      	ldr	r2, [pc, #228]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c62:	f7fc ff9b 	bl	8002b9c <HAL_GetTick>
 8005c66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c68:	e009      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6a:	f7fc ff97 	bl	8002b9c <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d902      	bls.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	74fb      	strb	r3, [r7, #19]
        break;
 8005c7c:	e005      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c7e:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0ef      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d159      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01e      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d019      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cac:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cb8:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cd8:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fc ff57 	bl	8002b9c <HAL_GetTick>
 8005cee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf0:	e00b      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf2:	f7fc ff53 	bl	8002b9c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d902      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	74fb      	strb	r3, [r7, #19]
            break;
 8005d08:	e006      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ec      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	4903      	ldr	r1, [pc, #12]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d34:	e008      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	74bb      	strb	r3, [r7, #18]
 8005d3a:	e005      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	7cfb      	ldrb	r3, [r7, #19]
 8005d46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d48:	7c7b      	ldrb	r3, [r7, #17]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4e:	4ba7      	ldr	r3, [pc, #668]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	4aa6      	ldr	r2, [pc, #664]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d66:	4ba1      	ldr	r3, [pc, #644]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	f023 0203 	bic.w	r2, r3, #3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	499d      	ldr	r1, [pc, #628]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d88:	4b98      	ldr	r3, [pc, #608]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	f023 020c 	bic.w	r2, r3, #12
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4995      	ldr	r1, [pc, #596]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005daa:	4b90      	ldr	r3, [pc, #576]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	498c      	ldr	r1, [pc, #560]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dcc:	4b87      	ldr	r3, [pc, #540]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	4984      	ldr	r1, [pc, #528]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dee:	4b7f      	ldr	r3, [pc, #508]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	497b      	ldr	r1, [pc, #492]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e10:	4b76      	ldr	r3, [pc, #472]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	4973      	ldr	r1, [pc, #460]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e32:	4b6e      	ldr	r3, [pc, #440]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	496a      	ldr	r1, [pc, #424]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e54:	4b65      	ldr	r3, [pc, #404]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4962      	ldr	r1, [pc, #392]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	4959      	ldr	r1, [pc, #356]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e98:	4b54      	ldr	r3, [pc, #336]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e9e:	f023 0203 	bic.w	r2, r3, #3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	4951      	ldr	r1, [pc, #324]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eba:	4b4c      	ldr	r3, [pc, #304]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4948      	ldr	r1, [pc, #288]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005edc:	4b43      	ldr	r3, [pc, #268]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	4940      	ldr	r1, [pc, #256]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efa:	d105      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005efc:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a3a      	ldr	r2, [pc, #232]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d015      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f14:	4b35      	ldr	r3, [pc, #212]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	4932      	ldr	r1, [pc, #200]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f32:	d105      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f34:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4a2c      	ldr	r2, [pc, #176]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f4c:	4b27      	ldr	r3, [pc, #156]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	4924      	ldr	r1, [pc, #144]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f6a:	d105      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4a1e      	ldr	r2, [pc, #120]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d015      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f84:	4b19      	ldr	r3, [pc, #100]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	4916      	ldr	r1, [pc, #88]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a10      	ldr	r2, [pc, #64]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d019      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	4908      	ldr	r1, [pc, #32]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fda:	d109      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a02      	ldr	r2, [pc, #8]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe6:	60d3      	str	r3, [r2, #12]
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d015      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ffc:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	4926      	ldr	r1, [pc, #152]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601a:	d105      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800601c:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006026:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006034:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006042:	4918      	ldr	r1, [pc, #96]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d105      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006054:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4a12      	ldr	r2, [pc, #72]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800605a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d015      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800606e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	490a      	ldr	r1, [pc, #40]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800608a:	d105      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006096:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006098:	7cbb      	ldrb	r3, [r7, #18]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000

080060a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e049      	b.n	800614e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc f87e 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f000 ff6a 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e049      	b.n	80061fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f841 	bl	8006204 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3304      	adds	r3, #4
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f000 ff13 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_TIM_PWM_Start+0x24>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	bf14      	ite	ne
 8006234:	2301      	movne	r3, #1
 8006236:	2300      	moveq	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	e03c      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	d109      	bne.n	8006256 <HAL_TIM_PWM_Start+0x3e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	e02f      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d109      	bne.n	8006270 <HAL_TIM_PWM_Start+0x58>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e022      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d109      	bne.n	800628a <HAL_TIM_PWM_Start+0x72>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b01      	cmp	r3, #1
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e015      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x8c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e008      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0a6      	b.n	800640c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_TIM_PWM_Start+0xb6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062cc:	e023      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d104      	bne.n	80062de <HAL_TIM_PWM_Start+0xc6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062dc:	e01b      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d104      	bne.n	80062ee <HAL_TIM_PWM_Start+0xd6>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	e013      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d104      	bne.n	80062fe <HAL_TIM_PWM_Start+0xe6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062fc:	e00b      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b10      	cmp	r3, #16
 8006302:	d104      	bne.n	800630e <HAL_TIM_PWM_Start+0xf6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630c:	e003      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2202      	movs	r2, #2
 8006312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fabc 	bl	800789c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <HAL_TIM_PWM_Start+0x1fc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d018      	beq.n	8006360 <HAL_TIM_PWM_Start+0x148>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a39      	ldr	r2, [pc, #228]	; (8006418 <HAL_TIM_PWM_Start+0x200>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <HAL_TIM_PWM_Start+0x148>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a37      	ldr	r2, [pc, #220]	; (800641c <HAL_TIM_PWM_Start+0x204>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00e      	beq.n	8006360 <HAL_TIM_PWM_Start+0x148>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a36      	ldr	r2, [pc, #216]	; (8006420 <HAL_TIM_PWM_Start+0x208>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d009      	beq.n	8006360 <HAL_TIM_PWM_Start+0x148>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a34      	ldr	r2, [pc, #208]	; (8006424 <HAL_TIM_PWM_Start+0x20c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_TIM_PWM_Start+0x148>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a33      	ldr	r2, [pc, #204]	; (8006428 <HAL_TIM_PWM_Start+0x210>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d101      	bne.n	8006364 <HAL_TIM_PWM_Start+0x14c>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <HAL_TIM_PWM_Start+0x14e>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006378:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a25      	ldr	r2, [pc, #148]	; (8006414 <HAL_TIM_PWM_Start+0x1fc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d022      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638c:	d01d      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <HAL_TIM_PWM_Start+0x214>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d018      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a24      	ldr	r2, [pc, #144]	; (8006430 <HAL_TIM_PWM_Start+0x218>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a23      	ldr	r2, [pc, #140]	; (8006434 <HAL_TIM_PWM_Start+0x21c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <HAL_TIM_PWM_Start+0x200>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d009      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <HAL_TIM_PWM_Start+0x204>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_TIM_PWM_Start+0x1b2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIM_PWM_Start+0x210>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d115      	bne.n	80063f6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <HAL_TIM_PWM_Start+0x220>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b06      	cmp	r3, #6
 80063da:	d015      	beq.n	8006408 <HAL_TIM_PWM_Start+0x1f0>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d011      	beq.n	8006408 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	e008      	b.n	8006408 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0201 	orr.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e000      	b.n	800640a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40013400 	.word	0x40013400
 800641c:	40014000 	.word	0x40014000
 8006420:	40014400 	.word	0x40014400
 8006424:	40014800 	.word	0x40014800
 8006428:	40015000 	.word	0x40015000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	00010007 	.word	0x00010007

0800643c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fa24 	bl	800789c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a40      	ldr	r2, [pc, #256]	; (800655c <HAL_TIM_PWM_Stop+0x120>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d018      	beq.n	8006490 <HAL_TIM_PWM_Stop+0x54>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3f      	ldr	r2, [pc, #252]	; (8006560 <HAL_TIM_PWM_Stop+0x124>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d013      	beq.n	8006490 <HAL_TIM_PWM_Stop+0x54>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3d      	ldr	r2, [pc, #244]	; (8006564 <HAL_TIM_PWM_Stop+0x128>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00e      	beq.n	8006490 <HAL_TIM_PWM_Stop+0x54>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3c      	ldr	r2, [pc, #240]	; (8006568 <HAL_TIM_PWM_Stop+0x12c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d009      	beq.n	8006490 <HAL_TIM_PWM_Stop+0x54>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a3a      	ldr	r2, [pc, #232]	; (800656c <HAL_TIM_PWM_Stop+0x130>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <HAL_TIM_PWM_Stop+0x54>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a39      	ldr	r2, [pc, #228]	; (8006570 <HAL_TIM_PWM_Stop+0x134>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <HAL_TIM_PWM_Stop+0x58>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <HAL_TIM_PWM_Stop+0x5a>
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <HAL_TIM_PWM_Stop+0x8e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a1a      	ldr	r2, [r3, #32]
 80064b0:	f244 4344 	movw	r3, #17476	; 0x4444
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d107      	bne.n	80064ca <HAL_TIM_PWM_Stop+0x8e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a1a      	ldr	r2, [r3, #32]
 80064d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <HAL_TIM_PWM_Stop+0xbe>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a1a      	ldr	r2, [r3, #32]
 80064e0:	f244 4344 	movw	r3, #17476	; 0x4444
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_PWM_Stop+0xbe>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Stop+0xce>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006508:	e023      	b.n	8006552 <HAL_TIM_PWM_Stop+0x116>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b04      	cmp	r3, #4
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Stop+0xde>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	e01b      	b.n	8006552 <HAL_TIM_PWM_Stop+0x116>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d104      	bne.n	800652a <HAL_TIM_PWM_Stop+0xee>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006528:	e013      	b.n	8006552 <HAL_TIM_PWM_Stop+0x116>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b0c      	cmp	r3, #12
 800652e:	d104      	bne.n	800653a <HAL_TIM_PWM_Stop+0xfe>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006538:	e00b      	b.n	8006552 <HAL_TIM_PWM_Stop+0x116>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b10      	cmp	r3, #16
 800653e:	d104      	bne.n	800654a <HAL_TIM_PWM_Stop+0x10e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006548:	e003      	b.n	8006552 <HAL_TIM_PWM_Stop+0x116>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40012c00 	.word	0x40012c00
 8006560:	40013400 	.word	0x40013400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800
 8006570:	40015000 	.word	0x40015000

08006574 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e097      	b.n	80066b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fb fe51 	bl	8002244 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80065b8:	f023 0307 	bic.w	r3, r3, #7
 80065bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f000 fcf9 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	4313      	orrs	r3, r2
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006614:	f023 030c 	bic.w	r3, r3, #12
 8006618:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	4313      	orrs	r3, r2
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	031b      	lsls	r3, r3, #12
 8006644:	4313      	orrs	r3, r2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4313      	orrs	r3, r2
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d110      	bne.n	8006712 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f6:	7b7b      	ldrb	r3, [r7, #13]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e089      	b.n	8006814 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006710:	e031      	b.n	8006776 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d110      	bne.n	800673a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800671e:	7b3b      	ldrb	r3, [r7, #12]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d001      	beq.n	8006728 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e075      	b.n	8006814 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006738:	e01d      	b.n	8006776 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d108      	bne.n	8006752 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d105      	bne.n	8006752 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	7b7b      	ldrb	r3, [r7, #13]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800674c:	7b3b      	ldrb	r3, [r7, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e05e      	b.n	8006814 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_TIM_Encoder_Start_IT+0xc4>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b04      	cmp	r3, #4
 8006780:	d010      	beq.n	80067a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006782:	e01f      	b.n	80067c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f001 f885 	bl	800789c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0202 	orr.w	r2, r2, #2
 80067a0:	60da      	str	r2, [r3, #12]
      break;
 80067a2:	e02e      	b.n	8006802 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2201      	movs	r2, #1
 80067aa:	2104      	movs	r1, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f875 	bl	800789c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0204 	orr.w	r2, r2, #4
 80067c0:	60da      	str	r2, [r3, #12]
      break;
 80067c2:	e01e      	b.n	8006802 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 f865 	bl	800789c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2201      	movs	r2, #1
 80067d8:	2104      	movs	r1, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f85e 	bl	800789c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0202 	orr.w	r2, r2, #2
 80067ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0204 	orr.w	r2, r2, #4
 80067fe:	60da      	str	r2, [r3, #12]
      break;
 8006800:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0201 	orr.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d122      	bne.n	8006878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b02      	cmp	r3, #2
 800683e:	d11b      	bne.n	8006878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0202 	mvn.w	r2, #2
 8006848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb f820 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 8006864:	e005      	b.n	8006872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fb8c 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb93 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d122      	bne.n	80068cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b04      	cmp	r3, #4
 8006892:	d11b      	bne.n	80068cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0204 	mvn.w	r2, #4
 800689c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fa fff6 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 80068b8:	e005      	b.n	80068c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fb62 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fb69 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d122      	bne.n	8006920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d11b      	bne.n	8006920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0208 	mvn.w	r2, #8
 80068f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2204      	movs	r2, #4
 80068f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fa ffcc 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 800690c:	e005      	b.n	800691a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb38 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb3f 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d122      	bne.n	8006974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b10      	cmp	r3, #16
 800693a:	d11b      	bne.n	8006974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0210 	mvn.w	r2, #16
 8006944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2208      	movs	r2, #8
 800694a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fa ffa2 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 8006960:	e005      	b.n	800696e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb0e 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fb15 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b01      	cmp	r3, #1
 8006980:	d10e      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d107      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0201 	mvn.w	r2, #1
 8006998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fae8 	bl	8006f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b80      	cmp	r3, #128	; 0x80
 80069ac:	d10e      	bne.n	80069cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	2b80      	cmp	r3, #128	; 0x80
 80069ba:	d107      	bne.n	80069cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fa00 	bl	8007dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d10e      	bne.n	80069fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e6:	2b80      	cmp	r3, #128	; 0x80
 80069e8:	d107      	bne.n	80069fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f9f3 	bl	8007de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d10e      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d107      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fac3 	bl	8006fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d10e      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d107      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f06f 0220 	mvn.w	r2, #32
 8006a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f9b3 	bl	8007db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a60:	d10f      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f9b9 	bl	8007df4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a90:	d10f      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f9ab 	bl	8007e08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac0:	d10f      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad0:	d107      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f99d 	bl	8007e1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006af0:	d10f      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b00:	d107      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 f98f 	bl	8007e30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e0ff      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b14      	cmp	r3, #20
 8006b46:	f200 80f0 	bhi.w	8006d2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006d2b 	.word	0x08006d2b
 8006b58:	08006d2b 	.word	0x08006d2b
 8006b5c:	08006d2b 	.word	0x08006d2b
 8006b60:	08006be5 	.word	0x08006be5
 8006b64:	08006d2b 	.word	0x08006d2b
 8006b68:	08006d2b 	.word	0x08006d2b
 8006b6c:	08006d2b 	.word	0x08006d2b
 8006b70:	08006c27 	.word	0x08006c27
 8006b74:	08006d2b 	.word	0x08006d2b
 8006b78:	08006d2b 	.word	0x08006d2b
 8006b7c:	08006d2b 	.word	0x08006d2b
 8006b80:	08006c67 	.word	0x08006c67
 8006b84:	08006d2b 	.word	0x08006d2b
 8006b88:	08006d2b 	.word	0x08006d2b
 8006b8c:	08006d2b 	.word	0x08006d2b
 8006b90:	08006ca9 	.word	0x08006ca9
 8006b94:	08006d2b 	.word	0x08006d2b
 8006b98:	08006d2b 	.word	0x08006d2b
 8006b9c:	08006d2b 	.word	0x08006d2b
 8006ba0:	08006ce9 	.word	0x08006ce9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fab0 	bl	8007110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0208 	orr.w	r2, r2, #8
 8006bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0204 	bic.w	r2, r2, #4
 8006bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6999      	ldr	r1, [r3, #24]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	619a      	str	r2, [r3, #24]
      break;
 8006be2:	e0a5      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb2a 	bl	8007244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6999      	ldr	r1, [r3, #24]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	021a      	lsls	r2, r3, #8
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	619a      	str	r2, [r3, #24]
      break;
 8006c24:	e084      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fb9d 	bl	800736c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0208 	orr.w	r2, r2, #8
 8006c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0204 	bic.w	r2, r2, #4
 8006c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69d9      	ldr	r1, [r3, #28]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	61da      	str	r2, [r3, #28]
      break;
 8006c64:	e064      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fc0f 	bl	8007490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69d9      	ldr	r1, [r3, #28]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	021a      	lsls	r2, r3, #8
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	61da      	str	r2, [r3, #28]
      break;
 8006ca6:	e043      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fc82 	bl	80075b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0204 	bic.w	r2, r2, #4
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ce6:	e023      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fccc 	bl	800768c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d28:	e002      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop

08006d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIM_ConfigClockSource+0x1c>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e0f6      	b.n	8006f4e <HAL_TIM_ConfigClockSource+0x20a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6f      	ldr	r2, [pc, #444]	; (8006f58 <HAL_TIM_ConfigClockSource+0x214>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 80c1 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	4a6d      	ldr	r2, [pc, #436]	; (8006f58 <HAL_TIM_ConfigClockSource+0x214>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f200 80c6 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da8:	4a6c      	ldr	r2, [pc, #432]	; (8006f5c <HAL_TIM_ConfigClockSource+0x218>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f000 80b9 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006db0:	4a6a      	ldr	r2, [pc, #424]	; (8006f5c <HAL_TIM_ConfigClockSource+0x218>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f200 80be 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	4a69      	ldr	r2, [pc, #420]	; (8006f60 <HAL_TIM_ConfigClockSource+0x21c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f000 80b1 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	4a67      	ldr	r2, [pc, #412]	; (8006f60 <HAL_TIM_ConfigClockSource+0x21c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	f200 80b6 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc8:	4a66      	ldr	r2, [pc, #408]	; (8006f64 <HAL_TIM_ConfigClockSource+0x220>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f000 80a9 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006dd0:	4a64      	ldr	r2, [pc, #400]	; (8006f64 <HAL_TIM_ConfigClockSource+0x220>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f200 80ae 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd8:	4a63      	ldr	r2, [pc, #396]	; (8006f68 <HAL_TIM_ConfigClockSource+0x224>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f000 80a1 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	4a61      	ldr	r2, [pc, #388]	; (8006f68 <HAL_TIM_ConfigClockSource+0x224>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f200 80a6 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de8:	4a60      	ldr	r2, [pc, #384]	; (8006f6c <HAL_TIM_ConfigClockSource+0x228>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	f000 8099 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006df0:	4a5e      	ldr	r2, [pc, #376]	; (8006f6c <HAL_TIM_ConfigClockSource+0x228>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	f200 809e 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006dfc:	f000 8091 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006e00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e04:	f200 8096 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0c:	f000 8089 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e14:	f200 808e 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1c:	d03e      	beq.n	8006e9c <HAL_TIM_ConfigClockSource+0x158>
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e22:	f200 8087 	bhi.w	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	f000 8086 	beq.w	8006f3a <HAL_TIM_ConfigClockSource+0x1f6>
 8006e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e32:	d87f      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e34:	2b70      	cmp	r3, #112	; 0x70
 8006e36:	d01a      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x12a>
 8006e38:	2b70      	cmp	r3, #112	; 0x70
 8006e3a:	d87b      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e3c:	2b60      	cmp	r3, #96	; 0x60
 8006e3e:	d050      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x19e>
 8006e40:	2b60      	cmp	r3, #96	; 0x60
 8006e42:	d877      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e44:	2b50      	cmp	r3, #80	; 0x50
 8006e46:	d03c      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x17e>
 8006e48:	2b50      	cmp	r3, #80	; 0x50
 8006e4a:	d873      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d058      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x1be>
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d86f      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e54:	2b30      	cmp	r3, #48	; 0x30
 8006e56:	d064      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006e58:	2b30      	cmp	r3, #48	; 0x30
 8006e5a:	d86b      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d060      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d867      	bhi.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d05c      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d05a      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x1de>
 8006e6c:	e062      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6899      	ldr	r1, [r3, #8]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f000 fced 	bl	800785c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	609a      	str	r2, [r3, #8]
      break;
 8006e9a:	e04f      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6899      	ldr	r1, [r3, #8]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f000 fcd6 	bl	800785c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ebe:	609a      	str	r2, [r3, #8]
      break;
 8006ec0:	e03c      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6859      	ldr	r1, [r3, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f000 fc48 	bl	8007764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2150      	movs	r1, #80	; 0x50
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fca1 	bl	8007822 <TIM_ITRx_SetConfig>
      break;
 8006ee0:	e02c      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6859      	ldr	r1, [r3, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f000 fc67 	bl	80077c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2160      	movs	r1, #96	; 0x60
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fc91 	bl	8007822 <TIM_ITRx_SetConfig>
      break;
 8006f00:	e01c      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6859      	ldr	r1, [r3, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f000 fc28 	bl	8007764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2140      	movs	r1, #64	; 0x40
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fc81 	bl	8007822 <TIM_ITRx_SetConfig>
      break;
 8006f20:	e00c      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f000 fc78 	bl	8007822 <TIM_ITRx_SetConfig>
      break;
 8006f32:	e003      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
      break;
 8006f38:	e000      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	00100070 	.word	0x00100070
 8006f5c:	00100060 	.word	0x00100060
 8006f60:	00100050 	.word	0x00100050
 8006f64:	00100040 	.word	0x00100040
 8006f68:	00100030 	.word	0x00100030
 8006f6c:	00100020 	.word	0x00100020

08006f70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a46      	ldr	r2, [pc, #280]	; (80070ec <TIM_Base_SetConfig+0x12c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d017      	beq.n	8007008 <TIM_Base_SetConfig+0x48>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fde:	d013      	beq.n	8007008 <TIM_Base_SetConfig+0x48>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a43      	ldr	r2, [pc, #268]	; (80070f0 <TIM_Base_SetConfig+0x130>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00f      	beq.n	8007008 <TIM_Base_SetConfig+0x48>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a42      	ldr	r2, [pc, #264]	; (80070f4 <TIM_Base_SetConfig+0x134>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00b      	beq.n	8007008 <TIM_Base_SetConfig+0x48>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a41      	ldr	r2, [pc, #260]	; (80070f8 <TIM_Base_SetConfig+0x138>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d007      	beq.n	8007008 <TIM_Base_SetConfig+0x48>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a40      	ldr	r2, [pc, #256]	; (80070fc <TIM_Base_SetConfig+0x13c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_Base_SetConfig+0x48>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a3f      	ldr	r2, [pc, #252]	; (8007100 <TIM_Base_SetConfig+0x140>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d108      	bne.n	800701a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a33      	ldr	r2, [pc, #204]	; (80070ec <TIM_Base_SetConfig+0x12c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d023      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007028:	d01f      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a30      	ldr	r2, [pc, #192]	; (80070f0 <TIM_Base_SetConfig+0x130>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01b      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2f      	ldr	r2, [pc, #188]	; (80070f4 <TIM_Base_SetConfig+0x134>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d017      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2e      	ldr	r2, [pc, #184]	; (80070f8 <TIM_Base_SetConfig+0x138>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2d      	ldr	r2, [pc, #180]	; (80070fc <TIM_Base_SetConfig+0x13c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00f      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <TIM_Base_SetConfig+0x144>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00b      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2c      	ldr	r2, [pc, #176]	; (8007108 <TIM_Base_SetConfig+0x148>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d007      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2b      	ldr	r2, [pc, #172]	; (800710c <TIM_Base_SetConfig+0x14c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_Base_SetConfig+0xaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a26      	ldr	r2, [pc, #152]	; (8007100 <TIM_Base_SetConfig+0x140>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d108      	bne.n	800707c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a12      	ldr	r2, [pc, #72]	; (80070ec <TIM_Base_SetConfig+0x12c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <TIM_Base_SetConfig+0x110>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a14      	ldr	r2, [pc, #80]	; (80070fc <TIM_Base_SetConfig+0x13c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00f      	beq.n	80070d0 <TIM_Base_SetConfig+0x110>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a14      	ldr	r2, [pc, #80]	; (8007104 <TIM_Base_SetConfig+0x144>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00b      	beq.n	80070d0 <TIM_Base_SetConfig+0x110>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a13      	ldr	r2, [pc, #76]	; (8007108 <TIM_Base_SetConfig+0x148>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_Base_SetConfig+0x110>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a12      	ldr	r2, [pc, #72]	; (800710c <TIM_Base_SetConfig+0x14c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_Base_SetConfig+0x110>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <TIM_Base_SetConfig+0x140>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d103      	bne.n	80070d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	615a      	str	r2, [r3, #20]
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40015000 	.word	0x40015000
 8007104:	40014000 	.word	0x40014000
 8007108:	40014400 	.word	0x40014400
 800710c:	40014800 	.word	0x40014800

08007110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f023 0201 	bic.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f023 0302 	bic.w	r3, r3, #2
 800715c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a30      	ldr	r2, [pc, #192]	; (800722c <TIM_OC1_SetConfig+0x11c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <TIM_OC1_SetConfig+0x88>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a2f      	ldr	r2, [pc, #188]	; (8007230 <TIM_OC1_SetConfig+0x120>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00f      	beq.n	8007198 <TIM_OC1_SetConfig+0x88>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a2e      	ldr	r2, [pc, #184]	; (8007234 <TIM_OC1_SetConfig+0x124>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00b      	beq.n	8007198 <TIM_OC1_SetConfig+0x88>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a2d      	ldr	r2, [pc, #180]	; (8007238 <TIM_OC1_SetConfig+0x128>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_OC1_SetConfig+0x88>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a2c      	ldr	r2, [pc, #176]	; (800723c <TIM_OC1_SetConfig+0x12c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_OC1_SetConfig+0x88>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a2b      	ldr	r2, [pc, #172]	; (8007240 <TIM_OC1_SetConfig+0x130>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d10c      	bne.n	80071b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0308 	bic.w	r3, r3, #8
 800719e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f023 0304 	bic.w	r3, r3, #4
 80071b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <TIM_OC1_SetConfig+0x11c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d013      	beq.n	80071e2 <TIM_OC1_SetConfig+0xd2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <TIM_OC1_SetConfig+0x120>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00f      	beq.n	80071e2 <TIM_OC1_SetConfig+0xd2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a1b      	ldr	r2, [pc, #108]	; (8007234 <TIM_OC1_SetConfig+0x124>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00b      	beq.n	80071e2 <TIM_OC1_SetConfig+0xd2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1a      	ldr	r2, [pc, #104]	; (8007238 <TIM_OC1_SetConfig+0x128>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_OC1_SetConfig+0xd2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a19      	ldr	r2, [pc, #100]	; (800723c <TIM_OC1_SetConfig+0x12c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_OC1_SetConfig+0xd2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a18      	ldr	r2, [pc, #96]	; (8007240 <TIM_OC1_SetConfig+0x130>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d111      	bne.n	8007206 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	621a      	str	r2, [r3, #32]
}
 8007220:	bf00      	nop
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40012c00 	.word	0x40012c00
 8007230:	40013400 	.word	0x40013400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800
 8007240:	40015000 	.word	0x40015000

08007244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0210 	bic.w	r2, r3, #16
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0320 	bic.w	r3, r3, #32
 8007292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a2c      	ldr	r2, [pc, #176]	; (8007354 <TIM_OC2_SetConfig+0x110>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d007      	beq.n	80072b8 <TIM_OC2_SetConfig+0x74>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a2b      	ldr	r2, [pc, #172]	; (8007358 <TIM_OC2_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC2_SetConfig+0x74>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a2a      	ldr	r2, [pc, #168]	; (800735c <TIM_OC2_SetConfig+0x118>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10d      	bne.n	80072d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <TIM_OC2_SetConfig+0x110>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d013      	beq.n	8007304 <TIM_OC2_SetConfig+0xc0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1e      	ldr	r2, [pc, #120]	; (8007358 <TIM_OC2_SetConfig+0x114>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00f      	beq.n	8007304 <TIM_OC2_SetConfig+0xc0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <TIM_OC2_SetConfig+0x11c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00b      	beq.n	8007304 <TIM_OC2_SetConfig+0xc0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1d      	ldr	r2, [pc, #116]	; (8007364 <TIM_OC2_SetConfig+0x120>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d007      	beq.n	8007304 <TIM_OC2_SetConfig+0xc0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1c      	ldr	r2, [pc, #112]	; (8007368 <TIM_OC2_SetConfig+0x124>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC2_SetConfig+0xc0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a17      	ldr	r2, [pc, #92]	; (800735c <TIM_OC2_SetConfig+0x118>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d113      	bne.n	800732c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800730a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40012c00 	.word	0x40012c00
 8007358:	40013400 	.word	0x40013400
 800735c:	40015000 	.word	0x40015000
 8007360:	40014000 	.word	0x40014000
 8007364:	40014400 	.word	0x40014400
 8007368:	40014800 	.word	0x40014800

0800736c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2b      	ldr	r2, [pc, #172]	; (8007478 <TIM_OC3_SetConfig+0x10c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d007      	beq.n	80073de <TIM_OC3_SetConfig+0x72>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2a      	ldr	r2, [pc, #168]	; (800747c <TIM_OC3_SetConfig+0x110>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <TIM_OC3_SetConfig+0x72>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a29      	ldr	r2, [pc, #164]	; (8007480 <TIM_OC3_SetConfig+0x114>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d10d      	bne.n	80073fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <TIM_OC3_SetConfig+0x10c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <TIM_OC3_SetConfig+0xbe>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1d      	ldr	r2, [pc, #116]	; (800747c <TIM_OC3_SetConfig+0x110>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00f      	beq.n	800742a <TIM_OC3_SetConfig+0xbe>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <TIM_OC3_SetConfig+0x118>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00b      	beq.n	800742a <TIM_OC3_SetConfig+0xbe>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <TIM_OC3_SetConfig+0x11c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d007      	beq.n	800742a <TIM_OC3_SetConfig+0xbe>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1b      	ldr	r2, [pc, #108]	; (800748c <TIM_OC3_SetConfig+0x120>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_OC3_SetConfig+0xbe>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <TIM_OC3_SetConfig+0x114>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d113      	bne.n	8007452 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	621a      	str	r2, [r3, #32]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40015000 	.word	0x40015000
 8007484:	40014000 	.word	0x40014000
 8007488:	40014400 	.word	0x40014400
 800748c:	40014800 	.word	0x40014800

08007490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <TIM_OC4_SetConfig+0x110>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d007      	beq.n	8007504 <TIM_OC4_SetConfig+0x74>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a2b      	ldr	r2, [pc, #172]	; (80075a4 <TIM_OC4_SetConfig+0x114>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_OC4_SetConfig+0x74>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <TIM_OC4_SetConfig+0x118>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d10d      	bne.n	8007520 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800750a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	031b      	lsls	r3, r3, #12
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800751e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <TIM_OC4_SetConfig+0x110>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <TIM_OC4_SetConfig+0xc0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <TIM_OC4_SetConfig+0x114>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_OC4_SetConfig+0xc0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <TIM_OC4_SetConfig+0x11c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_OC4_SetConfig+0xc0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1d      	ldr	r2, [pc, #116]	; (80075b0 <TIM_OC4_SetConfig+0x120>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_OC4_SetConfig+0xc0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <TIM_OC4_SetConfig+0x124>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_OC4_SetConfig+0xc0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <TIM_OC4_SetConfig+0x118>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d113      	bne.n	8007578 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007556:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800755e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	019b      	lsls	r3, r3, #6
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	4313      	orrs	r3, r2
 800756a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40012c00 	.word	0x40012c00
 80075a4:	40013400 	.word	0x40013400
 80075a8:	40015000 	.word	0x40015000
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	041b      	lsls	r3, r3, #16
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a19      	ldr	r2, [pc, #100]	; (8007674 <TIM_OC5_SetConfig+0xbc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <TIM_OC5_SetConfig+0x82>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a18      	ldr	r2, [pc, #96]	; (8007678 <TIM_OC5_SetConfig+0xc0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00f      	beq.n	800763a <TIM_OC5_SetConfig+0x82>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a17      	ldr	r2, [pc, #92]	; (800767c <TIM_OC5_SetConfig+0xc4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00b      	beq.n	800763a <TIM_OC5_SetConfig+0x82>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a16      	ldr	r2, [pc, #88]	; (8007680 <TIM_OC5_SetConfig+0xc8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d007      	beq.n	800763a <TIM_OC5_SetConfig+0x82>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a15      	ldr	r2, [pc, #84]	; (8007684 <TIM_OC5_SetConfig+0xcc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d003      	beq.n	800763a <TIM_OC5_SetConfig+0x82>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a14      	ldr	r2, [pc, #80]	; (8007688 <TIM_OC5_SetConfig+0xd0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d109      	bne.n	800764e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	621a      	str	r2, [r3, #32]
}
 8007668:	bf00      	nop
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	40012c00 	.word	0x40012c00
 8007678:	40013400 	.word	0x40013400
 800767c:	40014000 	.word	0x40014000
 8007680:	40014400 	.word	0x40014400
 8007684:	40014800 	.word	0x40014800
 8007688:	40015000 	.word	0x40015000

0800768c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	051b      	lsls	r3, r3, #20
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1a      	ldr	r2, [pc, #104]	; (800774c <TIM_OC6_SetConfig+0xc0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d013      	beq.n	8007710 <TIM_OC6_SetConfig+0x84>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a19      	ldr	r2, [pc, #100]	; (8007750 <TIM_OC6_SetConfig+0xc4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00f      	beq.n	8007710 <TIM_OC6_SetConfig+0x84>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <TIM_OC6_SetConfig+0xc8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00b      	beq.n	8007710 <TIM_OC6_SetConfig+0x84>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <TIM_OC6_SetConfig+0xcc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d007      	beq.n	8007710 <TIM_OC6_SetConfig+0x84>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a16      	ldr	r2, [pc, #88]	; (800775c <TIM_OC6_SetConfig+0xd0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_OC6_SetConfig+0x84>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a15      	ldr	r2, [pc, #84]	; (8007760 <TIM_OC6_SetConfig+0xd4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d109      	bne.n	8007724 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40013400 	.word	0x40013400
 8007754:	40014000 	.word	0x40014000
 8007758:	40014400 	.word	0x40014400
 800775c:	40014800 	.word	0x40014800
 8007760:	40015000 	.word	0x40015000

08007764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f023 0201 	bic.w	r2, r3, #1
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800778e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f023 030a 	bic.w	r3, r3, #10
 80077a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b087      	sub	sp, #28
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f023 0210 	bic.w	r2, r3, #16
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	031b      	lsls	r3, r3, #12
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	f043 0307 	orr.w	r3, r3, #7
 8007848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	609a      	str	r2, [r3, #8]
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	021a      	lsls	r2, r3, #8
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	431a      	orrs	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4313      	orrs	r3, r2
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	609a      	str	r2, [r3, #8]
}
 8007890:	bf00      	nop
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f003 031f 	and.w	r3, r3, #31
 80078ae:	2201      	movs	r2, #1
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1a      	ldr	r2, [r3, #32]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	43db      	mvns	r3, r3
 80078be:	401a      	ands	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1a      	ldr	r2, [r3, #32]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 031f 	and.w	r3, r3, #31
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	fa01 f303 	lsl.w	r3, r1, r3
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <HAL_TIMEx_PWMN_Start+0x24>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b01      	cmp	r3, #1
 8007902:	bf14      	ite	ne
 8007904:	2301      	movne	r3, #1
 8007906:	2300      	moveq	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	e022      	b.n	8007952 <HAL_TIMEx_PWMN_Start+0x6a>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b04      	cmp	r3, #4
 8007910:	d109      	bne.n	8007926 <HAL_TIMEx_PWMN_Start+0x3e>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	e015      	b.n	8007952 <HAL_TIMEx_PWMN_Start+0x6a>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d109      	bne.n	8007940 <HAL_TIMEx_PWMN_Start+0x58>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	bf14      	ite	ne
 8007938:	2301      	movne	r3, #1
 800793a:	2300      	moveq	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	e008      	b.n	8007952 <HAL_TIMEx_PWMN_Start+0x6a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	bf14      	ite	ne
 800794c:	2301      	movne	r3, #1
 800794e:	2300      	moveq	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e073      	b.n	8007a42 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d104      	bne.n	800796a <HAL_TIMEx_PWMN_Start+0x82>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007968:	e013      	b.n	8007992 <HAL_TIMEx_PWMN_Start+0xaa>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b04      	cmp	r3, #4
 800796e:	d104      	bne.n	800797a <HAL_TIMEx_PWMN_Start+0x92>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007978:	e00b      	b.n	8007992 <HAL_TIMEx_PWMN_Start+0xaa>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b08      	cmp	r3, #8
 800797e:	d104      	bne.n	800798a <HAL_TIMEx_PWMN_Start+0xa2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007988:	e003      	b.n	8007992 <HAL_TIMEx_PWMN_Start+0xaa>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2204      	movs	r2, #4
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fa52 	bl	8007e44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a25      	ldr	r2, [pc, #148]	; (8007a4c <HAL_TIMEx_PWMN_Start+0x164>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d022      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c2:	d01d      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a21      	ldr	r2, [pc, #132]	; (8007a50 <HAL_TIMEx_PWMN_Start+0x168>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a20      	ldr	r2, [pc, #128]	; (8007a54 <HAL_TIMEx_PWMN_Start+0x16c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1e      	ldr	r2, [pc, #120]	; (8007a58 <HAL_TIMEx_PWMN_Start+0x170>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <HAL_TIMEx_PWMN_Start+0x174>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <HAL_TIMEx_PWMN_Start+0x178>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIMEx_PWMN_Start+0x118>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <HAL_TIMEx_PWMN_Start+0x17c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d115      	bne.n	8007a2c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <HAL_TIMEx_PWMN_Start+0x180>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d015      	beq.n	8007a3e <HAL_TIMEx_PWMN_Start+0x156>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a18:	d011      	beq.n	8007a3e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	e008      	b.n	8007a3e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e000      	b.n	8007a40 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40012c00 	.word	0x40012c00
 8007a50:	40000400 	.word	0x40000400
 8007a54:	40000800 	.word	0x40000800
 8007a58:	40000c00 	.word	0x40000c00
 8007a5c:	40013400 	.word	0x40013400
 8007a60:	40014000 	.word	0x40014000
 8007a64:	40015000 	.word	0x40015000
 8007a68:	00010007 	.word	0x00010007

08007a6c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f9e0 	bl	8007e44 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6a1a      	ldr	r2, [r3, #32]
 8007a8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10f      	bne.n	8007ab4 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6a1a      	ldr	r2, [r3, #32]
 8007a9a:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d107      	bne.n	8007ab4 <HAL_TIMEx_PWMN_Stop+0x48>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	f241 1311 	movw	r3, #4369	; 0x1111
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10f      	bne.n	8007ae4 <HAL_TIMEx_PWMN_Stop+0x78>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6a1a      	ldr	r2, [r3, #32]
 8007aca:	f244 4344 	movw	r3, #17476	; 0x4444
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d107      	bne.n	8007ae4 <HAL_TIMEx_PWMN_Stop+0x78>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0201 	bic.w	r2, r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d104      	bne.n	8007af4 <HAL_TIMEx_PWMN_Stop+0x88>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af2:	e013      	b.n	8007b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d104      	bne.n	8007b04 <HAL_TIMEx_PWMN_Stop+0x98>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b02:	e00b      	b.n	8007b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d104      	bne.n	8007b14 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b12:	e003      	b.n	8007b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e074      	b.n	8007c2a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a34      	ldr	r2, [pc, #208]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d009      	beq.n	8007b7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a33      	ldr	r2, [pc, #204]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d004      	beq.n	8007b7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a31      	ldr	r2, [pc, #196]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d108      	bne.n	8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d022      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc0:	d01d      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d018      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d013      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00e      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d004      	beq.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d10c      	bne.n	8007c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40012c00 	.word	0x40012c00
 8007c3c:	40013400 	.word	0x40013400
 8007c40:	40015000 	.word	0x40015000
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40014000 	.word	0x40014000

08007c54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e096      	b.n	8007d9e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	041b      	lsls	r3, r3, #16
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a2f      	ldr	r2, [pc, #188]	; (8007dac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d009      	beq.n	8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a2d      	ldr	r2, [pc, #180]	; (8007db0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d004      	beq.n	8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2c      	ldr	r2, [pc, #176]	; (8007db4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d106      	bne.n	8007d16 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a24      	ldr	r2, [pc, #144]	; (8007dac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d009      	beq.n	8007d34 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a22      	ldr	r2, [pc, #136]	; (8007db0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d004      	beq.n	8007d34 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a21      	ldr	r2, [pc, #132]	; (8007db4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d12b      	bne.n	8007d8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	051b      	lsls	r3, r3, #20
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a11      	ldr	r2, [pc, #68]	; (8007dac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d009      	beq.n	8007d7e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a10      	ldr	r2, [pc, #64]	; (8007db0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d106      	bne.n	8007d8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40013400 	.word	0x40013400
 8007db4:	40015000 	.word	0x40015000

08007db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2204      	movs	r2, #4
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e042      	b.n	8007f26 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fa fb30 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2224      	movs	r2, #36	; 0x24
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc51 	bl	8008778 <UART_SetConfig>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e022      	b.n	8007f26 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 ff41 	bl	8008d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007efc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0201 	orr.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 ffc8 	bl	8008eb4 <UART_CheckIdleState>
 8007f24:	4603      	mov	r3, r0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b08a      	sub	sp, #40	; 0x28
 8007f32:	af02      	add	r7, sp, #8
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	f040 8083 	bne.w	8008050 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_UART_Transmit+0x28>
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e07b      	b.n	8008052 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_UART_Transmit+0x3a>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e074      	b.n	8008052 <HAL_UART_Transmit+0x124>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2221      	movs	r2, #33	; 0x21
 8007f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f80:	f7fa fe0c 	bl	8002b9c <HAL_GetTick>
 8007f84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9e:	d108      	bne.n	8007fb2 <HAL_UART_Transmit+0x84>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d104      	bne.n	8007fb2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e003      	b.n	8007fba <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007fc2:	e02c      	b.n	800801e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 ffbb 	bl	8008f4a <UART_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e039      	b.n	8008052 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	e007      	b.n	800800c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	3301      	adds	r3, #1
 800800a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1cc      	bne.n	8007fc4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2200      	movs	r2, #0
 8008032:	2140      	movs	r1, #64	; 0x40
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 ff88 	bl	8008f4a <UART_WaitOnFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e006      	b.n	8008052 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	e000      	b.n	8008052 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008050:	2302      	movs	r3, #2
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08a      	sub	sp, #40	; 0x28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	2b20      	cmp	r3, #32
 8008072:	d142      	bne.n	80080fa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_UART_Receive_IT+0x24>
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e03b      	b.n	80080fc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UART_Receive_IT+0x36>
 800808e:	2302      	movs	r3, #2
 8008090:	e034      	b.n	80080fc <HAL_UART_Receive_IT+0xa0>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a17      	ldr	r2, [pc, #92]	; (8008104 <HAL_UART_Receive_IT+0xa8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d01f      	beq.n	80080ea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d018      	beq.n	80080ea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	613b      	str	r3, [r7, #16]
   return(result);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	623b      	str	r3, [r7, #32]
 80080d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	69f9      	ldr	r1, [r7, #28]
 80080dc:	6a3a      	ldr	r2, [r7, #32]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fff3 	bl	80090dc <UART_Start_Receive_IT>
 80080f6:	4603      	mov	r3, r0
 80080f8:	e000      	b.n	80080fc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080fa:	2302      	movs	r3, #2
  }
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3728      	adds	r7, #40	; 0x28
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40008000 	.word	0x40008000

08008108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b0ba      	sub	sp, #232	; 0xe8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800812e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008132:	f640 030f 	movw	r3, #2063	; 0x80f
 8008136:	4013      	ands	r3, r2
 8008138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800813c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d11b      	bne.n	800817c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d015      	beq.n	800817c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800815c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 82d6 	beq.w	800871e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
      }
      return;
 800817a:	e2d0      	b.n	800871e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800817c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 811f 	beq.w	80083c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008186:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800818a:	4b8b      	ldr	r3, [pc, #556]	; (80083b8 <HAL_UART_IRQHandler+0x2b0>)
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008192:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008196:	4b89      	ldr	r3, [pc, #548]	; (80083bc <HAL_UART_IRQHandler+0x2b4>)
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 8112 	beq.w	80083c4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d011      	beq.n	80081d0 <HAL_UART_IRQHandler+0xc8>
 80081ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2201      	movs	r2, #1
 80081be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c6:	f043 0201 	orr.w	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d011      	beq.n	8008200 <HAL_UART_IRQHandler+0xf8>
 80081dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2202      	movs	r2, #2
 80081ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f6:	f043 0204 	orr.w	r2, r3, #4
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d011      	beq.n	8008230 <HAL_UART_IRQHandler+0x128>
 800820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2204      	movs	r2, #4
 800821e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008226:	f043 0202 	orr.w	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d017      	beq.n	800826c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800823c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d105      	bne.n	8008254 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008248:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800824c:	4b5a      	ldr	r3, [pc, #360]	; (80083b8 <HAL_UART_IRQHandler+0x2b0>)
 800824e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2208      	movs	r2, #8
 800825a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008262:	f043 0208 	orr.w	r2, r3, #8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008274:	2b00      	cmp	r3, #0
 8008276:	d012      	beq.n	800829e <HAL_UART_IRQHandler+0x196>
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00c      	beq.n	800829e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800828c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008294:	f043 0220 	orr.w	r2, r3, #32
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 823c 	beq.w	8008722 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d013      	beq.n	80082de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d005      	beq.n	8008302 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d04f      	beq.n	80083a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f814 	bl	8009330 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d141      	bne.n	800839a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3308      	adds	r3, #8
 800831c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800832c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3308      	adds	r3, #8
 800833e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800834e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800835a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1d9      	bne.n	8008316 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d013      	beq.n	8008392 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	4a14      	ldr	r2, [pc, #80]	; (80083c0 <HAL_UART_IRQHandler+0x2b8>)
 8008370:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008376:	4618      	mov	r0, r3
 8008378:	f7fc faec 	bl	8004954 <HAL_DMA_Abort_IT>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d017      	beq.n	80083b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	e00f      	b.n	80083b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9da 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008398:	e00b      	b.n	80083b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9d6 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a0:	e007      	b.n	80083b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9d2 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083b0:	e1b7      	b.n	8008722 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b2:	bf00      	nop
    return;
 80083b4:	e1b5      	b.n	8008722 <HAL_UART_IRQHandler+0x61a>
 80083b6:	bf00      	nop
 80083b8:	10000001 	.word	0x10000001
 80083bc:	04000120 	.word	0x04000120
 80083c0:	080093fd 	.word	0x080093fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	f040 814a 	bne.w	8008662 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 8143 	beq.w	8008662 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 813c 	beq.w	8008662 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2210      	movs	r2, #16
 80083f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	f040 80b5 	bne.w	800856c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800840e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8187 	beq.w	8008726 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800841e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008422:	429a      	cmp	r2, r3
 8008424:	f080 817f 	bcs.w	8008726 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800842e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b00      	cmp	r3, #0
 8008440:	f040 8086 	bne.w	8008550 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800845c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800846e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008472:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800847a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1da      	bne.n	8008444 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3308      	adds	r3, #8
 8008494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800849e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3308      	adds	r3, #8
 80084ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e1      	bne.n	800848e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3308      	adds	r3, #8
 80084ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e3      	bne.n	80084ca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800851e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008520:	f023 0310 	bic.w	r3, r3, #16
 8008524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008532:	65bb      	str	r3, [r7, #88]	; 0x58
 8008534:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e4      	bne.n	8008510 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854a:	4618      	mov	r0, r3
 800854c:	f7fc f9a9 	bl	80048a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800855c:	b29b      	uxth	r3, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f8fb 	bl	8008760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800856a:	e0dc      	b.n	8008726 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008578:	b29b      	uxth	r3, r3
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80ce 	beq.w	800872a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800858e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80c9 	beq.w	800872a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ba:	647b      	str	r3, [r7, #68]	; 0x44
 80085bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e4      	bne.n	8008598 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	623b      	str	r3, [r7, #32]
   return(result);
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085f6:	633a      	str	r2, [r7, #48]	; 0x30
 80085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e1      	bne.n	80085ce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	60fb      	str	r3, [r7, #12]
   return(result);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0310 	bic.w	r3, r3, #16
 8008632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	617b      	str	r3, [r7, #20]
   return(result);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e4      	bne.n	800861e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f880 	bl	8008760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008660:	e063      	b.n	800872a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <HAL_UART_IRQHandler+0x584>
 800866e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d008      	beq.n	800868c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 fb57 	bl	8009d38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800868a:	e051      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800868c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008694:	2b00      	cmp	r3, #0
 8008696:	d014      	beq.n	80086c2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d008      	beq.n	80086c2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d03a      	beq.n	800872e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
    }
    return;
 80086c0:	e035      	b.n	800872e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_UART_IRQHandler+0x5da>
 80086ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fea4 	bl	8009428 <UART_EndTransmit_IT>
    return;
 80086e0:	e026      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <HAL_UART_IRQHandler+0x5fa>
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fb30 	bl	8009d60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008700:	e016      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d010      	beq.n	8008730 <HAL_UART_IRQHandler+0x628>
 800870e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008712:	2b00      	cmp	r3, #0
 8008714:	da0c      	bge.n	8008730 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fb18 	bl	8009d4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800871c:	e008      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
      return;
 800871e:	bf00      	nop
 8008720:	e006      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
    return;
 8008722:	bf00      	nop
 8008724:	e004      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
      return;
 8008726:	bf00      	nop
 8008728:	e002      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
      return;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_UART_IRQHandler+0x628>
    return;
 800872e:	bf00      	nop
  }
}
 8008730:	37e8      	adds	r7, #232	; 0xe8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop

08008738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800877c:	b08c      	sub	sp, #48	; 0x30
 800877e:	af00      	add	r7, sp, #0
 8008780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	431a      	orrs	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	431a      	orrs	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	4313      	orrs	r3, r2
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4baa      	ldr	r3, [pc, #680]	; (8008a50 <UART_SetConfig+0x2d8>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087b0:	430b      	orrs	r3, r1
 80087b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a9f      	ldr	r2, [pc, #636]	; (8008a54 <UART_SetConfig+0x2dc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d004      	beq.n	80087e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e0:	4313      	orrs	r3, r2
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008802:	f023 010f 	bic.w	r1, r3, #15
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a90      	ldr	r2, [pc, #576]	; (8008a58 <UART_SetConfig+0x2e0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d125      	bne.n	8008868 <UART_SetConfig+0xf0>
 800881c:	4b8f      	ldr	r3, [pc, #572]	; (8008a5c <UART_SetConfig+0x2e4>)
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d81a      	bhi.n	8008860 <UART_SetConfig+0xe8>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0xb8>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008841 	.word	0x08008841
 8008834:	08008851 	.word	0x08008851
 8008838:	08008849 	.word	0x08008849
 800883c:	08008859 	.word	0x08008859
 8008840:	2301      	movs	r3, #1
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008846:	e116      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884e:	e112      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008856:	e10e      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885e:	e10a      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e106      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a7c      	ldr	r2, [pc, #496]	; (8008a60 <UART_SetConfig+0x2e8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d138      	bne.n	80088e4 <UART_SetConfig+0x16c>
 8008872:	4b7a      	ldr	r3, [pc, #488]	; (8008a5c <UART_SetConfig+0x2e4>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008878:	f003 030c 	and.w	r3, r3, #12
 800887c:	2b0c      	cmp	r3, #12
 800887e:	d82d      	bhi.n	80088dc <UART_SetConfig+0x164>
 8008880:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0x110>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088bd 	.word	0x080088bd
 800888c:	080088dd 	.word	0x080088dd
 8008890:	080088dd 	.word	0x080088dd
 8008894:	080088dd 	.word	0x080088dd
 8008898:	080088cd 	.word	0x080088cd
 800889c:	080088dd 	.word	0x080088dd
 80088a0:	080088dd 	.word	0x080088dd
 80088a4:	080088dd 	.word	0x080088dd
 80088a8:	080088c5 	.word	0x080088c5
 80088ac:	080088dd 	.word	0x080088dd
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	080088dd 	.word	0x080088dd
 80088b8:	080088d5 	.word	0x080088d5
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c2:	e0d8      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ca:	e0d4      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d2:	e0d0      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088da:	e0cc      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e2:	e0c8      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a5e      	ldr	r2, [pc, #376]	; (8008a64 <UART_SetConfig+0x2ec>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d125      	bne.n	800893a <UART_SetConfig+0x1c2>
 80088ee:	4b5b      	ldr	r3, [pc, #364]	; (8008a5c <UART_SetConfig+0x2e4>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088f8:	2b30      	cmp	r3, #48	; 0x30
 80088fa:	d016      	beq.n	800892a <UART_SetConfig+0x1b2>
 80088fc:	2b30      	cmp	r3, #48	; 0x30
 80088fe:	d818      	bhi.n	8008932 <UART_SetConfig+0x1ba>
 8008900:	2b20      	cmp	r3, #32
 8008902:	d00a      	beq.n	800891a <UART_SetConfig+0x1a2>
 8008904:	2b20      	cmp	r3, #32
 8008906:	d814      	bhi.n	8008932 <UART_SetConfig+0x1ba>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <UART_SetConfig+0x19a>
 800890c:	2b10      	cmp	r3, #16
 800890e:	d008      	beq.n	8008922 <UART_SetConfig+0x1aa>
 8008910:	e00f      	b.n	8008932 <UART_SetConfig+0x1ba>
 8008912:	2300      	movs	r3, #0
 8008914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008918:	e0ad      	b.n	8008a76 <UART_SetConfig+0x2fe>
 800891a:	2302      	movs	r3, #2
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008920:	e0a9      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008922:	2304      	movs	r3, #4
 8008924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008928:	e0a5      	b.n	8008a76 <UART_SetConfig+0x2fe>
 800892a:	2308      	movs	r3, #8
 800892c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008930:	e0a1      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008932:	2310      	movs	r3, #16
 8008934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008938:	e09d      	b.n	8008a76 <UART_SetConfig+0x2fe>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a4a      	ldr	r2, [pc, #296]	; (8008a68 <UART_SetConfig+0x2f0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d125      	bne.n	8008990 <UART_SetConfig+0x218>
 8008944:	4b45      	ldr	r3, [pc, #276]	; (8008a5c <UART_SetConfig+0x2e4>)
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800894e:	2bc0      	cmp	r3, #192	; 0xc0
 8008950:	d016      	beq.n	8008980 <UART_SetConfig+0x208>
 8008952:	2bc0      	cmp	r3, #192	; 0xc0
 8008954:	d818      	bhi.n	8008988 <UART_SetConfig+0x210>
 8008956:	2b80      	cmp	r3, #128	; 0x80
 8008958:	d00a      	beq.n	8008970 <UART_SetConfig+0x1f8>
 800895a:	2b80      	cmp	r3, #128	; 0x80
 800895c:	d814      	bhi.n	8008988 <UART_SetConfig+0x210>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <UART_SetConfig+0x1f0>
 8008962:	2b40      	cmp	r3, #64	; 0x40
 8008964:	d008      	beq.n	8008978 <UART_SetConfig+0x200>
 8008966:	e00f      	b.n	8008988 <UART_SetConfig+0x210>
 8008968:	2300      	movs	r3, #0
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e082      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008970:	2302      	movs	r3, #2
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e07e      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e07a      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e076      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898e:	e072      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a35      	ldr	r2, [pc, #212]	; (8008a6c <UART_SetConfig+0x2f4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d12a      	bne.n	80089f0 <UART_SetConfig+0x278>
 800899a:	4b30      	ldr	r3, [pc, #192]	; (8008a5c <UART_SetConfig+0x2e4>)
 800899c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a8:	d01a      	beq.n	80089e0 <UART_SetConfig+0x268>
 80089aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ae:	d81b      	bhi.n	80089e8 <UART_SetConfig+0x270>
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b4:	d00c      	beq.n	80089d0 <UART_SetConfig+0x258>
 80089b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ba:	d815      	bhi.n	80089e8 <UART_SetConfig+0x270>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <UART_SetConfig+0x250>
 80089c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c4:	d008      	beq.n	80089d8 <UART_SetConfig+0x260>
 80089c6:	e00f      	b.n	80089e8 <UART_SetConfig+0x270>
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e052      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80089d0:	2302      	movs	r3, #2
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e04e      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80089d8:	2304      	movs	r3, #4
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e04a      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80089e0:	2308      	movs	r3, #8
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e6:	e046      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80089e8:	2310      	movs	r3, #16
 80089ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ee:	e042      	b.n	8008a76 <UART_SetConfig+0x2fe>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <UART_SetConfig+0x2dc>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d13a      	bne.n	8008a70 <UART_SetConfig+0x2f8>
 80089fa:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <UART_SetConfig+0x2e4>)
 80089fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a08:	d01a      	beq.n	8008a40 <UART_SetConfig+0x2c8>
 8008a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a0e:	d81b      	bhi.n	8008a48 <UART_SetConfig+0x2d0>
 8008a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a14:	d00c      	beq.n	8008a30 <UART_SetConfig+0x2b8>
 8008a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a1a:	d815      	bhi.n	8008a48 <UART_SetConfig+0x2d0>
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <UART_SetConfig+0x2b0>
 8008a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a24:	d008      	beq.n	8008a38 <UART_SetConfig+0x2c0>
 8008a26:	e00f      	b.n	8008a48 <UART_SetConfig+0x2d0>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2e:	e022      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008a30:	2302      	movs	r3, #2
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a36:	e01e      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a3e:	e01a      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008a40:	2308      	movs	r3, #8
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a46:	e016      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a4e:	e012      	b.n	8008a76 <UART_SetConfig+0x2fe>
 8008a50:	cfff69f3 	.word	0xcfff69f3
 8008a54:	40008000 	.word	0x40008000
 8008a58:	40013800 	.word	0x40013800
 8008a5c:	40021000 	.word	0x40021000
 8008a60:	40004400 	.word	0x40004400
 8008a64:	40004800 	.word	0x40004800
 8008a68:	40004c00 	.word	0x40004c00
 8008a6c:	40005000 	.word	0x40005000
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4aae      	ldr	r2, [pc, #696]	; (8008d34 <UART_SetConfig+0x5bc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	f040 8097 	bne.w	8008bb0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d823      	bhi.n	8008ad2 <UART_SetConfig+0x35a>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <UART_SetConfig+0x318>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008ad3 	.word	0x08008ad3
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ad3 	.word	0x08008ad3
 8008aa0:	08008ac3 	.word	0x08008ac3
 8008aa4:	08008ad3 	.word	0x08008ad3
 8008aa8:	08008ad3 	.word	0x08008ad3
 8008aac:	08008ad3 	.word	0x08008ad3
 8008ab0:	08008acb 	.word	0x08008acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab4:	f7fd f838 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8008ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008aba:	e010      	b.n	8008ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008abc:	4b9e      	ldr	r3, [pc, #632]	; (8008d38 <UART_SetConfig+0x5c0>)
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ac0:	e00d      	b.n	8008ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ac2:	f7fc ffc3 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8008ac6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ac8:	e009      	b.n	8008ade <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ad0:	e005      	b.n	8008ade <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8130 	beq.w	8008d46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	4a94      	ldr	r2, [pc, #592]	; (8008d3c <UART_SetConfig+0x5c4>)
 8008aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	4413      	add	r3, r2
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d305      	bcc.n	8008b16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d903      	bls.n	8008b1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b1c:	e113      	b.n	8008d46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	2200      	movs	r2, #0
 8008b22:	60bb      	str	r3, [r7, #8]
 8008b24:	60fa      	str	r2, [r7, #12]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	4a84      	ldr	r2, [pc, #528]	; (8008d3c <UART_SetConfig+0x5c4>)
 8008b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2200      	movs	r2, #0
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b40:	f7f8 f8da 	bl	8000cf8 <__aeabi_uldivmod>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	020b      	lsls	r3, r1, #8
 8008b56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b5a:	0202      	lsls	r2, r0, #8
 8008b5c:	6979      	ldr	r1, [r7, #20]
 8008b5e:	6849      	ldr	r1, [r1, #4]
 8008b60:	0849      	lsrs	r1, r1, #1
 8008b62:	2000      	movs	r0, #0
 8008b64:	460c      	mov	r4, r1
 8008b66:	4605      	mov	r5, r0
 8008b68:	eb12 0804 	adds.w	r8, r2, r4
 8008b6c:	eb43 0905 	adc.w	r9, r3, r5
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	469a      	mov	sl, r3
 8008b78:	4693      	mov	fp, r2
 8008b7a:	4652      	mov	r2, sl
 8008b7c:	465b      	mov	r3, fp
 8008b7e:	4640      	mov	r0, r8
 8008b80:	4649      	mov	r1, r9
 8008b82:	f7f8 f8b9 	bl	8000cf8 <__aeabi_uldivmod>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b94:	d308      	bcc.n	8008ba8 <UART_SetConfig+0x430>
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9c:	d204      	bcs.n	8008ba8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6a3a      	ldr	r2, [r7, #32]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	e0ce      	b.n	8008d46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bae:	e0ca      	b.n	8008d46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb8:	d166      	bne.n	8008c88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d827      	bhi.n	8008c12 <UART_SetConfig+0x49a>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x450>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	08008c13 	.word	0x08008c13
 8008bd8:	08008c03 	.word	0x08008c03
 8008bdc:	08008c13 	.word	0x08008c13
 8008be0:	08008c13 	.word	0x08008c13
 8008be4:	08008c13 	.word	0x08008c13
 8008be8:	08008c0b 	.word	0x08008c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bec:	f7fc ff9c 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8008bf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bf2:	e014      	b.n	8008c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf4:	f7fc ffae 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8008bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bfa:	e010      	b.n	8008c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b4e      	ldr	r3, [pc, #312]	; (8008d38 <UART_SetConfig+0x5c0>)
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c00:	e00d      	b.n	8008c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fc ff23 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c08:	e009      	b.n	8008c1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c10:	e005      	b.n	8008c1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 8090 	beq.w	8008d46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	4a44      	ldr	r2, [pc, #272]	; (8008d3c <UART_SetConfig+0x5c4>)
 8008c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c38:	005a      	lsls	r2, r3, #1
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	441a      	add	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	2b0f      	cmp	r3, #15
 8008c50:	d916      	bls.n	8008c80 <UART_SetConfig+0x508>
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c58:	d212      	bcs.n	8008c80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f023 030f 	bic.w	r3, r3, #15
 8008c62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	8bfb      	ldrh	r3, [r7, #30]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	8bfa      	ldrh	r2, [r7, #30]
 8008c7c:	60da      	str	r2, [r3, #12]
 8008c7e:	e062      	b.n	8008d46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c86:	e05e      	b.n	8008d46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d828      	bhi.n	8008ce2 <UART_SetConfig+0x56a>
 8008c90:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x520>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	08008ce3 	.word	0x08008ce3
 8008ca8:	08008cd3 	.word	0x08008cd3
 8008cac:	08008ce3 	.word	0x08008ce3
 8008cb0:	08008ce3 	.word	0x08008ce3
 8008cb4:	08008ce3 	.word	0x08008ce3
 8008cb8:	08008cdb 	.word	0x08008cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cbc:	f7fc ff34 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8008cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cc2:	e014      	b.n	8008cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc4:	f7fc ff46 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8008cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cca:	e010      	b.n	8008cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ccc:	4b1a      	ldr	r3, [pc, #104]	; (8008d38 <UART_SetConfig+0x5c0>)
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cd0:	e00d      	b.n	8008cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cd2:	f7fc febb 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8008cd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cd8:	e009      	b.n	8008cee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ce0:	e005      	b.n	8008cee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008cec:	bf00      	nop
    }

    if (pclk != 0U)
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d028      	beq.n	8008d46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	4a10      	ldr	r2, [pc, #64]	; (8008d3c <UART_SetConfig+0x5c4>)
 8008cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	441a      	add	r2, r3
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	d910      	bls.n	8008d40 <UART_SetConfig+0x5c8>
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d24:	d20c      	bcs.n	8008d40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60da      	str	r2, [r3, #12]
 8008d30:	e009      	b.n	8008d46 <UART_SetConfig+0x5ce>
 8008d32:	bf00      	nop
 8008d34:	40008000 	.word	0x40008000
 8008d38:	00f42400 	.word	0x00f42400
 8008d3c:	0800cfac 	.word	0x0800cfac
      }
      else
      {
        ret = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3730      	adds	r7, #48	; 0x30
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01a      	beq.n	8008e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e6e:	d10a      	bne.n	8008e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	605a      	str	r2, [r3, #4]
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ec4:	f7f9 fe6a 	bl	8002b9c <HAL_GetTick>
 8008ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d10e      	bne.n	8008ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f82f 	bl	8008f4a <UART_WaitOnFlagUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e025      	b.n	8008f42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d10e      	bne.n	8008f22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f819 	bl	8008f4a <UART_WaitOnFlagUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e00f      	b.n	8008f42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b09c      	sub	sp, #112	; 0x70
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	603b      	str	r3, [r7, #0]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f5a:	e0a9      	b.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f62:	f000 80a5 	beq.w	80090b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f66:	f7f9 fe19 	bl	8002b9c <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d302      	bcc.n	8008f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8008f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d140      	bne.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f90:	667b      	str	r3, [r7, #100]	; 0x64
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e6      	bne.n	8008f7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fce:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e069      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d051      	beq.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800901a:	d149      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009024:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800903a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
 8009046:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800904a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	613b      	str	r3, [r7, #16]
   return(result);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009078:	623a      	str	r2, [r7, #32]
 800907a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	69f9      	ldr	r1, [r7, #28]
 800907e:	6a3a      	ldr	r2, [r7, #32]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	61bb      	str	r3, [r7, #24]
   return(result);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e5      	bne.n	8009058 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e010      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4013      	ands	r3, r2
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	429a      	cmp	r2, r3
 80090be:	bf0c      	ite	eq
 80090c0:	2301      	moveq	r3, #1
 80090c2:	2300      	movne	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	f43f af46 	beq.w	8008f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3770      	adds	r7, #112	; 0x70
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090dc:	b480      	push	{r7}
 80090de:	b0a3      	sub	sp, #140	; 0x8c
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	88fa      	ldrh	r2, [r7, #6]
 80090f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910e:	d10e      	bne.n	800912e <UART_Start_Receive_IT+0x52>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <UART_Start_Receive_IT+0x48>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800911e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009122:	e02d      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	22ff      	movs	r2, #255	; 0xff
 8009128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800912c:	e028      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <UART_Start_Receive_IT+0x76>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <UART_Start_Receive_IT+0x6c>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	22ff      	movs	r2, #255	; 0xff
 8009142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009146:	e01b      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	227f      	movs	r2, #127	; 0x7f
 800914c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009150:	e016      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915a:	d10d      	bne.n	8009178 <UART_Start_Receive_IT+0x9c>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <UART_Start_Receive_IT+0x92>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	227f      	movs	r2, #127	; 0x7f
 8009168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800916c:	e008      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	223f      	movs	r2, #63	; 0x3f
 8009172:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009176:	e003      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2222      	movs	r2, #34	; 0x22
 800918c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80091a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80091b4:	673a      	str	r2, [r7, #112]	; 0x70
 80091b6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80091ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80091c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e3      	bne.n	8009190 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d0:	d153      	bne.n	800927a <UART_Start_Receive_IT+0x19e>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d34d      	bcc.n	800927a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e6:	d107      	bne.n	80091f8 <UART_Start_Receive_IT+0x11c>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a4b      	ldr	r2, [pc, #300]	; (8009320 <UART_Start_Receive_IT+0x244>)
 80091f4:	671a      	str	r2, [r3, #112]	; 0x70
 80091f6:	e002      	b.n	80091fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a4a      	ldr	r2, [pc, #296]	; (8009324 <UART_Start_Receive_IT+0x248>)
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01a      	beq.n	8009244 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800921c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009232:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009236:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800923e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e4      	bne.n	800920e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800925a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009264:	64ba      	str	r2, [r7, #72]	; 0x48
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800926a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e5      	bne.n	8009244 <UART_Start_Receive_IT+0x168>
 8009278:	e04a      	b.n	8009310 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009282:	d107      	bne.n	8009294 <UART_Start_Receive_IT+0x1b8>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a26      	ldr	r2, [pc, #152]	; (8009328 <UART_Start_Receive_IT+0x24c>)
 8009290:	671a      	str	r2, [r3, #112]	; 0x70
 8009292:	e002      	b.n	800929a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4a25      	ldr	r2, [pc, #148]	; (800932c <UART_Start_Receive_IT+0x250>)
 8009298:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d019      	beq.n	80092de <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	e853 3f00 	ldrex	r3, [r3]
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80092be:	677b      	str	r3, [r7, #116]	; 0x74
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e6      	bne.n	80092aa <UART_Start_Receive_IT+0x1ce>
 80092dc:	e018      	b.n	8009310 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	613b      	str	r3, [r7, #16]
   return(result);
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f043 0320 	orr.w	r3, r3, #32
 80092f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	69f9      	ldr	r1, [r7, #28]
 8009302:	6a3a      	ldr	r2, [r7, #32]
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	61bb      	str	r3, [r7, #24]
   return(result);
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e6      	bne.n	80092de <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	378c      	adds	r7, #140	; 0x8c
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	08009a39 	.word	0x08009a39
 8009324:	08009741 	.word	0x08009741
 8009328:	080095df 	.word	0x080095df
 800932c:	0800947f 	.word	0x0800947f

08009330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009330:	b480      	push	{r7}
 8009332:	b095      	sub	sp, #84	; 0x54
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800934c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009356:	643b      	str	r3, [r7, #64]	; 0x40
 8009358:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800935c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e6      	bne.n	8009338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	61fb      	str	r3, [r7, #28]
   return(result);
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	64bb      	str	r3, [r7, #72]	; 0x48
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3308      	adds	r3, #8
 800938c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e3      	bne.n	800936a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d118      	bne.n	80093dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f023 0310 	bic.w	r3, r3, #16
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6979      	ldr	r1, [r7, #20]
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	613b      	str	r3, [r7, #16]
   return(result);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e6      	bne.n	80093aa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093f0:	bf00      	nop
 80093f2:	3754      	adds	r7, #84	; 0x54
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff f996 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60bb      	str	r3, [r7, #8]
   return(result);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	613b      	str	r3, [r7, #16]
   return(result);
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff f961 	bl	8008738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009476:	bf00      	nop
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b096      	sub	sp, #88	; 0x58
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800948c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	2b22      	cmp	r3, #34	; 0x22
 8009498:	f040 8095 	bne.w	80095c6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80094aa:	b2d9      	uxtb	r1, r3
 80094ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b6:	400a      	ands	r2, r1
 80094b8:	b2d2      	uxtb	r2, r2
 80094ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	3b01      	subs	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d178      	bne.n	80095d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094f8:	653b      	str	r3, [r7, #80]	; 0x50
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009502:	647b      	str	r3, [r7, #68]	; 0x44
 8009504:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e6      	bne.n	80094e4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	623b      	str	r3, [r7, #32]
   return(result);
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	f023 0301 	bic.w	r3, r3, #1
 800952c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009536:	633a      	str	r2, [r7, #48]	; 0x30
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800953c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e5      	bne.n	8009516 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955c:	2b01      	cmp	r3, #1
 800955e:	d12e      	bne.n	80095be <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	60fb      	str	r3, [r7, #12]
   return(result);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 0310 	bic.w	r3, r3, #16
 800957a:	64bb      	str	r3, [r7, #72]	; 0x48
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	69b9      	ldr	r1, [r7, #24]
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	617b      	str	r3, [r7, #20]
   return(result);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e6      	bne.n	8009566 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f003 0310 	and.w	r3, r3, #16
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d103      	bne.n	80095ae <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2210      	movs	r2, #16
 80095ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff f8d2 	bl	8008760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095bc:	e00b      	b.n	80095d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7f9 fa48 	bl	8002a54 <HAL_UART_RxCpltCallback>
}
 80095c4:	e007      	b.n	80095d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	699a      	ldr	r2, [r3, #24]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f042 0208 	orr.w	r2, r2, #8
 80095d4:	619a      	str	r2, [r3, #24]
}
 80095d6:	bf00      	nop
 80095d8:	3758      	adds	r7, #88	; 0x58
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b096      	sub	sp, #88	; 0x58
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f6:	2b22      	cmp	r3, #34	; 0x22
 80095f8:	f040 8095 	bne.w	8009726 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800960c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009610:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009614:	4013      	ands	r3, r2
 8009616:	b29a      	uxth	r2, r3
 8009618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009620:	1c9a      	adds	r2, r3, #2
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d178      	bne.n	8009736 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009662:	643b      	str	r3, [r7, #64]	; 0x40
 8009664:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e6      	bne.n	8009644 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	61fb      	str	r3, [r7, #28]
   return(result);
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	f023 0301 	bic.w	r3, r3, #1
 800968c:	64bb      	str	r3, [r7, #72]	; 0x48
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3308      	adds	r3, #8
 8009694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800969c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e5      	bne.n	8009676 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d12e      	bne.n	800971e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f023 0310 	bic.w	r3, r3, #16
 80096da:	647b      	str	r3, [r7, #68]	; 0x44
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6979      	ldr	r1, [r7, #20]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	613b      	str	r3, [r7, #16]
   return(result);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e6      	bne.n	80096c6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f003 0310 	and.w	r3, r3, #16
 8009702:	2b10      	cmp	r3, #16
 8009704:	d103      	bne.n	800970e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2210      	movs	r2, #16
 800970c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff f822 	bl	8008760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800971c:	e00b      	b.n	8009736 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7f9 f998 	bl	8002a54 <HAL_UART_RxCpltCallback>
}
 8009724:	e007      	b.n	8009736 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0208 	orr.w	r2, r2, #8
 8009734:	619a      	str	r2, [r3, #24]
}
 8009736:	bf00      	nop
 8009738:	3758      	adds	r7, #88	; 0x58
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b0a6      	sub	sp, #152	; 0x98
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800974e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009776:	2b22      	cmp	r3, #34	; 0x22
 8009778:	f040 814f 	bne.w	8009a1a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009782:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009786:	e0f6      	b.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009792:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009796:	b2d9      	uxtb	r1, r3
 8009798:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800979c:	b2da      	uxtb	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	400a      	ands	r2, r1
 80097a4:	b2d2      	uxtb	r2, r2
 80097a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	3b01      	subs	r3, #1
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d053      	beq.n	8009882 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d011      	beq.n	800980a <UART_RxISR_8BIT_FIFOEN+0xca>
 80097e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2201      	movs	r2, #1
 80097f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009800:	f043 0201 	orr.w	r2, r3, #1
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800980a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2202      	movs	r2, #2
 8009828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009830:	f043 0204 	orr.w	r2, r3, #4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800983a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b00      	cmp	r3, #0
 8009844:	d011      	beq.n	800986a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2204      	movs	r2, #4
 8009858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009860:	f043 0202 	orr.w	r2, r3, #2
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7fe ff69 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009888:	b29b      	uxth	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d173      	bne.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800989c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800989e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80098b2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80098b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80098be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e4      	bne.n	800988e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3308      	adds	r3, #8
 80098ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80098d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098da:	f023 0301 	bic.w	r3, r3, #1
 80098de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3308      	adds	r3, #8
 80098e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098e8:	657a      	str	r2, [r7, #84]	; 0x54
 80098ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e3      	bne.n	80098c4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990e:	2b01      	cmp	r3, #1
 8009910:	d12e      	bne.n	8009970 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	f023 0310 	bic.w	r3, r3, #16
 800992c:	67bb      	str	r3, [r7, #120]	; 0x78
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009936:	643b      	str	r3, [r7, #64]	; 0x40
 8009938:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800993c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e6      	bne.n	8009918 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b10      	cmp	r3, #16
 8009956:	d103      	bne.n	8009960 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2210      	movs	r2, #16
 800995e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fe fef9 	bl	8008760 <HAL_UARTEx_RxEventCallback>
 800996e:	e002      	b.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7f9 f86f 	bl	8002a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009976:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800997a:	2b00      	cmp	r3, #0
 800997c:	d006      	beq.n	800998c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800997e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009982:	f003 0320 	and.w	r3, r3, #32
 8009986:	2b00      	cmp	r3, #0
 8009988:	f47f aefe 	bne.w	8009788 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009996:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800999a:	2b00      	cmp	r3, #0
 800999c:	d045      	beq.n	8009a2a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d23e      	bcs.n	8009a2a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3308      	adds	r3, #8
 80099b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099c2:	673b      	str	r3, [r7, #112]	; 0x70
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80099cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e5      	bne.n	80099ac <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a14      	ldr	r2, [pc, #80]	; (8009a34 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80099e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f043 0320 	orr.w	r3, r3, #32
 80099fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6979      	ldr	r1, [r7, #20]
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	613b      	str	r3, [r7, #16]
   return(result);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e6      	bne.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a18:	e007      	b.n	8009a2a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0208 	orr.w	r2, r2, #8
 8009a28:	619a      	str	r2, [r3, #24]
}
 8009a2a:	bf00      	nop
 8009a2c:	3798      	adds	r7, #152	; 0x98
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	0800947f 	.word	0x0800947f

08009a38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b0a8      	sub	sp, #160	; 0xa0
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a46:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6e:	2b22      	cmp	r3, #34	; 0x22
 8009a70:	f040 8153 	bne.w	8009d1a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a7a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a7e:	e0fa      	b.n	8009c76 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a92:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009aa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa8:	1c9a      	adds	r2, r3, #2
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d053      	beq.n	8009b7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d011      	beq.n	8009b06 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ae2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2201      	movs	r2, #1
 8009af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009afc:	f043 0201 	orr.w	r2, r3, #1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d011      	beq.n	8009b36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00b      	beq.n	8009b36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2202      	movs	r2, #2
 8009b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b2c:	f043 0204 	orr.w	r2, r3, #4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d011      	beq.n	8009b66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2204      	movs	r2, #4
 8009b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b5c:	f043 0202 	orr.w	r2, r3, #2
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d006      	beq.n	8009b7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7fe fdeb 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d175      	bne.n	8009c76 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bae:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009bb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e4      	bne.n	8009b8a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bca:	e853 3f00 	ldrex	r3, [r3]
 8009bce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009be8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009bea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e1      	bne.n	8009bc0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d12e      	bne.n	8009c70 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c28:	f023 0310 	bic.w	r3, r3, #16
 8009c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c36:	647b      	str	r3, [r7, #68]	; 0x44
 8009c38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e6      	bne.n	8009c18 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d103      	bne.n	8009c60 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2210      	movs	r2, #16
 8009c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fe fd79 	bl	8008760 <HAL_UARTEx_RxEventCallback>
 8009c6e:	e002      	b.n	8009c76 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7f8 feef 	bl	8002a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d006      	beq.n	8009c8c <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f47f aefa 	bne.w	8009a80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d045      	beq.n	8009d2a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ca4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d23e      	bcs.n	8009d2a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	e853 3f00 	ldrex	r3, [r3]
 8009cba:	623b      	str	r3, [r7, #32]
   return(result);
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc2:	677b      	str	r3, [r7, #116]	; 0x74
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ccc:	633a      	str	r2, [r7, #48]	; 0x30
 8009cce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cd4:	e841 2300 	strex	r3, r2, [r1]
 8009cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e5      	bne.n	8009cac <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a14      	ldr	r2, [pc, #80]	; (8009d34 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009ce4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f043 0320 	orr.w	r3, r3, #32
 8009cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	69b9      	ldr	r1, [r7, #24]
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	617b      	str	r3, [r7, #20]
   return(result);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d18:	e007      	b.n	8009d2a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0208 	orr.w	r2, r2, #8
 8009d28:	619a      	str	r2, [r3, #24]
}
 8009d2a:	bf00      	nop
 8009d2c:	37a0      	adds	r7, #160	; 0xa0
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	080095df 	.word	0x080095df

08009d38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <HAL_UARTEx_DisableFifoMode+0x16>
 8009d86:	2302      	movs	r3, #2
 8009d88:	e027      	b.n	8009dda <HAL_UARTEx_DisableFifoMode+0x66>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2224      	movs	r2, #36	; 0x24
 8009d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0201 	bic.w	r2, r2, #1
 8009db0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009db8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d101      	bne.n	8009dfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e02d      	b.n	8009e5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2224      	movs	r2, #36	; 0x24
 8009e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 0201 	bic.w	r2, r2, #1
 8009e24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f850 	bl	8009ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d101      	bne.n	8009e7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e76:	2302      	movs	r3, #2
 8009e78:	e02d      	b.n	8009ed6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2224      	movs	r2, #36	; 0x24
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0201 	bic.w	r2, r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f812 	bl	8009ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d108      	bne.n	8009f02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f00:	e031      	b.n	8009f66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f02:	2308      	movs	r3, #8
 8009f04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f06:	2308      	movs	r3, #8
 8009f08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	0e5b      	lsrs	r3, r3, #25
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	0f5b      	lsrs	r3, r3, #29
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 0307 	and.w	r3, r3, #7
 8009f28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	7b3a      	ldrb	r2, [r7, #12]
 8009f2e:	4911      	ldr	r1, [pc, #68]	; (8009f74 <UARTEx_SetNbDataToProcess+0x94>)
 8009f30:	5c8a      	ldrb	r2, [r1, r2]
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f36:	7b3a      	ldrb	r2, [r7, #12]
 8009f38:	490f      	ldr	r1, [pc, #60]	; (8009f78 <UARTEx_SetNbDataToProcess+0x98>)
 8009f3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	7b7a      	ldrb	r2, [r7, #13]
 8009f4c:	4909      	ldr	r1, [pc, #36]	; (8009f74 <UARTEx_SetNbDataToProcess+0x94>)
 8009f4e:	5c8a      	ldrb	r2, [r1, r2]
 8009f50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f54:	7b7a      	ldrb	r2, [r7, #13]
 8009f56:	4908      	ldr	r1, [pc, #32]	; (8009f78 <UARTEx_SetNbDataToProcess+0x98>)
 8009f58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	0800cfc4 	.word	0x0800cfc4
 8009f78:	0800cfcc 	.word	0x0800cfcc

08009f7c <atoi>:
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	2100      	movs	r1, #0
 8009f80:	f000 b882 	b.w	800a088 <strtol>

08009f84 <_strtol_l.constprop.0>:
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8a:	d001      	beq.n	8009f90 <_strtol_l.constprop.0+0xc>
 8009f8c:	2b24      	cmp	r3, #36	; 0x24
 8009f8e:	d906      	bls.n	8009f9e <_strtol_l.constprop.0+0x1a>
 8009f90:	f000 fee4 	bl	800ad5c <__errno>
 8009f94:	2316      	movs	r3, #22
 8009f96:	6003      	str	r3, [r0, #0]
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a084 <_strtol_l.constprop.0+0x100>
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	462e      	mov	r6, r5
 8009fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009faa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009fae:	f017 0708 	ands.w	r7, r7, #8
 8009fb2:	d1f7      	bne.n	8009fa4 <_strtol_l.constprop.0+0x20>
 8009fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8009fb6:	d132      	bne.n	800a01e <_strtol_l.constprop.0+0x9a>
 8009fb8:	782c      	ldrb	r4, [r5, #0]
 8009fba:	2701      	movs	r7, #1
 8009fbc:	1cb5      	adds	r5, r6, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d05b      	beq.n	800a07a <_strtol_l.constprop.0+0xf6>
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d109      	bne.n	8009fda <_strtol_l.constprop.0+0x56>
 8009fc6:	2c30      	cmp	r4, #48	; 0x30
 8009fc8:	d107      	bne.n	8009fda <_strtol_l.constprop.0+0x56>
 8009fca:	782c      	ldrb	r4, [r5, #0]
 8009fcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009fd0:	2c58      	cmp	r4, #88	; 0x58
 8009fd2:	d14d      	bne.n	800a070 <_strtol_l.constprop.0+0xec>
 8009fd4:	786c      	ldrb	r4, [r5, #1]
 8009fd6:	2310      	movs	r3, #16
 8009fd8:	3502      	adds	r5, #2
 8009fda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009fde:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fe2:	f04f 0e00 	mov.w	lr, #0
 8009fe6:	fbb8 f9f3 	udiv	r9, r8, r3
 8009fea:	4676      	mov	r6, lr
 8009fec:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ff0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ff4:	f1bc 0f09 	cmp.w	ip, #9
 8009ff8:	d816      	bhi.n	800a028 <_strtol_l.constprop.0+0xa4>
 8009ffa:	4664      	mov	r4, ip
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	dd24      	ble.n	800a04a <_strtol_l.constprop.0+0xc6>
 800a000:	f1be 3fff 	cmp.w	lr, #4294967295
 800a004:	d008      	beq.n	800a018 <_strtol_l.constprop.0+0x94>
 800a006:	45b1      	cmp	r9, r6
 800a008:	d31c      	bcc.n	800a044 <_strtol_l.constprop.0+0xc0>
 800a00a:	d101      	bne.n	800a010 <_strtol_l.constprop.0+0x8c>
 800a00c:	45a2      	cmp	sl, r4
 800a00e:	db19      	blt.n	800a044 <_strtol_l.constprop.0+0xc0>
 800a010:	fb06 4603 	mla	r6, r6, r3, r4
 800a014:	f04f 0e01 	mov.w	lr, #1
 800a018:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a01c:	e7e8      	b.n	8009ff0 <_strtol_l.constprop.0+0x6c>
 800a01e:	2c2b      	cmp	r4, #43	; 0x2b
 800a020:	bf04      	itt	eq
 800a022:	782c      	ldrbeq	r4, [r5, #0]
 800a024:	1cb5      	addeq	r5, r6, #2
 800a026:	e7ca      	b.n	8009fbe <_strtol_l.constprop.0+0x3a>
 800a028:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a02c:	f1bc 0f19 	cmp.w	ip, #25
 800a030:	d801      	bhi.n	800a036 <_strtol_l.constprop.0+0xb2>
 800a032:	3c37      	subs	r4, #55	; 0x37
 800a034:	e7e2      	b.n	8009ffc <_strtol_l.constprop.0+0x78>
 800a036:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a03a:	f1bc 0f19 	cmp.w	ip, #25
 800a03e:	d804      	bhi.n	800a04a <_strtol_l.constprop.0+0xc6>
 800a040:	3c57      	subs	r4, #87	; 0x57
 800a042:	e7db      	b.n	8009ffc <_strtol_l.constprop.0+0x78>
 800a044:	f04f 3eff 	mov.w	lr, #4294967295
 800a048:	e7e6      	b.n	800a018 <_strtol_l.constprop.0+0x94>
 800a04a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a04e:	d105      	bne.n	800a05c <_strtol_l.constprop.0+0xd8>
 800a050:	2322      	movs	r3, #34	; 0x22
 800a052:	6003      	str	r3, [r0, #0]
 800a054:	4646      	mov	r6, r8
 800a056:	b942      	cbnz	r2, 800a06a <_strtol_l.constprop.0+0xe6>
 800a058:	4630      	mov	r0, r6
 800a05a:	e79e      	b.n	8009f9a <_strtol_l.constprop.0+0x16>
 800a05c:	b107      	cbz	r7, 800a060 <_strtol_l.constprop.0+0xdc>
 800a05e:	4276      	negs	r6, r6
 800a060:	2a00      	cmp	r2, #0
 800a062:	d0f9      	beq.n	800a058 <_strtol_l.constprop.0+0xd4>
 800a064:	f1be 0f00 	cmp.w	lr, #0
 800a068:	d000      	beq.n	800a06c <_strtol_l.constprop.0+0xe8>
 800a06a:	1e69      	subs	r1, r5, #1
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	e7f3      	b.n	800a058 <_strtol_l.constprop.0+0xd4>
 800a070:	2430      	movs	r4, #48	; 0x30
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1b1      	bne.n	8009fda <_strtol_l.constprop.0+0x56>
 800a076:	2308      	movs	r3, #8
 800a078:	e7af      	b.n	8009fda <_strtol_l.constprop.0+0x56>
 800a07a:	2c30      	cmp	r4, #48	; 0x30
 800a07c:	d0a5      	beq.n	8009fca <_strtol_l.constprop.0+0x46>
 800a07e:	230a      	movs	r3, #10
 800a080:	e7ab      	b.n	8009fda <_strtol_l.constprop.0+0x56>
 800a082:	bf00      	nop
 800a084:	0800cfd5 	.word	0x0800cfd5

0800a088 <strtol>:
 800a088:	4613      	mov	r3, r2
 800a08a:	460a      	mov	r2, r1
 800a08c:	4601      	mov	r1, r0
 800a08e:	4802      	ldr	r0, [pc, #8]	; (800a098 <strtol+0x10>)
 800a090:	6800      	ldr	r0, [r0, #0]
 800a092:	f7ff bf77 	b.w	8009f84 <_strtol_l.constprop.0>
 800a096:	bf00      	nop
 800a098:	20000128 	.word	0x20000128

0800a09c <__cvt>:
 800a09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	ec55 4b10 	vmov	r4, r5, d0
 800a0a4:	2d00      	cmp	r5, #0
 800a0a6:	460e      	mov	r6, r1
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	bfbb      	ittet	lt
 800a0ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0b2:	461d      	movlt	r5, r3
 800a0b4:	2300      	movge	r3, #0
 800a0b6:	232d      	movlt	r3, #45	; 0x2d
 800a0b8:	700b      	strb	r3, [r1, #0]
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0c0:	4691      	mov	r9, r2
 800a0c2:	f023 0820 	bic.w	r8, r3, #32
 800a0c6:	bfbc      	itt	lt
 800a0c8:	4622      	movlt	r2, r4
 800a0ca:	4614      	movlt	r4, r2
 800a0cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0d0:	d005      	beq.n	800a0de <__cvt+0x42>
 800a0d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0d6:	d100      	bne.n	800a0da <__cvt+0x3e>
 800a0d8:	3601      	adds	r6, #1
 800a0da:	2102      	movs	r1, #2
 800a0dc:	e000      	b.n	800a0e0 <__cvt+0x44>
 800a0de:	2103      	movs	r1, #3
 800a0e0:	ab03      	add	r3, sp, #12
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	ab02      	add	r3, sp, #8
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ec:	4653      	mov	r3, sl
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	f000 ff0a 	bl	800af08 <_dtoa_r>
 800a0f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	d102      	bne.n	800a102 <__cvt+0x66>
 800a0fc:	f019 0f01 	tst.w	r9, #1
 800a100:	d022      	beq.n	800a148 <__cvt+0xac>
 800a102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a106:	eb07 0906 	add.w	r9, r7, r6
 800a10a:	d110      	bne.n	800a12e <__cvt+0x92>
 800a10c:	783b      	ldrb	r3, [r7, #0]
 800a10e:	2b30      	cmp	r3, #48	; 0x30
 800a110:	d10a      	bne.n	800a128 <__cvt+0x8c>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 fd0d 	bl	8000b38 <__aeabi_dcmpeq>
 800a11e:	b918      	cbnz	r0, 800a128 <__cvt+0x8c>
 800a120:	f1c6 0601 	rsb	r6, r6, #1
 800a124:	f8ca 6000 	str.w	r6, [sl]
 800a128:	f8da 3000 	ldr.w	r3, [sl]
 800a12c:	4499      	add	r9, r3
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 fcff 	bl	8000b38 <__aeabi_dcmpeq>
 800a13a:	b108      	cbz	r0, 800a140 <__cvt+0xa4>
 800a13c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a140:	2230      	movs	r2, #48	; 0x30
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	454b      	cmp	r3, r9
 800a146:	d307      	bcc.n	800a158 <__cvt+0xbc>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a14c:	1bdb      	subs	r3, r3, r7
 800a14e:	4638      	mov	r0, r7
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	b004      	add	sp, #16
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	1c59      	adds	r1, r3, #1
 800a15a:	9103      	str	r1, [sp, #12]
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	e7f0      	b.n	800a142 <__cvt+0xa6>

0800a160 <__exponent>:
 800a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a162:	4603      	mov	r3, r0
 800a164:	2900      	cmp	r1, #0
 800a166:	bfb8      	it	lt
 800a168:	4249      	neglt	r1, r1
 800a16a:	f803 2b02 	strb.w	r2, [r3], #2
 800a16e:	bfb4      	ite	lt
 800a170:	222d      	movlt	r2, #45	; 0x2d
 800a172:	222b      	movge	r2, #43	; 0x2b
 800a174:	2909      	cmp	r1, #9
 800a176:	7042      	strb	r2, [r0, #1]
 800a178:	dd2a      	ble.n	800a1d0 <__exponent+0x70>
 800a17a:	f10d 0207 	add.w	r2, sp, #7
 800a17e:	4617      	mov	r7, r2
 800a180:	260a      	movs	r6, #10
 800a182:	4694      	mov	ip, r2
 800a184:	fb91 f5f6 	sdiv	r5, r1, r6
 800a188:	fb06 1415 	mls	r4, r6, r5, r1
 800a18c:	3430      	adds	r4, #48	; 0x30
 800a18e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a192:	460c      	mov	r4, r1
 800a194:	2c63      	cmp	r4, #99	; 0x63
 800a196:	f102 32ff 	add.w	r2, r2, #4294967295
 800a19a:	4629      	mov	r1, r5
 800a19c:	dcf1      	bgt.n	800a182 <__exponent+0x22>
 800a19e:	3130      	adds	r1, #48	; 0x30
 800a1a0:	f1ac 0402 	sub.w	r4, ip, #2
 800a1a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1a8:	1c41      	adds	r1, r0, #1
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	42ba      	cmp	r2, r7
 800a1ae:	d30a      	bcc.n	800a1c6 <__exponent+0x66>
 800a1b0:	f10d 0209 	add.w	r2, sp, #9
 800a1b4:	eba2 020c 	sub.w	r2, r2, ip
 800a1b8:	42bc      	cmp	r4, r7
 800a1ba:	bf88      	it	hi
 800a1bc:	2200      	movhi	r2, #0
 800a1be:	4413      	add	r3, r2
 800a1c0:	1a18      	subs	r0, r3, r0
 800a1c2:	b003      	add	sp, #12
 800a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a1ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a1ce:	e7ed      	b.n	800a1ac <__exponent+0x4c>
 800a1d0:	2330      	movs	r3, #48	; 0x30
 800a1d2:	3130      	adds	r1, #48	; 0x30
 800a1d4:	7083      	strb	r3, [r0, #2]
 800a1d6:	70c1      	strb	r1, [r0, #3]
 800a1d8:	1d03      	adds	r3, r0, #4
 800a1da:	e7f1      	b.n	800a1c0 <__exponent+0x60>

0800a1dc <_printf_float>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	ed2d 8b02 	vpush	{d8}
 800a1e4:	b08d      	sub	sp, #52	; 0x34
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	f000 fd69 	bl	800acc8 <_localeconv_r>
 800a1f6:	f8d0 a000 	ldr.w	sl, [r0]
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	f7f6 f870 	bl	80002e0 <strlen>
 800a200:	2300      	movs	r3, #0
 800a202:	930a      	str	r3, [sp, #40]	; 0x28
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	f8d8 3000 	ldr.w	r3, [r8]
 800a20c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a210:	3307      	adds	r3, #7
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	f103 0208 	add.w	r2, r3, #8
 800a21a:	f8c8 2000 	str.w	r2, [r8]
 800a21e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a226:	9307      	str	r3, [sp, #28]
 800a228:	f8cd 8018 	str.w	r8, [sp, #24]
 800a22c:	ee08 0a10 	vmov	s16, r0
 800a230:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a238:	4b9e      	ldr	r3, [pc, #632]	; (800a4b4 <_printf_float+0x2d8>)
 800a23a:	f04f 32ff 	mov.w	r2, #4294967295
 800a23e:	f7f6 fcad 	bl	8000b9c <__aeabi_dcmpun>
 800a242:	bb88      	cbnz	r0, 800a2a8 <_printf_float+0xcc>
 800a244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a248:	4b9a      	ldr	r3, [pc, #616]	; (800a4b4 <_printf_float+0x2d8>)
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	f7f6 fc87 	bl	8000b60 <__aeabi_dcmple>
 800a252:	bb48      	cbnz	r0, 800a2a8 <_printf_float+0xcc>
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	4640      	mov	r0, r8
 800a25a:	4649      	mov	r1, r9
 800a25c:	f7f6 fc76 	bl	8000b4c <__aeabi_dcmplt>
 800a260:	b110      	cbz	r0, 800a268 <_printf_float+0x8c>
 800a262:	232d      	movs	r3, #45	; 0x2d
 800a264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a268:	4a93      	ldr	r2, [pc, #588]	; (800a4b8 <_printf_float+0x2dc>)
 800a26a:	4b94      	ldr	r3, [pc, #592]	; (800a4bc <_printf_float+0x2e0>)
 800a26c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a270:	bf94      	ite	ls
 800a272:	4690      	movls	r8, r2
 800a274:	4698      	movhi	r8, r3
 800a276:	2303      	movs	r3, #3
 800a278:	6123      	str	r3, [r4, #16]
 800a27a:	9b05      	ldr	r3, [sp, #20]
 800a27c:	f023 0304 	bic.w	r3, r3, #4
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	f04f 0900 	mov.w	r9, #0
 800a286:	9700      	str	r7, [sp, #0]
 800a288:	4633      	mov	r3, r6
 800a28a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a28c:	4621      	mov	r1, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 f9da 	bl	800a648 <_printf_common>
 800a294:	3001      	adds	r0, #1
 800a296:	f040 8090 	bne.w	800a3ba <_printf_float+0x1de>
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	b00d      	add	sp, #52	; 0x34
 800a2a0:	ecbd 8b02 	vpop	{d8}
 800a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	f7f6 fc74 	bl	8000b9c <__aeabi_dcmpun>
 800a2b4:	b140      	cbz	r0, 800a2c8 <_printf_float+0xec>
 800a2b6:	464b      	mov	r3, r9
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbc      	itt	lt
 800a2bc:	232d      	movlt	r3, #45	; 0x2d
 800a2be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a2c2:	4a7f      	ldr	r2, [pc, #508]	; (800a4c0 <_printf_float+0x2e4>)
 800a2c4:	4b7f      	ldr	r3, [pc, #508]	; (800a4c4 <_printf_float+0x2e8>)
 800a2c6:	e7d1      	b.n	800a26c <_printf_float+0x90>
 800a2c8:	6863      	ldr	r3, [r4, #4]
 800a2ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2ce:	9206      	str	r2, [sp, #24]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	d13f      	bne.n	800a354 <_printf_float+0x178>
 800a2d4:	2306      	movs	r3, #6
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	9b05      	ldr	r3, [sp, #20]
 800a2da:	6861      	ldr	r1, [r4, #4]
 800a2dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	9303      	str	r3, [sp, #12]
 800a2e4:	ab0a      	add	r3, sp, #40	; 0x28
 800a2e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2ea:	ab09      	add	r3, sp, #36	; 0x24
 800a2ec:	ec49 8b10 	vmov	d0, r8, r9
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	6022      	str	r2, [r4, #0]
 800a2f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7ff fecf 	bl	800a09c <__cvt>
 800a2fe:	9b06      	ldr	r3, [sp, #24]
 800a300:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a302:	2b47      	cmp	r3, #71	; 0x47
 800a304:	4680      	mov	r8, r0
 800a306:	d108      	bne.n	800a31a <_printf_float+0x13e>
 800a308:	1cc8      	adds	r0, r1, #3
 800a30a:	db02      	blt.n	800a312 <_printf_float+0x136>
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	4299      	cmp	r1, r3
 800a310:	dd41      	ble.n	800a396 <_printf_float+0x1ba>
 800a312:	f1ab 0302 	sub.w	r3, fp, #2
 800a316:	fa5f fb83 	uxtb.w	fp, r3
 800a31a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a31e:	d820      	bhi.n	800a362 <_printf_float+0x186>
 800a320:	3901      	subs	r1, #1
 800a322:	465a      	mov	r2, fp
 800a324:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a328:	9109      	str	r1, [sp, #36]	; 0x24
 800a32a:	f7ff ff19 	bl	800a160 <__exponent>
 800a32e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a330:	1813      	adds	r3, r2, r0
 800a332:	2a01      	cmp	r2, #1
 800a334:	4681      	mov	r9, r0
 800a336:	6123      	str	r3, [r4, #16]
 800a338:	dc02      	bgt.n	800a340 <_printf_float+0x164>
 800a33a:	6822      	ldr	r2, [r4, #0]
 800a33c:	07d2      	lsls	r2, r2, #31
 800a33e:	d501      	bpl.n	800a344 <_printf_float+0x168>
 800a340:	3301      	adds	r3, #1
 800a342:	6123      	str	r3, [r4, #16]
 800a344:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d09c      	beq.n	800a286 <_printf_float+0xaa>
 800a34c:	232d      	movs	r3, #45	; 0x2d
 800a34e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a352:	e798      	b.n	800a286 <_printf_float+0xaa>
 800a354:	9a06      	ldr	r2, [sp, #24]
 800a356:	2a47      	cmp	r2, #71	; 0x47
 800a358:	d1be      	bne.n	800a2d8 <_printf_float+0xfc>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1bc      	bne.n	800a2d8 <_printf_float+0xfc>
 800a35e:	2301      	movs	r3, #1
 800a360:	e7b9      	b.n	800a2d6 <_printf_float+0xfa>
 800a362:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a366:	d118      	bne.n	800a39a <_printf_float+0x1be>
 800a368:	2900      	cmp	r1, #0
 800a36a:	6863      	ldr	r3, [r4, #4]
 800a36c:	dd0b      	ble.n	800a386 <_printf_float+0x1aa>
 800a36e:	6121      	str	r1, [r4, #16]
 800a370:	b913      	cbnz	r3, 800a378 <_printf_float+0x19c>
 800a372:	6822      	ldr	r2, [r4, #0]
 800a374:	07d0      	lsls	r0, r2, #31
 800a376:	d502      	bpl.n	800a37e <_printf_float+0x1a2>
 800a378:	3301      	adds	r3, #1
 800a37a:	440b      	add	r3, r1
 800a37c:	6123      	str	r3, [r4, #16]
 800a37e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a380:	f04f 0900 	mov.w	r9, #0
 800a384:	e7de      	b.n	800a344 <_printf_float+0x168>
 800a386:	b913      	cbnz	r3, 800a38e <_printf_float+0x1b2>
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	07d2      	lsls	r2, r2, #31
 800a38c:	d501      	bpl.n	800a392 <_printf_float+0x1b6>
 800a38e:	3302      	adds	r3, #2
 800a390:	e7f4      	b.n	800a37c <_printf_float+0x1a0>
 800a392:	2301      	movs	r3, #1
 800a394:	e7f2      	b.n	800a37c <_printf_float+0x1a0>
 800a396:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a39c:	4299      	cmp	r1, r3
 800a39e:	db05      	blt.n	800a3ac <_printf_float+0x1d0>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	6121      	str	r1, [r4, #16]
 800a3a4:	07d8      	lsls	r0, r3, #31
 800a3a6:	d5ea      	bpl.n	800a37e <_printf_float+0x1a2>
 800a3a8:	1c4b      	adds	r3, r1, #1
 800a3aa:	e7e7      	b.n	800a37c <_printf_float+0x1a0>
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	bfd4      	ite	le
 800a3b0:	f1c1 0202 	rsble	r2, r1, #2
 800a3b4:	2201      	movgt	r2, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	e7e0      	b.n	800a37c <_printf_float+0x1a0>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	055a      	lsls	r2, r3, #21
 800a3be:	d407      	bmi.n	800a3d0 <_printf_float+0x1f4>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d12c      	bne.n	800a428 <_printf_float+0x24c>
 800a3ce:	e764      	b.n	800a29a <_printf_float+0xbe>
 800a3d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3d4:	f240 80e0 	bls.w	800a598 <_printf_float+0x3bc>
 800a3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f7f6 fbaa 	bl	8000b38 <__aeabi_dcmpeq>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d034      	beq.n	800a452 <_printf_float+0x276>
 800a3e8:	4a37      	ldr	r2, [pc, #220]	; (800a4c8 <_printf_float+0x2ec>)
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b8      	blx	r7
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	f43f af51 	beq.w	800a29a <_printf_float+0xbe>
 800a3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	db02      	blt.n	800a406 <_printf_float+0x22a>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	07d8      	lsls	r0, r3, #31
 800a404:	d510      	bpl.n	800a428 <_printf_float+0x24c>
 800a406:	ee18 3a10 	vmov	r3, s16
 800a40a:	4652      	mov	r2, sl
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f af41 	beq.w	800a29a <_printf_float+0xbe>
 800a418:	f04f 0800 	mov.w	r8, #0
 800a41c:	f104 091a 	add.w	r9, r4, #26
 800a420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a422:	3b01      	subs	r3, #1
 800a424:	4543      	cmp	r3, r8
 800a426:	dc09      	bgt.n	800a43c <_printf_float+0x260>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	079b      	lsls	r3, r3, #30
 800a42c:	f100 8107 	bmi.w	800a63e <_printf_float+0x462>
 800a430:	68e0      	ldr	r0, [r4, #12]
 800a432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a434:	4298      	cmp	r0, r3
 800a436:	bfb8      	it	lt
 800a438:	4618      	movlt	r0, r3
 800a43a:	e730      	b.n	800a29e <_printf_float+0xc2>
 800a43c:	2301      	movs	r3, #1
 800a43e:	464a      	mov	r2, r9
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	f43f af27 	beq.w	800a29a <_printf_float+0xbe>
 800a44c:	f108 0801 	add.w	r8, r8, #1
 800a450:	e7e6      	b.n	800a420 <_printf_float+0x244>
 800a452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a454:	2b00      	cmp	r3, #0
 800a456:	dc39      	bgt.n	800a4cc <_printf_float+0x2f0>
 800a458:	4a1b      	ldr	r2, [pc, #108]	; (800a4c8 <_printf_float+0x2ec>)
 800a45a:	2301      	movs	r3, #1
 800a45c:	4631      	mov	r1, r6
 800a45e:	4628      	mov	r0, r5
 800a460:	47b8      	blx	r7
 800a462:	3001      	adds	r0, #1
 800a464:	f43f af19 	beq.w	800a29a <_printf_float+0xbe>
 800a468:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a46c:	4313      	orrs	r3, r2
 800a46e:	d102      	bne.n	800a476 <_printf_float+0x29a>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	07d9      	lsls	r1, r3, #31
 800a474:	d5d8      	bpl.n	800a428 <_printf_float+0x24c>
 800a476:	ee18 3a10 	vmov	r3, s16
 800a47a:	4652      	mov	r2, sl
 800a47c:	4631      	mov	r1, r6
 800a47e:	4628      	mov	r0, r5
 800a480:	47b8      	blx	r7
 800a482:	3001      	adds	r0, #1
 800a484:	f43f af09 	beq.w	800a29a <_printf_float+0xbe>
 800a488:	f04f 0900 	mov.w	r9, #0
 800a48c:	f104 0a1a 	add.w	sl, r4, #26
 800a490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a492:	425b      	negs	r3, r3
 800a494:	454b      	cmp	r3, r9
 800a496:	dc01      	bgt.n	800a49c <_printf_float+0x2c0>
 800a498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49a:	e792      	b.n	800a3c2 <_printf_float+0x1e6>
 800a49c:	2301      	movs	r3, #1
 800a49e:	4652      	mov	r2, sl
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f43f aef7 	beq.w	800a29a <_printf_float+0xbe>
 800a4ac:	f109 0901 	add.w	r9, r9, #1
 800a4b0:	e7ee      	b.n	800a490 <_printf_float+0x2b4>
 800a4b2:	bf00      	nop
 800a4b4:	7fefffff 	.word	0x7fefffff
 800a4b8:	0800d0d5 	.word	0x0800d0d5
 800a4bc:	0800d0d9 	.word	0x0800d0d9
 800a4c0:	0800d0dd 	.word	0x0800d0dd
 800a4c4:	0800d0e1 	.word	0x0800d0e1
 800a4c8:	0800d0e5 	.word	0x0800d0e5
 800a4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	bfa8      	it	ge
 800a4d4:	461a      	movge	r2, r3
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	4691      	mov	r9, r2
 800a4da:	dc37      	bgt.n	800a54c <_printf_float+0x370>
 800a4dc:	f04f 0b00 	mov.w	fp, #0
 800a4e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4e4:	f104 021a 	add.w	r2, r4, #26
 800a4e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	eba3 0309 	sub.w	r3, r3, r9
 800a4f0:	455b      	cmp	r3, fp
 800a4f2:	dc33      	bgt.n	800a55c <_printf_float+0x380>
 800a4f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	db3b      	blt.n	800a574 <_printf_float+0x398>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	07da      	lsls	r2, r3, #31
 800a500:	d438      	bmi.n	800a574 <_printf_float+0x398>
 800a502:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a506:	eba2 0903 	sub.w	r9, r2, r3
 800a50a:	9b05      	ldr	r3, [sp, #20]
 800a50c:	1ad2      	subs	r2, r2, r3
 800a50e:	4591      	cmp	r9, r2
 800a510:	bfa8      	it	ge
 800a512:	4691      	movge	r9, r2
 800a514:	f1b9 0f00 	cmp.w	r9, #0
 800a518:	dc35      	bgt.n	800a586 <_printf_float+0x3aa>
 800a51a:	f04f 0800 	mov.w	r8, #0
 800a51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a522:	f104 0a1a 	add.w	sl, r4, #26
 800a526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	eba3 0309 	sub.w	r3, r3, r9
 800a530:	4543      	cmp	r3, r8
 800a532:	f77f af79 	ble.w	800a428 <_printf_float+0x24c>
 800a536:	2301      	movs	r3, #1
 800a538:	4652      	mov	r2, sl
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	f43f aeaa 	beq.w	800a29a <_printf_float+0xbe>
 800a546:	f108 0801 	add.w	r8, r8, #1
 800a54a:	e7ec      	b.n	800a526 <_printf_float+0x34a>
 800a54c:	4613      	mov	r3, r2
 800a54e:	4631      	mov	r1, r6
 800a550:	4642      	mov	r2, r8
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	d1c0      	bne.n	800a4dc <_printf_float+0x300>
 800a55a:	e69e      	b.n	800a29a <_printf_float+0xbe>
 800a55c:	2301      	movs	r3, #1
 800a55e:	4631      	mov	r1, r6
 800a560:	4628      	mov	r0, r5
 800a562:	9205      	str	r2, [sp, #20]
 800a564:	47b8      	blx	r7
 800a566:	3001      	adds	r0, #1
 800a568:	f43f ae97 	beq.w	800a29a <_printf_float+0xbe>
 800a56c:	9a05      	ldr	r2, [sp, #20]
 800a56e:	f10b 0b01 	add.w	fp, fp, #1
 800a572:	e7b9      	b.n	800a4e8 <_printf_float+0x30c>
 800a574:	ee18 3a10 	vmov	r3, s16
 800a578:	4652      	mov	r2, sl
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	d1be      	bne.n	800a502 <_printf_float+0x326>
 800a584:	e689      	b.n	800a29a <_printf_float+0xbe>
 800a586:	9a05      	ldr	r2, [sp, #20]
 800a588:	464b      	mov	r3, r9
 800a58a:	4442      	add	r2, r8
 800a58c:	4631      	mov	r1, r6
 800a58e:	4628      	mov	r0, r5
 800a590:	47b8      	blx	r7
 800a592:	3001      	adds	r0, #1
 800a594:	d1c1      	bne.n	800a51a <_printf_float+0x33e>
 800a596:	e680      	b.n	800a29a <_printf_float+0xbe>
 800a598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a59a:	2a01      	cmp	r2, #1
 800a59c:	dc01      	bgt.n	800a5a2 <_printf_float+0x3c6>
 800a59e:	07db      	lsls	r3, r3, #31
 800a5a0:	d53a      	bpl.n	800a618 <_printf_float+0x43c>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b8      	blx	r7
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	f43f ae74 	beq.w	800a29a <_printf_float+0xbe>
 800a5b2:	ee18 3a10 	vmov	r3, s16
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b8      	blx	r7
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f43f ae6b 	beq.w	800a29a <_printf_float+0xbe>
 800a5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a5d0:	f7f6 fab2 	bl	8000b38 <__aeabi_dcmpeq>
 800a5d4:	b9d8      	cbnz	r0, 800a60e <_printf_float+0x432>
 800a5d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a5da:	f108 0201 	add.w	r2, r8, #1
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b8      	blx	r7
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d10e      	bne.n	800a606 <_printf_float+0x42a>
 800a5e8:	e657      	b.n	800a29a <_printf_float+0xbe>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	f43f ae50 	beq.w	800a29a <_printf_float+0xbe>
 800a5fa:	f108 0801 	add.w	r8, r8, #1
 800a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	4543      	cmp	r3, r8
 800a604:	dcf1      	bgt.n	800a5ea <_printf_float+0x40e>
 800a606:	464b      	mov	r3, r9
 800a608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a60c:	e6da      	b.n	800a3c4 <_printf_float+0x1e8>
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	f104 0a1a 	add.w	sl, r4, #26
 800a616:	e7f2      	b.n	800a5fe <_printf_float+0x422>
 800a618:	2301      	movs	r3, #1
 800a61a:	4642      	mov	r2, r8
 800a61c:	e7df      	b.n	800a5de <_printf_float+0x402>
 800a61e:	2301      	movs	r3, #1
 800a620:	464a      	mov	r2, r9
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	47b8      	blx	r7
 800a628:	3001      	adds	r0, #1
 800a62a:	f43f ae36 	beq.w	800a29a <_printf_float+0xbe>
 800a62e:	f108 0801 	add.w	r8, r8, #1
 800a632:	68e3      	ldr	r3, [r4, #12]
 800a634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a636:	1a5b      	subs	r3, r3, r1
 800a638:	4543      	cmp	r3, r8
 800a63a:	dcf0      	bgt.n	800a61e <_printf_float+0x442>
 800a63c:	e6f8      	b.n	800a430 <_printf_float+0x254>
 800a63e:	f04f 0800 	mov.w	r8, #0
 800a642:	f104 0919 	add.w	r9, r4, #25
 800a646:	e7f4      	b.n	800a632 <_printf_float+0x456>

0800a648 <_printf_common>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	4616      	mov	r6, r2
 800a64e:	4699      	mov	r9, r3
 800a650:	688a      	ldr	r2, [r1, #8]
 800a652:	690b      	ldr	r3, [r1, #16]
 800a654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a658:	4293      	cmp	r3, r2
 800a65a:	bfb8      	it	lt
 800a65c:	4613      	movlt	r3, r2
 800a65e:	6033      	str	r3, [r6, #0]
 800a660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a664:	4607      	mov	r7, r0
 800a666:	460c      	mov	r4, r1
 800a668:	b10a      	cbz	r2, 800a66e <_printf_common+0x26>
 800a66a:	3301      	adds	r3, #1
 800a66c:	6033      	str	r3, [r6, #0]
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	0699      	lsls	r1, r3, #26
 800a672:	bf42      	ittt	mi
 800a674:	6833      	ldrmi	r3, [r6, #0]
 800a676:	3302      	addmi	r3, #2
 800a678:	6033      	strmi	r3, [r6, #0]
 800a67a:	6825      	ldr	r5, [r4, #0]
 800a67c:	f015 0506 	ands.w	r5, r5, #6
 800a680:	d106      	bne.n	800a690 <_printf_common+0x48>
 800a682:	f104 0a19 	add.w	sl, r4, #25
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	6832      	ldr	r2, [r6, #0]
 800a68a:	1a9b      	subs	r3, r3, r2
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	dc26      	bgt.n	800a6de <_printf_common+0x96>
 800a690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a694:	1e13      	subs	r3, r2, #0
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	bf18      	it	ne
 800a69a:	2301      	movne	r3, #1
 800a69c:	0692      	lsls	r2, r2, #26
 800a69e:	d42b      	bmi.n	800a6f8 <_printf_common+0xb0>
 800a6a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	47c0      	blx	r8
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d01e      	beq.n	800a6ec <_printf_common+0xa4>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	f003 0306 	and.w	r3, r3, #6
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	bf02      	ittt	eq
 800a6ba:	68e5      	ldreq	r5, [r4, #12]
 800a6bc:	6833      	ldreq	r3, [r6, #0]
 800a6be:	1aed      	subeq	r5, r5, r3
 800a6c0:	68a3      	ldr	r3, [r4, #8]
 800a6c2:	bf0c      	ite	eq
 800a6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6c8:	2500      	movne	r5, #0
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	bfc4      	itt	gt
 800a6ce:	1a9b      	subgt	r3, r3, r2
 800a6d0:	18ed      	addgt	r5, r5, r3
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	341a      	adds	r4, #26
 800a6d6:	42b5      	cmp	r5, r6
 800a6d8:	d11a      	bne.n	800a710 <_printf_common+0xc8>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e008      	b.n	800a6f0 <_printf_common+0xa8>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	47c0      	blx	r8
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d103      	bne.n	800a6f4 <_printf_common+0xac>
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	e7c6      	b.n	800a686 <_printf_common+0x3e>
 800a6f8:	18e1      	adds	r1, r4, r3
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	2030      	movs	r0, #48	; 0x30
 800a6fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a702:	4422      	add	r2, r4
 800a704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a70c:	3302      	adds	r3, #2
 800a70e:	e7c7      	b.n	800a6a0 <_printf_common+0x58>
 800a710:	2301      	movs	r3, #1
 800a712:	4622      	mov	r2, r4
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d0e6      	beq.n	800a6ec <_printf_common+0xa4>
 800a71e:	3601      	adds	r6, #1
 800a720:	e7d9      	b.n	800a6d6 <_printf_common+0x8e>
	...

0800a724 <_printf_i>:
 800a724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	7e0f      	ldrb	r7, [r1, #24]
 800a72a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a72c:	2f78      	cmp	r7, #120	; 0x78
 800a72e:	4691      	mov	r9, r2
 800a730:	4680      	mov	r8, r0
 800a732:	460c      	mov	r4, r1
 800a734:	469a      	mov	sl, r3
 800a736:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a73a:	d807      	bhi.n	800a74c <_printf_i+0x28>
 800a73c:	2f62      	cmp	r7, #98	; 0x62
 800a73e:	d80a      	bhi.n	800a756 <_printf_i+0x32>
 800a740:	2f00      	cmp	r7, #0
 800a742:	f000 80d4 	beq.w	800a8ee <_printf_i+0x1ca>
 800a746:	2f58      	cmp	r7, #88	; 0x58
 800a748:	f000 80c0 	beq.w	800a8cc <_printf_i+0x1a8>
 800a74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a754:	e03a      	b.n	800a7cc <_printf_i+0xa8>
 800a756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a75a:	2b15      	cmp	r3, #21
 800a75c:	d8f6      	bhi.n	800a74c <_printf_i+0x28>
 800a75e:	a101      	add	r1, pc, #4	; (adr r1, 800a764 <_printf_i+0x40>)
 800a760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a7d1 	.word	0x0800a7d1
 800a76c:	0800a74d 	.word	0x0800a74d
 800a770:	0800a74d 	.word	0x0800a74d
 800a774:	0800a74d 	.word	0x0800a74d
 800a778:	0800a74d 	.word	0x0800a74d
 800a77c:	0800a7d1 	.word	0x0800a7d1
 800a780:	0800a74d 	.word	0x0800a74d
 800a784:	0800a74d 	.word	0x0800a74d
 800a788:	0800a74d 	.word	0x0800a74d
 800a78c:	0800a74d 	.word	0x0800a74d
 800a790:	0800a8d5 	.word	0x0800a8d5
 800a794:	0800a7fd 	.word	0x0800a7fd
 800a798:	0800a88f 	.word	0x0800a88f
 800a79c:	0800a74d 	.word	0x0800a74d
 800a7a0:	0800a74d 	.word	0x0800a74d
 800a7a4:	0800a8f7 	.word	0x0800a8f7
 800a7a8:	0800a74d 	.word	0x0800a74d
 800a7ac:	0800a7fd 	.word	0x0800a7fd
 800a7b0:	0800a74d 	.word	0x0800a74d
 800a7b4:	0800a74d 	.word	0x0800a74d
 800a7b8:	0800a897 	.word	0x0800a897
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	1d1a      	adds	r2, r3, #4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	602a      	str	r2, [r5, #0]
 800a7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e09f      	b.n	800a910 <_printf_i+0x1ec>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	682b      	ldr	r3, [r5, #0]
 800a7d4:	0607      	lsls	r7, r0, #24
 800a7d6:	f103 0104 	add.w	r1, r3, #4
 800a7da:	6029      	str	r1, [r5, #0]
 800a7dc:	d501      	bpl.n	800a7e2 <_printf_i+0xbe>
 800a7de:	681e      	ldr	r6, [r3, #0]
 800a7e0:	e003      	b.n	800a7ea <_printf_i+0xc6>
 800a7e2:	0646      	lsls	r6, r0, #25
 800a7e4:	d5fb      	bpl.n	800a7de <_printf_i+0xba>
 800a7e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	da03      	bge.n	800a7f6 <_printf_i+0xd2>
 800a7ee:	232d      	movs	r3, #45	; 0x2d
 800a7f0:	4276      	negs	r6, r6
 800a7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f6:	485a      	ldr	r0, [pc, #360]	; (800a960 <_printf_i+0x23c>)
 800a7f8:	230a      	movs	r3, #10
 800a7fa:	e012      	b.n	800a822 <_printf_i+0xfe>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	6820      	ldr	r0, [r4, #0]
 800a800:	1d19      	adds	r1, r3, #4
 800a802:	6029      	str	r1, [r5, #0]
 800a804:	0605      	lsls	r5, r0, #24
 800a806:	d501      	bpl.n	800a80c <_printf_i+0xe8>
 800a808:	681e      	ldr	r6, [r3, #0]
 800a80a:	e002      	b.n	800a812 <_printf_i+0xee>
 800a80c:	0641      	lsls	r1, r0, #25
 800a80e:	d5fb      	bpl.n	800a808 <_printf_i+0xe4>
 800a810:	881e      	ldrh	r6, [r3, #0]
 800a812:	4853      	ldr	r0, [pc, #332]	; (800a960 <_printf_i+0x23c>)
 800a814:	2f6f      	cmp	r7, #111	; 0x6f
 800a816:	bf0c      	ite	eq
 800a818:	2308      	moveq	r3, #8
 800a81a:	230a      	movne	r3, #10
 800a81c:	2100      	movs	r1, #0
 800a81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a822:	6865      	ldr	r5, [r4, #4]
 800a824:	60a5      	str	r5, [r4, #8]
 800a826:	2d00      	cmp	r5, #0
 800a828:	bfa2      	ittt	ge
 800a82a:	6821      	ldrge	r1, [r4, #0]
 800a82c:	f021 0104 	bicge.w	r1, r1, #4
 800a830:	6021      	strge	r1, [r4, #0]
 800a832:	b90e      	cbnz	r6, 800a838 <_printf_i+0x114>
 800a834:	2d00      	cmp	r5, #0
 800a836:	d04b      	beq.n	800a8d0 <_printf_i+0x1ac>
 800a838:	4615      	mov	r5, r2
 800a83a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a83e:	fb03 6711 	mls	r7, r3, r1, r6
 800a842:	5dc7      	ldrb	r7, [r0, r7]
 800a844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a848:	4637      	mov	r7, r6
 800a84a:	42bb      	cmp	r3, r7
 800a84c:	460e      	mov	r6, r1
 800a84e:	d9f4      	bls.n	800a83a <_printf_i+0x116>
 800a850:	2b08      	cmp	r3, #8
 800a852:	d10b      	bne.n	800a86c <_printf_i+0x148>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	07de      	lsls	r6, r3, #31
 800a858:	d508      	bpl.n	800a86c <_printf_i+0x148>
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	6861      	ldr	r1, [r4, #4]
 800a85e:	4299      	cmp	r1, r3
 800a860:	bfde      	ittt	le
 800a862:	2330      	movle	r3, #48	; 0x30
 800a864:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a86c:	1b52      	subs	r2, r2, r5
 800a86e:	6122      	str	r2, [r4, #16]
 800a870:	f8cd a000 	str.w	sl, [sp]
 800a874:	464b      	mov	r3, r9
 800a876:	aa03      	add	r2, sp, #12
 800a878:	4621      	mov	r1, r4
 800a87a:	4640      	mov	r0, r8
 800a87c:	f7ff fee4 	bl	800a648 <_printf_common>
 800a880:	3001      	adds	r0, #1
 800a882:	d14a      	bne.n	800a91a <_printf_i+0x1f6>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	b004      	add	sp, #16
 800a88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	f043 0320 	orr.w	r3, r3, #32
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	4833      	ldr	r0, [pc, #204]	; (800a964 <_printf_i+0x240>)
 800a898:	2778      	movs	r7, #120	; 0x78
 800a89a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	6829      	ldr	r1, [r5, #0]
 800a8a2:	061f      	lsls	r7, r3, #24
 800a8a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8a8:	d402      	bmi.n	800a8b0 <_printf_i+0x18c>
 800a8aa:	065f      	lsls	r7, r3, #25
 800a8ac:	bf48      	it	mi
 800a8ae:	b2b6      	uxthmi	r6, r6
 800a8b0:	07df      	lsls	r7, r3, #31
 800a8b2:	bf48      	it	mi
 800a8b4:	f043 0320 	orrmi.w	r3, r3, #32
 800a8b8:	6029      	str	r1, [r5, #0]
 800a8ba:	bf48      	it	mi
 800a8bc:	6023      	strmi	r3, [r4, #0]
 800a8be:	b91e      	cbnz	r6, 800a8c8 <_printf_i+0x1a4>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	f023 0320 	bic.w	r3, r3, #32
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	2310      	movs	r3, #16
 800a8ca:	e7a7      	b.n	800a81c <_printf_i+0xf8>
 800a8cc:	4824      	ldr	r0, [pc, #144]	; (800a960 <_printf_i+0x23c>)
 800a8ce:	e7e4      	b.n	800a89a <_printf_i+0x176>
 800a8d0:	4615      	mov	r5, r2
 800a8d2:	e7bd      	b.n	800a850 <_printf_i+0x12c>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	6826      	ldr	r6, [r4, #0]
 800a8d8:	6961      	ldr	r1, [r4, #20]
 800a8da:	1d18      	adds	r0, r3, #4
 800a8dc:	6028      	str	r0, [r5, #0]
 800a8de:	0635      	lsls	r5, r6, #24
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	d501      	bpl.n	800a8e8 <_printf_i+0x1c4>
 800a8e4:	6019      	str	r1, [r3, #0]
 800a8e6:	e002      	b.n	800a8ee <_printf_i+0x1ca>
 800a8e8:	0670      	lsls	r0, r6, #25
 800a8ea:	d5fb      	bpl.n	800a8e4 <_printf_i+0x1c0>
 800a8ec:	8019      	strh	r1, [r3, #0]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	4615      	mov	r5, r2
 800a8f4:	e7bc      	b.n	800a870 <_printf_i+0x14c>
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	1d1a      	adds	r2, r3, #4
 800a8fa:	602a      	str	r2, [r5, #0]
 800a8fc:	681d      	ldr	r5, [r3, #0]
 800a8fe:	6862      	ldr	r2, [r4, #4]
 800a900:	2100      	movs	r1, #0
 800a902:	4628      	mov	r0, r5
 800a904:	f7f5 fc9c 	bl	8000240 <memchr>
 800a908:	b108      	cbz	r0, 800a90e <_printf_i+0x1ea>
 800a90a:	1b40      	subs	r0, r0, r5
 800a90c:	6060      	str	r0, [r4, #4]
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	6123      	str	r3, [r4, #16]
 800a912:	2300      	movs	r3, #0
 800a914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a918:	e7aa      	b.n	800a870 <_printf_i+0x14c>
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	462a      	mov	r2, r5
 800a91e:	4649      	mov	r1, r9
 800a920:	4640      	mov	r0, r8
 800a922:	47d0      	blx	sl
 800a924:	3001      	adds	r0, #1
 800a926:	d0ad      	beq.n	800a884 <_printf_i+0x160>
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	079b      	lsls	r3, r3, #30
 800a92c:	d413      	bmi.n	800a956 <_printf_i+0x232>
 800a92e:	68e0      	ldr	r0, [r4, #12]
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	4298      	cmp	r0, r3
 800a934:	bfb8      	it	lt
 800a936:	4618      	movlt	r0, r3
 800a938:	e7a6      	b.n	800a888 <_printf_i+0x164>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4632      	mov	r2, r6
 800a93e:	4649      	mov	r1, r9
 800a940:	4640      	mov	r0, r8
 800a942:	47d0      	blx	sl
 800a944:	3001      	adds	r0, #1
 800a946:	d09d      	beq.n	800a884 <_printf_i+0x160>
 800a948:	3501      	adds	r5, #1
 800a94a:	68e3      	ldr	r3, [r4, #12]
 800a94c:	9903      	ldr	r1, [sp, #12]
 800a94e:	1a5b      	subs	r3, r3, r1
 800a950:	42ab      	cmp	r3, r5
 800a952:	dcf2      	bgt.n	800a93a <_printf_i+0x216>
 800a954:	e7eb      	b.n	800a92e <_printf_i+0x20a>
 800a956:	2500      	movs	r5, #0
 800a958:	f104 0619 	add.w	r6, r4, #25
 800a95c:	e7f5      	b.n	800a94a <_printf_i+0x226>
 800a95e:	bf00      	nop
 800a960:	0800d0e7 	.word	0x0800d0e7
 800a964:	0800d0f8 	.word	0x0800d0f8

0800a968 <std>:
 800a968:	2300      	movs	r3, #0
 800a96a:	b510      	push	{r4, lr}
 800a96c:	4604      	mov	r4, r0
 800a96e:	e9c0 3300 	strd	r3, r3, [r0]
 800a972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a976:	6083      	str	r3, [r0, #8]
 800a978:	8181      	strh	r1, [r0, #12]
 800a97a:	6643      	str	r3, [r0, #100]	; 0x64
 800a97c:	81c2      	strh	r2, [r0, #14]
 800a97e:	6183      	str	r3, [r0, #24]
 800a980:	4619      	mov	r1, r3
 800a982:	2208      	movs	r2, #8
 800a984:	305c      	adds	r0, #92	; 0x5c
 800a986:	f000 f93a 	bl	800abfe <memset>
 800a98a:	4b0d      	ldr	r3, [pc, #52]	; (800a9c0 <std+0x58>)
 800a98c:	6263      	str	r3, [r4, #36]	; 0x24
 800a98e:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <std+0x5c>)
 800a990:	62a3      	str	r3, [r4, #40]	; 0x28
 800a992:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <std+0x60>)
 800a994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a996:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <std+0x64>)
 800a998:	6323      	str	r3, [r4, #48]	; 0x30
 800a99a:	4b0d      	ldr	r3, [pc, #52]	; (800a9d0 <std+0x68>)
 800a99c:	6224      	str	r4, [r4, #32]
 800a99e:	429c      	cmp	r4, r3
 800a9a0:	d006      	beq.n	800a9b0 <std+0x48>
 800a9a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a9a6:	4294      	cmp	r4, r2
 800a9a8:	d002      	beq.n	800a9b0 <std+0x48>
 800a9aa:	33d0      	adds	r3, #208	; 0xd0
 800a9ac:	429c      	cmp	r4, r3
 800a9ae:	d105      	bne.n	800a9bc <std+0x54>
 800a9b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b8:	f000 b9fa 	b.w	800adb0 <__retarget_lock_init_recursive>
 800a9bc:	bd10      	pop	{r4, pc}
 800a9be:	bf00      	nop
 800a9c0:	0800ab79 	.word	0x0800ab79
 800a9c4:	0800ab9b 	.word	0x0800ab9b
 800a9c8:	0800abd3 	.word	0x0800abd3
 800a9cc:	0800abf7 	.word	0x0800abf7
 800a9d0:	20000898 	.word	0x20000898

0800a9d4 <stdio_exit_handler>:
 800a9d4:	4a02      	ldr	r2, [pc, #8]	; (800a9e0 <stdio_exit_handler+0xc>)
 800a9d6:	4903      	ldr	r1, [pc, #12]	; (800a9e4 <stdio_exit_handler+0x10>)
 800a9d8:	4803      	ldr	r0, [pc, #12]	; (800a9e8 <stdio_exit_handler+0x14>)
 800a9da:	f000 b869 	b.w	800aab0 <_fwalk_sglue>
 800a9de:	bf00      	nop
 800a9e0:	200000d0 	.word	0x200000d0
 800a9e4:	0800ca29 	.word	0x0800ca29
 800a9e8:	200000dc 	.word	0x200000dc

0800a9ec <cleanup_stdio>:
 800a9ec:	6841      	ldr	r1, [r0, #4]
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <cleanup_stdio+0x34>)
 800a9f0:	4299      	cmp	r1, r3
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	d001      	beq.n	800a9fc <cleanup_stdio+0x10>
 800a9f8:	f002 f816 	bl	800ca28 <_fflush_r>
 800a9fc:	68a1      	ldr	r1, [r4, #8]
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <cleanup_stdio+0x38>)
 800aa00:	4299      	cmp	r1, r3
 800aa02:	d002      	beq.n	800aa0a <cleanup_stdio+0x1e>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f002 f80f 	bl	800ca28 <_fflush_r>
 800aa0a:	68e1      	ldr	r1, [r4, #12]
 800aa0c:	4b06      	ldr	r3, [pc, #24]	; (800aa28 <cleanup_stdio+0x3c>)
 800aa0e:	4299      	cmp	r1, r3
 800aa10:	d004      	beq.n	800aa1c <cleanup_stdio+0x30>
 800aa12:	4620      	mov	r0, r4
 800aa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa18:	f002 b806 	b.w	800ca28 <_fflush_r>
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000898 	.word	0x20000898
 800aa24:	20000900 	.word	0x20000900
 800aa28:	20000968 	.word	0x20000968

0800aa2c <global_stdio_init.part.0>:
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <global_stdio_init.part.0+0x30>)
 800aa30:	4c0b      	ldr	r4, [pc, #44]	; (800aa60 <global_stdio_init.part.0+0x34>)
 800aa32:	4a0c      	ldr	r2, [pc, #48]	; (800aa64 <global_stdio_init.part.0+0x38>)
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	4620      	mov	r0, r4
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2104      	movs	r1, #4
 800aa3c:	f7ff ff94 	bl	800a968 <std>
 800aa40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa44:	2201      	movs	r2, #1
 800aa46:	2109      	movs	r1, #9
 800aa48:	f7ff ff8e 	bl	800a968 <std>
 800aa4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa50:	2202      	movs	r2, #2
 800aa52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa56:	2112      	movs	r1, #18
 800aa58:	f7ff bf86 	b.w	800a968 <std>
 800aa5c:	200009d0 	.word	0x200009d0
 800aa60:	20000898 	.word	0x20000898
 800aa64:	0800a9d5 	.word	0x0800a9d5

0800aa68 <__sfp_lock_acquire>:
 800aa68:	4801      	ldr	r0, [pc, #4]	; (800aa70 <__sfp_lock_acquire+0x8>)
 800aa6a:	f000 b9a2 	b.w	800adb2 <__retarget_lock_acquire_recursive>
 800aa6e:	bf00      	nop
 800aa70:	200009d9 	.word	0x200009d9

0800aa74 <__sfp_lock_release>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__sfp_lock_release+0x8>)
 800aa76:	f000 b99d 	b.w	800adb4 <__retarget_lock_release_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	200009d9 	.word	0x200009d9

0800aa80 <__sinit>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	4604      	mov	r4, r0
 800aa84:	f7ff fff0 	bl	800aa68 <__sfp_lock_acquire>
 800aa88:	6a23      	ldr	r3, [r4, #32]
 800aa8a:	b11b      	cbz	r3, 800aa94 <__sinit+0x14>
 800aa8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa90:	f7ff bff0 	b.w	800aa74 <__sfp_lock_release>
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <__sinit+0x28>)
 800aa96:	6223      	str	r3, [r4, #32]
 800aa98:	4b04      	ldr	r3, [pc, #16]	; (800aaac <__sinit+0x2c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1f5      	bne.n	800aa8c <__sinit+0xc>
 800aaa0:	f7ff ffc4 	bl	800aa2c <global_stdio_init.part.0>
 800aaa4:	e7f2      	b.n	800aa8c <__sinit+0xc>
 800aaa6:	bf00      	nop
 800aaa8:	0800a9ed 	.word	0x0800a9ed
 800aaac:	200009d0 	.word	0x200009d0

0800aab0 <_fwalk_sglue>:
 800aab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab4:	4607      	mov	r7, r0
 800aab6:	4688      	mov	r8, r1
 800aab8:	4614      	mov	r4, r2
 800aaba:	2600      	movs	r6, #0
 800aabc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aac0:	f1b9 0901 	subs.w	r9, r9, #1
 800aac4:	d505      	bpl.n	800aad2 <_fwalk_sglue+0x22>
 800aac6:	6824      	ldr	r4, [r4, #0]
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	d1f7      	bne.n	800aabc <_fwalk_sglue+0xc>
 800aacc:	4630      	mov	r0, r6
 800aace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d907      	bls.n	800aae8 <_fwalk_sglue+0x38>
 800aad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aadc:	3301      	adds	r3, #1
 800aade:	d003      	beq.n	800aae8 <_fwalk_sglue+0x38>
 800aae0:	4629      	mov	r1, r5
 800aae2:	4638      	mov	r0, r7
 800aae4:	47c0      	blx	r8
 800aae6:	4306      	orrs	r6, r0
 800aae8:	3568      	adds	r5, #104	; 0x68
 800aaea:	e7e9      	b.n	800aac0 <_fwalk_sglue+0x10>

0800aaec <iprintf>:
 800aaec:	b40f      	push	{r0, r1, r2, r3}
 800aaee:	b507      	push	{r0, r1, r2, lr}
 800aaf0:	4906      	ldr	r1, [pc, #24]	; (800ab0c <iprintf+0x20>)
 800aaf2:	ab04      	add	r3, sp, #16
 800aaf4:	6808      	ldr	r0, [r1, #0]
 800aaf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aafa:	6881      	ldr	r1, [r0, #8]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	f001 fdf3 	bl	800c6e8 <_vfiprintf_r>
 800ab02:	b003      	add	sp, #12
 800ab04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab08:	b004      	add	sp, #16
 800ab0a:	4770      	bx	lr
 800ab0c:	20000128 	.word	0x20000128

0800ab10 <sniprintf>:
 800ab10:	b40c      	push	{r2, r3}
 800ab12:	b530      	push	{r4, r5, lr}
 800ab14:	4b17      	ldr	r3, [pc, #92]	; (800ab74 <sniprintf+0x64>)
 800ab16:	1e0c      	subs	r4, r1, #0
 800ab18:	681d      	ldr	r5, [r3, #0]
 800ab1a:	b09d      	sub	sp, #116	; 0x74
 800ab1c:	da08      	bge.n	800ab30 <sniprintf+0x20>
 800ab1e:	238b      	movs	r3, #139	; 0x8b
 800ab20:	602b      	str	r3, [r5, #0]
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295
 800ab26:	b01d      	add	sp, #116	; 0x74
 800ab28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab2c:	b002      	add	sp, #8
 800ab2e:	4770      	bx	lr
 800ab30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab38:	bf14      	ite	ne
 800ab3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab3e:	4623      	moveq	r3, r4
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	9307      	str	r3, [sp, #28]
 800ab44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab48:	9002      	str	r0, [sp, #8]
 800ab4a:	9006      	str	r0, [sp, #24]
 800ab4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab52:	ab21      	add	r3, sp, #132	; 0x84
 800ab54:	a902      	add	r1, sp, #8
 800ab56:	4628      	mov	r0, r5
 800ab58:	9301      	str	r3, [sp, #4]
 800ab5a:	f001 fc9d 	bl	800c498 <_svfiprintf_r>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	bfbc      	itt	lt
 800ab62:	238b      	movlt	r3, #139	; 0x8b
 800ab64:	602b      	strlt	r3, [r5, #0]
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d0dd      	beq.n	800ab26 <sniprintf+0x16>
 800ab6a:	9b02      	ldr	r3, [sp, #8]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	e7d9      	b.n	800ab26 <sniprintf+0x16>
 800ab72:	bf00      	nop
 800ab74:	20000128 	.word	0x20000128

0800ab78 <__sread>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab80:	f000 f8c8 	bl	800ad14 <_read_r>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	bfab      	itete	ge
 800ab88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab8c:	181b      	addge	r3, r3, r0
 800ab8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab92:	bfac      	ite	ge
 800ab94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab96:	81a3      	strhlt	r3, [r4, #12]
 800ab98:	bd10      	pop	{r4, pc}

0800ab9a <__swrite>:
 800ab9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9e:	461f      	mov	r7, r3
 800aba0:	898b      	ldrh	r3, [r1, #12]
 800aba2:	05db      	lsls	r3, r3, #23
 800aba4:	4605      	mov	r5, r0
 800aba6:	460c      	mov	r4, r1
 800aba8:	4616      	mov	r6, r2
 800abaa:	d505      	bpl.n	800abb8 <__swrite+0x1e>
 800abac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb0:	2302      	movs	r3, #2
 800abb2:	2200      	movs	r2, #0
 800abb4:	f000 f89c 	bl	800acf0 <_lseek_r>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	4632      	mov	r2, r6
 800abc6:	463b      	mov	r3, r7
 800abc8:	4628      	mov	r0, r5
 800abca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abce:	f000 b8b3 	b.w	800ad38 <_write_r>

0800abd2 <__sseek>:
 800abd2:	b510      	push	{r4, lr}
 800abd4:	460c      	mov	r4, r1
 800abd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abda:	f000 f889 	bl	800acf0 <_lseek_r>
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	bf15      	itete	ne
 800abe4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abee:	81a3      	strheq	r3, [r4, #12]
 800abf0:	bf18      	it	ne
 800abf2:	81a3      	strhne	r3, [r4, #12]
 800abf4:	bd10      	pop	{r4, pc}

0800abf6 <__sclose>:
 800abf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abfa:	f000 b869 	b.w	800acd0 <_close_r>

0800abfe <memset>:
 800abfe:	4402      	add	r2, r0
 800ac00:	4603      	mov	r3, r0
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d100      	bne.n	800ac08 <memset+0xa>
 800ac06:	4770      	bx	lr
 800ac08:	f803 1b01 	strb.w	r1, [r3], #1
 800ac0c:	e7f9      	b.n	800ac02 <memset+0x4>
	...

0800ac10 <strtok>:
 800ac10:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <strtok+0x5c>)
 800ac12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac14:	681e      	ldr	r6, [r3, #0]
 800ac16:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ac18:	4605      	mov	r5, r0
 800ac1a:	b9fc      	cbnz	r4, 800ac5c <strtok+0x4c>
 800ac1c:	2050      	movs	r0, #80	; 0x50
 800ac1e:	9101      	str	r1, [sp, #4]
 800ac20:	f000 ffb0 	bl	800bb84 <malloc>
 800ac24:	9901      	ldr	r1, [sp, #4]
 800ac26:	6470      	str	r0, [r6, #68]	; 0x44
 800ac28:	4602      	mov	r2, r0
 800ac2a:	b920      	cbnz	r0, 800ac36 <strtok+0x26>
 800ac2c:	4b10      	ldr	r3, [pc, #64]	; (800ac70 <strtok+0x60>)
 800ac2e:	4811      	ldr	r0, [pc, #68]	; (800ac74 <strtok+0x64>)
 800ac30:	215b      	movs	r1, #91	; 0x5b
 800ac32:	f000 f8c1 	bl	800adb8 <__assert_func>
 800ac36:	e9c0 4400 	strd	r4, r4, [r0]
 800ac3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ac46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ac4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ac4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ac52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ac56:	6184      	str	r4, [r0, #24]
 800ac58:	7704      	strb	r4, [r0, #28]
 800ac5a:	6244      	str	r4, [r0, #36]	; 0x24
 800ac5c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4628      	mov	r0, r5
 800ac62:	b002      	add	sp, #8
 800ac64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac68:	f000 b806 	b.w	800ac78 <__strtok_r>
 800ac6c:	20000128 	.word	0x20000128
 800ac70:	0800d109 	.word	0x0800d109
 800ac74:	0800d120 	.word	0x0800d120

0800ac78 <__strtok_r>:
 800ac78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7a:	b908      	cbnz	r0, 800ac80 <__strtok_r+0x8>
 800ac7c:	6810      	ldr	r0, [r2, #0]
 800ac7e:	b188      	cbz	r0, 800aca4 <__strtok_r+0x2c>
 800ac80:	4604      	mov	r4, r0
 800ac82:	4620      	mov	r0, r4
 800ac84:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac88:	460f      	mov	r7, r1
 800ac8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac8e:	b91e      	cbnz	r6, 800ac98 <__strtok_r+0x20>
 800ac90:	b965      	cbnz	r5, 800acac <__strtok_r+0x34>
 800ac92:	6015      	str	r5, [r2, #0]
 800ac94:	4628      	mov	r0, r5
 800ac96:	e005      	b.n	800aca4 <__strtok_r+0x2c>
 800ac98:	42b5      	cmp	r5, r6
 800ac9a:	d1f6      	bne.n	800ac8a <__strtok_r+0x12>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1f0      	bne.n	800ac82 <__strtok_r+0xa>
 800aca0:	6014      	str	r4, [r2, #0]
 800aca2:	7003      	strb	r3, [r0, #0]
 800aca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca6:	461c      	mov	r4, r3
 800aca8:	e00c      	b.n	800acc4 <__strtok_r+0x4c>
 800acaa:	b915      	cbnz	r5, 800acb2 <__strtok_r+0x3a>
 800acac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acb0:	460e      	mov	r6, r1
 800acb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800acb6:	42ab      	cmp	r3, r5
 800acb8:	d1f7      	bne.n	800acaa <__strtok_r+0x32>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0f3      	beq.n	800aca6 <__strtok_r+0x2e>
 800acbe:	2300      	movs	r3, #0
 800acc0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acc4:	6014      	str	r4, [r2, #0]
 800acc6:	e7ed      	b.n	800aca4 <__strtok_r+0x2c>

0800acc8 <_localeconv_r>:
 800acc8:	4800      	ldr	r0, [pc, #0]	; (800accc <_localeconv_r+0x4>)
 800acca:	4770      	bx	lr
 800accc:	2000021c 	.word	0x2000021c

0800acd0 <_close_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	; (800acec <_close_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f7 f8a9 	bl	8001e32 <_close>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_close_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_close_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	200009d4 	.word	0x200009d4

0800acf0 <_lseek_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	; (800ad10 <_lseek_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7f7 f8be 	bl	8001e80 <_lseek>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_lseek_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_lseek_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	200009d4 	.word	0x200009d4

0800ad14 <_read_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	; (800ad34 <_read_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f7 f84c 	bl	8001dc0 <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_read_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_read_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	200009d4 	.word	0x200009d4

0800ad38 <_write_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	; (800ad58 <_write_r+0x20>)
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	4608      	mov	r0, r1
 800ad40:	4611      	mov	r1, r2
 800ad42:	2200      	movs	r2, #0
 800ad44:	602a      	str	r2, [r5, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f7f7 f857 	bl	8001dfa <_write>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_write_r+0x1e>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_write_r+0x1e>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	200009d4 	.word	0x200009d4

0800ad5c <__errno>:
 800ad5c:	4b01      	ldr	r3, [pc, #4]	; (800ad64 <__errno+0x8>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20000128 	.word	0x20000128

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4d0d      	ldr	r5, [pc, #52]	; (800ada0 <__libc_init_array+0x38>)
 800ad6c:	4c0d      	ldr	r4, [pc, #52]	; (800ada4 <__libc_init_array+0x3c>)
 800ad6e:	1b64      	subs	r4, r4, r5
 800ad70:	10a4      	asrs	r4, r4, #2
 800ad72:	2600      	movs	r6, #0
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	4d0b      	ldr	r5, [pc, #44]	; (800ada8 <__libc_init_array+0x40>)
 800ad7a:	4c0c      	ldr	r4, [pc, #48]	; (800adac <__libc_init_array+0x44>)
 800ad7c:	f002 f898 	bl	800ceb0 <_init>
 800ad80:	1b64      	subs	r4, r4, r5
 800ad82:	10a4      	asrs	r4, r4, #2
 800ad84:	2600      	movs	r6, #0
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad90:	4798      	blx	r3
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9a:	4798      	blx	r3
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800d3a8 	.word	0x0800d3a8
 800ada4:	0800d3a8 	.word	0x0800d3a8
 800ada8:	0800d3a8 	.word	0x0800d3a8
 800adac:	0800d3ac 	.word	0x0800d3ac

0800adb0 <__retarget_lock_init_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_acquire_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <__retarget_lock_release_recursive>:
 800adb4:	4770      	bx	lr
	...

0800adb8 <__assert_func>:
 800adb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adba:	4614      	mov	r4, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <__assert_func+0x2c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4605      	mov	r5, r0
 800adc4:	68d8      	ldr	r0, [r3, #12]
 800adc6:	b14c      	cbz	r4, 800addc <__assert_func+0x24>
 800adc8:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <__assert_func+0x30>)
 800adca:	9100      	str	r1, [sp, #0]
 800adcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add0:	4906      	ldr	r1, [pc, #24]	; (800adec <__assert_func+0x34>)
 800add2:	462b      	mov	r3, r5
 800add4:	f001 fe50 	bl	800ca78 <fiprintf>
 800add8:	f001 ff2e 	bl	800cc38 <abort>
 800addc:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <__assert_func+0x38>)
 800adde:	461c      	mov	r4, r3
 800ade0:	e7f3      	b.n	800adca <__assert_func+0x12>
 800ade2:	bf00      	nop
 800ade4:	20000128 	.word	0x20000128
 800ade8:	0800d17a 	.word	0x0800d17a
 800adec:	0800d187 	.word	0x0800d187
 800adf0:	0800d1b5 	.word	0x0800d1b5

0800adf4 <quorem>:
 800adf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	6903      	ldr	r3, [r0, #16]
 800adfa:	690c      	ldr	r4, [r1, #16]
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	4607      	mov	r7, r0
 800ae00:	db7e      	blt.n	800af00 <quorem+0x10c>
 800ae02:	3c01      	subs	r4, #1
 800ae04:	f101 0814 	add.w	r8, r1, #20
 800ae08:	f100 0514 	add.w	r5, r0, #20
 800ae0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae26:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae2a:	d331      	bcc.n	800ae90 <quorem+0x9c>
 800ae2c:	f04f 0e00 	mov.w	lr, #0
 800ae30:	4640      	mov	r0, r8
 800ae32:	46ac      	mov	ip, r5
 800ae34:	46f2      	mov	sl, lr
 800ae36:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae3a:	b293      	uxth	r3, r2
 800ae3c:	fb06 e303 	mla	r3, r6, r3, lr
 800ae40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae44:	0c1a      	lsrs	r2, r3, #16
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	ebaa 0303 	sub.w	r3, sl, r3
 800ae4c:	f8dc a000 	ldr.w	sl, [ip]
 800ae50:	fa13 f38a 	uxtah	r3, r3, sl
 800ae54:	fb06 220e 	mla	r2, r6, lr, r2
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	9b00      	ldr	r3, [sp, #0]
 800ae5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae60:	b292      	uxth	r2, r2
 800ae62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae6a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae6e:	4581      	cmp	r9, r0
 800ae70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae74:	f84c 3b04 	str.w	r3, [ip], #4
 800ae78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae7c:	d2db      	bcs.n	800ae36 <quorem+0x42>
 800ae7e:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae82:	b92b      	cbnz	r3, 800ae90 <quorem+0x9c>
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	3b04      	subs	r3, #4
 800ae88:	429d      	cmp	r5, r3
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	d32c      	bcc.n	800aee8 <quorem+0xf4>
 800ae8e:	613c      	str	r4, [r7, #16]
 800ae90:	4638      	mov	r0, r7
 800ae92:	f001 f9a7 	bl	800c1e4 <__mcmp>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	db22      	blt.n	800aee0 <quorem+0xec>
 800ae9a:	3601      	adds	r6, #1
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	2000      	movs	r0, #0
 800aea0:	f858 2b04 	ldr.w	r2, [r8], #4
 800aea4:	f8d1 c000 	ldr.w	ip, [r1]
 800aea8:	b293      	uxth	r3, r2
 800aeaa:	1ac3      	subs	r3, r0, r3
 800aeac:	0c12      	lsrs	r2, r2, #16
 800aeae:	fa13 f38c 	uxtah	r3, r3, ip
 800aeb2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aeb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aec0:	45c1      	cmp	r9, r8
 800aec2:	f841 3b04 	str.w	r3, [r1], #4
 800aec6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aeca:	d2e9      	bcs.n	800aea0 <quorem+0xac>
 800aecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aed4:	b922      	cbnz	r2, 800aee0 <quorem+0xec>
 800aed6:	3b04      	subs	r3, #4
 800aed8:	429d      	cmp	r5, r3
 800aeda:	461a      	mov	r2, r3
 800aedc:	d30a      	bcc.n	800aef4 <quorem+0x100>
 800aede:	613c      	str	r4, [r7, #16]
 800aee0:	4630      	mov	r0, r6
 800aee2:	b003      	add	sp, #12
 800aee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee8:	6812      	ldr	r2, [r2, #0]
 800aeea:	3b04      	subs	r3, #4
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	d1ce      	bne.n	800ae8e <quorem+0x9a>
 800aef0:	3c01      	subs	r4, #1
 800aef2:	e7c9      	b.n	800ae88 <quorem+0x94>
 800aef4:	6812      	ldr	r2, [r2, #0]
 800aef6:	3b04      	subs	r3, #4
 800aef8:	2a00      	cmp	r2, #0
 800aefa:	d1f0      	bne.n	800aede <quorem+0xea>
 800aefc:	3c01      	subs	r4, #1
 800aefe:	e7eb      	b.n	800aed8 <quorem+0xe4>
 800af00:	2000      	movs	r0, #0
 800af02:	e7ee      	b.n	800aee2 <quorem+0xee>
 800af04:	0000      	movs	r0, r0
	...

0800af08 <_dtoa_r>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	ed2d 8b04 	vpush	{d8-d9}
 800af10:	69c5      	ldr	r5, [r0, #28]
 800af12:	b093      	sub	sp, #76	; 0x4c
 800af14:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af18:	ec57 6b10 	vmov	r6, r7, d0
 800af1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af20:	9107      	str	r1, [sp, #28]
 800af22:	4604      	mov	r4, r0
 800af24:	920a      	str	r2, [sp, #40]	; 0x28
 800af26:	930d      	str	r3, [sp, #52]	; 0x34
 800af28:	b975      	cbnz	r5, 800af48 <_dtoa_r+0x40>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f000 fe2a 	bl	800bb84 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	61e0      	str	r0, [r4, #28]
 800af34:	b920      	cbnz	r0, 800af40 <_dtoa_r+0x38>
 800af36:	4bae      	ldr	r3, [pc, #696]	; (800b1f0 <_dtoa_r+0x2e8>)
 800af38:	21ef      	movs	r1, #239	; 0xef
 800af3a:	48ae      	ldr	r0, [pc, #696]	; (800b1f4 <_dtoa_r+0x2ec>)
 800af3c:	f7ff ff3c 	bl	800adb8 <__assert_func>
 800af40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af44:	6005      	str	r5, [r0, #0]
 800af46:	60c5      	str	r5, [r0, #12]
 800af48:	69e3      	ldr	r3, [r4, #28]
 800af4a:	6819      	ldr	r1, [r3, #0]
 800af4c:	b151      	cbz	r1, 800af64 <_dtoa_r+0x5c>
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	604a      	str	r2, [r1, #4]
 800af52:	2301      	movs	r3, #1
 800af54:	4093      	lsls	r3, r2
 800af56:	608b      	str	r3, [r1, #8]
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 ff07 	bl	800bd6c <_Bfree>
 800af5e:	69e3      	ldr	r3, [r4, #28]
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	1e3b      	subs	r3, r7, #0
 800af66:	bfbb      	ittet	lt
 800af68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af6c:	9303      	strlt	r3, [sp, #12]
 800af6e:	2300      	movge	r3, #0
 800af70:	2201      	movlt	r2, #1
 800af72:	bfac      	ite	ge
 800af74:	f8c8 3000 	strge.w	r3, [r8]
 800af78:	f8c8 2000 	strlt.w	r2, [r8]
 800af7c:	4b9e      	ldr	r3, [pc, #632]	; (800b1f8 <_dtoa_r+0x2f0>)
 800af7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af82:	ea33 0308 	bics.w	r3, r3, r8
 800af86:	d11b      	bne.n	800afc0 <_dtoa_r+0xb8>
 800af88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800af94:	4333      	orrs	r3, r6
 800af96:	f000 8593 	beq.w	800bac0 <_dtoa_r+0xbb8>
 800af9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af9c:	b963      	cbnz	r3, 800afb8 <_dtoa_r+0xb0>
 800af9e:	4b97      	ldr	r3, [pc, #604]	; (800b1fc <_dtoa_r+0x2f4>)
 800afa0:	e027      	b.n	800aff2 <_dtoa_r+0xea>
 800afa2:	4b97      	ldr	r3, [pc, #604]	; (800b200 <_dtoa_r+0x2f8>)
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	3308      	adds	r3, #8
 800afa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	9800      	ldr	r0, [sp, #0]
 800afae:	b013      	add	sp, #76	; 0x4c
 800afb0:	ecbd 8b04 	vpop	{d8-d9}
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb8:	4b90      	ldr	r3, [pc, #576]	; (800b1fc <_dtoa_r+0x2f4>)
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	3303      	adds	r3, #3
 800afbe:	e7f3      	b.n	800afa8 <_dtoa_r+0xa0>
 800afc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afc4:	2200      	movs	r2, #0
 800afc6:	ec51 0b17 	vmov	r0, r1, d7
 800afca:	eeb0 8a47 	vmov.f32	s16, s14
 800afce:	eef0 8a67 	vmov.f32	s17, s15
 800afd2:	2300      	movs	r3, #0
 800afd4:	f7f5 fdb0 	bl	8000b38 <__aeabi_dcmpeq>
 800afd8:	4681      	mov	r9, r0
 800afda:	b160      	cbz	r0, 800aff6 <_dtoa_r+0xee>
 800afdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afde:	2301      	movs	r3, #1
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 8568 	beq.w	800baba <_dtoa_r+0xbb2>
 800afea:	4b86      	ldr	r3, [pc, #536]	; (800b204 <_dtoa_r+0x2fc>)
 800afec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	e7da      	b.n	800afac <_dtoa_r+0xa4>
 800aff6:	aa10      	add	r2, sp, #64	; 0x40
 800aff8:	a911      	add	r1, sp, #68	; 0x44
 800affa:	4620      	mov	r0, r4
 800affc:	eeb0 0a48 	vmov.f32	s0, s16
 800b000:	eef0 0a68 	vmov.f32	s1, s17
 800b004:	f001 f994 	bl	800c330 <__d2b>
 800b008:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b00c:	4682      	mov	sl, r0
 800b00e:	2d00      	cmp	r5, #0
 800b010:	d07f      	beq.n	800b112 <_dtoa_r+0x20a>
 800b012:	ee18 3a90 	vmov	r3, s17
 800b016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b01a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b01e:	ec51 0b18 	vmov	r0, r1, d8
 800b022:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b02a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b02e:	4619      	mov	r1, r3
 800b030:	2200      	movs	r2, #0
 800b032:	4b75      	ldr	r3, [pc, #468]	; (800b208 <_dtoa_r+0x300>)
 800b034:	f7f5 f960 	bl	80002f8 <__aeabi_dsub>
 800b038:	a367      	add	r3, pc, #412	; (adr r3, 800b1d8 <_dtoa_r+0x2d0>)
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f7f5 fb13 	bl	8000668 <__aeabi_dmul>
 800b042:	a367      	add	r3, pc, #412	; (adr r3, 800b1e0 <_dtoa_r+0x2d8>)
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f7f5 f958 	bl	80002fc <__adddf3>
 800b04c:	4606      	mov	r6, r0
 800b04e:	4628      	mov	r0, r5
 800b050:	460f      	mov	r7, r1
 800b052:	f7f5 fa9f 	bl	8000594 <__aeabi_i2d>
 800b056:	a364      	add	r3, pc, #400	; (adr r3, 800b1e8 <_dtoa_r+0x2e0>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f7f5 fb04 	bl	8000668 <__aeabi_dmul>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4630      	mov	r0, r6
 800b066:	4639      	mov	r1, r7
 800b068:	f7f5 f948 	bl	80002fc <__adddf3>
 800b06c:	4606      	mov	r6, r0
 800b06e:	460f      	mov	r7, r1
 800b070:	f7f5 fdaa 	bl	8000bc8 <__aeabi_d2iz>
 800b074:	2200      	movs	r2, #0
 800b076:	4683      	mov	fp, r0
 800b078:	2300      	movs	r3, #0
 800b07a:	4630      	mov	r0, r6
 800b07c:	4639      	mov	r1, r7
 800b07e:	f7f5 fd65 	bl	8000b4c <__aeabi_dcmplt>
 800b082:	b148      	cbz	r0, 800b098 <_dtoa_r+0x190>
 800b084:	4658      	mov	r0, fp
 800b086:	f7f5 fa85 	bl	8000594 <__aeabi_i2d>
 800b08a:	4632      	mov	r2, r6
 800b08c:	463b      	mov	r3, r7
 800b08e:	f7f5 fd53 	bl	8000b38 <__aeabi_dcmpeq>
 800b092:	b908      	cbnz	r0, 800b098 <_dtoa_r+0x190>
 800b094:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b098:	f1bb 0f16 	cmp.w	fp, #22
 800b09c:	d857      	bhi.n	800b14e <_dtoa_r+0x246>
 800b09e:	4b5b      	ldr	r3, [pc, #364]	; (800b20c <_dtoa_r+0x304>)
 800b0a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	ec51 0b18 	vmov	r0, r1, d8
 800b0ac:	f7f5 fd4e 	bl	8000b4c <__aeabi_dcmplt>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d04e      	beq.n	800b152 <_dtoa_r+0x24a>
 800b0b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0be:	1b5b      	subs	r3, r3, r5
 800b0c0:	1e5a      	subs	r2, r3, #1
 800b0c2:	bf45      	ittet	mi
 800b0c4:	f1c3 0301 	rsbmi	r3, r3, #1
 800b0c8:	9305      	strmi	r3, [sp, #20]
 800b0ca:	2300      	movpl	r3, #0
 800b0cc:	2300      	movmi	r3, #0
 800b0ce:	9206      	str	r2, [sp, #24]
 800b0d0:	bf54      	ite	pl
 800b0d2:	9305      	strpl	r3, [sp, #20]
 800b0d4:	9306      	strmi	r3, [sp, #24]
 800b0d6:	f1bb 0f00 	cmp.w	fp, #0
 800b0da:	db3c      	blt.n	800b156 <_dtoa_r+0x24e>
 800b0dc:	9b06      	ldr	r3, [sp, #24]
 800b0de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b0e2:	445b      	add	r3, fp
 800b0e4:	9306      	str	r3, [sp, #24]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9308      	str	r3, [sp, #32]
 800b0ea:	9b07      	ldr	r3, [sp, #28]
 800b0ec:	2b09      	cmp	r3, #9
 800b0ee:	d868      	bhi.n	800b1c2 <_dtoa_r+0x2ba>
 800b0f0:	2b05      	cmp	r3, #5
 800b0f2:	bfc4      	itt	gt
 800b0f4:	3b04      	subgt	r3, #4
 800b0f6:	9307      	strgt	r3, [sp, #28]
 800b0f8:	9b07      	ldr	r3, [sp, #28]
 800b0fa:	f1a3 0302 	sub.w	r3, r3, #2
 800b0fe:	bfcc      	ite	gt
 800b100:	2500      	movgt	r5, #0
 800b102:	2501      	movle	r5, #1
 800b104:	2b03      	cmp	r3, #3
 800b106:	f200 8085 	bhi.w	800b214 <_dtoa_r+0x30c>
 800b10a:	e8df f003 	tbb	[pc, r3]
 800b10e:	3b2e      	.short	0x3b2e
 800b110:	5839      	.short	0x5839
 800b112:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b116:	441d      	add	r5, r3
 800b118:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b11c:	2b20      	cmp	r3, #32
 800b11e:	bfc1      	itttt	gt
 800b120:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b124:	fa08 f803 	lslgt.w	r8, r8, r3
 800b128:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b12c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b130:	bfd6      	itet	le
 800b132:	f1c3 0320 	rsble	r3, r3, #32
 800b136:	ea48 0003 	orrgt.w	r0, r8, r3
 800b13a:	fa06 f003 	lslle.w	r0, r6, r3
 800b13e:	f7f5 fa19 	bl	8000574 <__aeabi_ui2d>
 800b142:	2201      	movs	r2, #1
 800b144:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b148:	3d01      	subs	r5, #1
 800b14a:	920e      	str	r2, [sp, #56]	; 0x38
 800b14c:	e76f      	b.n	800b02e <_dtoa_r+0x126>
 800b14e:	2301      	movs	r3, #1
 800b150:	e7b3      	b.n	800b0ba <_dtoa_r+0x1b2>
 800b152:	900c      	str	r0, [sp, #48]	; 0x30
 800b154:	e7b2      	b.n	800b0bc <_dtoa_r+0x1b4>
 800b156:	9b05      	ldr	r3, [sp, #20]
 800b158:	eba3 030b 	sub.w	r3, r3, fp
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	f1cb 0300 	rsb	r3, fp, #0
 800b162:	9308      	str	r3, [sp, #32]
 800b164:	2300      	movs	r3, #0
 800b166:	930b      	str	r3, [sp, #44]	; 0x2c
 800b168:	e7bf      	b.n	800b0ea <_dtoa_r+0x1e2>
 800b16a:	2300      	movs	r3, #0
 800b16c:	9309      	str	r3, [sp, #36]	; 0x24
 800b16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc52      	bgt.n	800b21a <_dtoa_r+0x312>
 800b174:	2301      	movs	r3, #1
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	461a      	mov	r2, r3
 800b17c:	920a      	str	r2, [sp, #40]	; 0x28
 800b17e:	e00b      	b.n	800b198 <_dtoa_r+0x290>
 800b180:	2301      	movs	r3, #1
 800b182:	e7f3      	b.n	800b16c <_dtoa_r+0x264>
 800b184:	2300      	movs	r3, #0
 800b186:	9309      	str	r3, [sp, #36]	; 0x24
 800b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18a:	445b      	add	r3, fp
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	3301      	adds	r3, #1
 800b190:	2b01      	cmp	r3, #1
 800b192:	9304      	str	r3, [sp, #16]
 800b194:	bfb8      	it	lt
 800b196:	2301      	movlt	r3, #1
 800b198:	69e0      	ldr	r0, [r4, #28]
 800b19a:	2100      	movs	r1, #0
 800b19c:	2204      	movs	r2, #4
 800b19e:	f102 0614 	add.w	r6, r2, #20
 800b1a2:	429e      	cmp	r6, r3
 800b1a4:	d93d      	bls.n	800b222 <_dtoa_r+0x31a>
 800b1a6:	6041      	str	r1, [r0, #4]
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fd9f 	bl	800bcec <_Balloc>
 800b1ae:	9000      	str	r0, [sp, #0]
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d139      	bne.n	800b228 <_dtoa_r+0x320>
 800b1b4:	4b16      	ldr	r3, [pc, #88]	; (800b210 <_dtoa_r+0x308>)
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	f240 11af 	movw	r1, #431	; 0x1af
 800b1bc:	e6bd      	b.n	800af3a <_dtoa_r+0x32>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e7e1      	b.n	800b186 <_dtoa_r+0x27e>
 800b1c2:	2501      	movs	r5, #1
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9307      	str	r3, [sp, #28]
 800b1c8:	9509      	str	r5, [sp, #36]	; 0x24
 800b1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2312      	movs	r3, #18
 800b1d6:	e7d1      	b.n	800b17c <_dtoa_r+0x274>
 800b1d8:	636f4361 	.word	0x636f4361
 800b1dc:	3fd287a7 	.word	0x3fd287a7
 800b1e0:	8b60c8b3 	.word	0x8b60c8b3
 800b1e4:	3fc68a28 	.word	0x3fc68a28
 800b1e8:	509f79fb 	.word	0x509f79fb
 800b1ec:	3fd34413 	.word	0x3fd34413
 800b1f0:	0800d109 	.word	0x0800d109
 800b1f4:	0800d1c3 	.word	0x0800d1c3
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	0800d1bf 	.word	0x0800d1bf
 800b200:	0800d1b6 	.word	0x0800d1b6
 800b204:	0800d0e6 	.word	0x0800d0e6
 800b208:	3ff80000 	.word	0x3ff80000
 800b20c:	0800d2b0 	.word	0x0800d2b0
 800b210:	0800d21b 	.word	0x0800d21b
 800b214:	2301      	movs	r3, #1
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	e7d7      	b.n	800b1ca <_dtoa_r+0x2c2>
 800b21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	e7ba      	b.n	800b198 <_dtoa_r+0x290>
 800b222:	3101      	adds	r1, #1
 800b224:	0052      	lsls	r2, r2, #1
 800b226:	e7ba      	b.n	800b19e <_dtoa_r+0x296>
 800b228:	69e3      	ldr	r3, [r4, #28]
 800b22a:	9a00      	ldr	r2, [sp, #0]
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	9b04      	ldr	r3, [sp, #16]
 800b230:	2b0e      	cmp	r3, #14
 800b232:	f200 80a8 	bhi.w	800b386 <_dtoa_r+0x47e>
 800b236:	2d00      	cmp	r5, #0
 800b238:	f000 80a5 	beq.w	800b386 <_dtoa_r+0x47e>
 800b23c:	f1bb 0f00 	cmp.w	fp, #0
 800b240:	dd38      	ble.n	800b2b4 <_dtoa_r+0x3ac>
 800b242:	4bc0      	ldr	r3, [pc, #768]	; (800b544 <_dtoa_r+0x63c>)
 800b244:	f00b 020f 	and.w	r2, fp, #15
 800b248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b24c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b250:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b254:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b258:	d019      	beq.n	800b28e <_dtoa_r+0x386>
 800b25a:	4bbb      	ldr	r3, [pc, #748]	; (800b548 <_dtoa_r+0x640>)
 800b25c:	ec51 0b18 	vmov	r0, r1, d8
 800b260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b264:	f7f5 fb2a 	bl	80008bc <__aeabi_ddiv>
 800b268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b26c:	f008 080f 	and.w	r8, r8, #15
 800b270:	2503      	movs	r5, #3
 800b272:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b548 <_dtoa_r+0x640>
 800b276:	f1b8 0f00 	cmp.w	r8, #0
 800b27a:	d10a      	bne.n	800b292 <_dtoa_r+0x38a>
 800b27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	f7f5 fb1a 	bl	80008bc <__aeabi_ddiv>
 800b288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b28c:	e02b      	b.n	800b2e6 <_dtoa_r+0x3de>
 800b28e:	2502      	movs	r5, #2
 800b290:	e7ef      	b.n	800b272 <_dtoa_r+0x36a>
 800b292:	f018 0f01 	tst.w	r8, #1
 800b296:	d008      	beq.n	800b2aa <_dtoa_r+0x3a2>
 800b298:	4630      	mov	r0, r6
 800b29a:	4639      	mov	r1, r7
 800b29c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b2a0:	f7f5 f9e2 	bl	8000668 <__aeabi_dmul>
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460f      	mov	r7, r1
 800b2aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b2ae:	f109 0908 	add.w	r9, r9, #8
 800b2b2:	e7e0      	b.n	800b276 <_dtoa_r+0x36e>
 800b2b4:	f000 809f 	beq.w	800b3f6 <_dtoa_r+0x4ee>
 800b2b8:	f1cb 0600 	rsb	r6, fp, #0
 800b2bc:	4ba1      	ldr	r3, [pc, #644]	; (800b544 <_dtoa_r+0x63c>)
 800b2be:	4fa2      	ldr	r7, [pc, #648]	; (800b548 <_dtoa_r+0x640>)
 800b2c0:	f006 020f 	and.w	r2, r6, #15
 800b2c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	ec51 0b18 	vmov	r0, r1, d8
 800b2d0:	f7f5 f9ca 	bl	8000668 <__aeabi_dmul>
 800b2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d8:	1136      	asrs	r6, r6, #4
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2502      	movs	r5, #2
 800b2de:	2e00      	cmp	r6, #0
 800b2e0:	d17e      	bne.n	800b3e0 <_dtoa_r+0x4d8>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1d0      	bne.n	800b288 <_dtoa_r+0x380>
 800b2e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 8084 	beq.w	800b3fa <_dtoa_r+0x4f2>
 800b2f2:	4b96      	ldr	r3, [pc, #600]	; (800b54c <_dtoa_r+0x644>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	f7f5 fc27 	bl	8000b4c <__aeabi_dcmplt>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d07b      	beq.n	800b3fa <_dtoa_r+0x4f2>
 800b302:	9b04      	ldr	r3, [sp, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d078      	beq.n	800b3fa <_dtoa_r+0x4f2>
 800b308:	9b01      	ldr	r3, [sp, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dd39      	ble.n	800b382 <_dtoa_r+0x47a>
 800b30e:	4b90      	ldr	r3, [pc, #576]	; (800b550 <_dtoa_r+0x648>)
 800b310:	2200      	movs	r2, #0
 800b312:	4640      	mov	r0, r8
 800b314:	4649      	mov	r1, r9
 800b316:	f7f5 f9a7 	bl	8000668 <__aeabi_dmul>
 800b31a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b31e:	9e01      	ldr	r6, [sp, #4]
 800b320:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b324:	3501      	adds	r5, #1
 800b326:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7f5 f932 	bl	8000594 <__aeabi_i2d>
 800b330:	4642      	mov	r2, r8
 800b332:	464b      	mov	r3, r9
 800b334:	f7f5 f998 	bl	8000668 <__aeabi_dmul>
 800b338:	4b86      	ldr	r3, [pc, #536]	; (800b554 <_dtoa_r+0x64c>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	f7f4 ffde 	bl	80002fc <__adddf3>
 800b340:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b348:	9303      	str	r3, [sp, #12]
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d158      	bne.n	800b400 <_dtoa_r+0x4f8>
 800b34e:	4b82      	ldr	r3, [pc, #520]	; (800b558 <_dtoa_r+0x650>)
 800b350:	2200      	movs	r2, #0
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	f7f4 ffcf 	bl	80002f8 <__aeabi_dsub>
 800b35a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b35e:	4680      	mov	r8, r0
 800b360:	4689      	mov	r9, r1
 800b362:	f7f5 fc11 	bl	8000b88 <__aeabi_dcmpgt>
 800b366:	2800      	cmp	r0, #0
 800b368:	f040 8296 	bne.w	800b898 <_dtoa_r+0x990>
 800b36c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b370:	4640      	mov	r0, r8
 800b372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b376:	4649      	mov	r1, r9
 800b378:	f7f5 fbe8 	bl	8000b4c <__aeabi_dcmplt>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f040 8289 	bne.w	800b894 <_dtoa_r+0x98c>
 800b382:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f2c0 814e 	blt.w	800b62a <_dtoa_r+0x722>
 800b38e:	f1bb 0f0e 	cmp.w	fp, #14
 800b392:	f300 814a 	bgt.w	800b62a <_dtoa_r+0x722>
 800b396:	4b6b      	ldr	r3, [pc, #428]	; (800b544 <_dtoa_r+0x63c>)
 800b398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b39c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f280 80dc 	bge.w	800b560 <_dtoa_r+0x658>
 800b3a8:	9b04      	ldr	r3, [sp, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f300 80d8 	bgt.w	800b560 <_dtoa_r+0x658>
 800b3b0:	f040 826f 	bne.w	800b892 <_dtoa_r+0x98a>
 800b3b4:	4b68      	ldr	r3, [pc, #416]	; (800b558 <_dtoa_r+0x650>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	f7f5 f954 	bl	8000668 <__aeabi_dmul>
 800b3c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3c4:	f7f5 fbd6 	bl	8000b74 <__aeabi_dcmpge>
 800b3c8:	9e04      	ldr	r6, [sp, #16]
 800b3ca:	4637      	mov	r7, r6
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f040 8245 	bne.w	800b85c <_dtoa_r+0x954>
 800b3d2:	9d00      	ldr	r5, [sp, #0]
 800b3d4:	2331      	movs	r3, #49	; 0x31
 800b3d6:	f805 3b01 	strb.w	r3, [r5], #1
 800b3da:	f10b 0b01 	add.w	fp, fp, #1
 800b3de:	e241      	b.n	800b864 <_dtoa_r+0x95c>
 800b3e0:	07f2      	lsls	r2, r6, #31
 800b3e2:	d505      	bpl.n	800b3f0 <_dtoa_r+0x4e8>
 800b3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e8:	f7f5 f93e 	bl	8000668 <__aeabi_dmul>
 800b3ec:	3501      	adds	r5, #1
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	1076      	asrs	r6, r6, #1
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	e773      	b.n	800b2de <_dtoa_r+0x3d6>
 800b3f6:	2502      	movs	r5, #2
 800b3f8:	e775      	b.n	800b2e6 <_dtoa_r+0x3de>
 800b3fa:	9e04      	ldr	r6, [sp, #16]
 800b3fc:	465f      	mov	r7, fp
 800b3fe:	e792      	b.n	800b326 <_dtoa_r+0x41e>
 800b400:	9900      	ldr	r1, [sp, #0]
 800b402:	4b50      	ldr	r3, [pc, #320]	; (800b544 <_dtoa_r+0x63c>)
 800b404:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b408:	4431      	add	r1, r6
 800b40a:	9102      	str	r1, [sp, #8]
 800b40c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b40e:	eeb0 9a47 	vmov.f32	s18, s14
 800b412:	eef0 9a67 	vmov.f32	s19, s15
 800b416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b41a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b41e:	2900      	cmp	r1, #0
 800b420:	d044      	beq.n	800b4ac <_dtoa_r+0x5a4>
 800b422:	494e      	ldr	r1, [pc, #312]	; (800b55c <_dtoa_r+0x654>)
 800b424:	2000      	movs	r0, #0
 800b426:	f7f5 fa49 	bl	80008bc <__aeabi_ddiv>
 800b42a:	ec53 2b19 	vmov	r2, r3, d9
 800b42e:	f7f4 ff63 	bl	80002f8 <__aeabi_dsub>
 800b432:	9d00      	ldr	r5, [sp, #0]
 800b434:	ec41 0b19 	vmov	d9, r0, r1
 800b438:	4649      	mov	r1, r9
 800b43a:	4640      	mov	r0, r8
 800b43c:	f7f5 fbc4 	bl	8000bc8 <__aeabi_d2iz>
 800b440:	4606      	mov	r6, r0
 800b442:	f7f5 f8a7 	bl	8000594 <__aeabi_i2d>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4640      	mov	r0, r8
 800b44c:	4649      	mov	r1, r9
 800b44e:	f7f4 ff53 	bl	80002f8 <__aeabi_dsub>
 800b452:	3630      	adds	r6, #48	; 0x30
 800b454:	f805 6b01 	strb.w	r6, [r5], #1
 800b458:	ec53 2b19 	vmov	r2, r3, d9
 800b45c:	4680      	mov	r8, r0
 800b45e:	4689      	mov	r9, r1
 800b460:	f7f5 fb74 	bl	8000b4c <__aeabi_dcmplt>
 800b464:	2800      	cmp	r0, #0
 800b466:	d164      	bne.n	800b532 <_dtoa_r+0x62a>
 800b468:	4642      	mov	r2, r8
 800b46a:	464b      	mov	r3, r9
 800b46c:	4937      	ldr	r1, [pc, #220]	; (800b54c <_dtoa_r+0x644>)
 800b46e:	2000      	movs	r0, #0
 800b470:	f7f4 ff42 	bl	80002f8 <__aeabi_dsub>
 800b474:	ec53 2b19 	vmov	r2, r3, d9
 800b478:	f7f5 fb68 	bl	8000b4c <__aeabi_dcmplt>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	f040 80b6 	bne.w	800b5ee <_dtoa_r+0x6e6>
 800b482:	9b02      	ldr	r3, [sp, #8]
 800b484:	429d      	cmp	r5, r3
 800b486:	f43f af7c 	beq.w	800b382 <_dtoa_r+0x47a>
 800b48a:	4b31      	ldr	r3, [pc, #196]	; (800b550 <_dtoa_r+0x648>)
 800b48c:	ec51 0b19 	vmov	r0, r1, d9
 800b490:	2200      	movs	r2, #0
 800b492:	f7f5 f8e9 	bl	8000668 <__aeabi_dmul>
 800b496:	4b2e      	ldr	r3, [pc, #184]	; (800b550 <_dtoa_r+0x648>)
 800b498:	ec41 0b19 	vmov	d9, r0, r1
 800b49c:	2200      	movs	r2, #0
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f5 f8e1 	bl	8000668 <__aeabi_dmul>
 800b4a6:	4680      	mov	r8, r0
 800b4a8:	4689      	mov	r9, r1
 800b4aa:	e7c5      	b.n	800b438 <_dtoa_r+0x530>
 800b4ac:	ec51 0b17 	vmov	r0, r1, d7
 800b4b0:	f7f5 f8da 	bl	8000668 <__aeabi_dmul>
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	9d00      	ldr	r5, [sp, #0]
 800b4b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4ba:	ec41 0b19 	vmov	d9, r0, r1
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	f7f5 fb81 	bl	8000bc8 <__aeabi_d2iz>
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	f7f5 f864 	bl	8000594 <__aeabi_i2d>
 800b4cc:	3630      	adds	r6, #48	; 0x30
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	f7f4 ff0f 	bl	80002f8 <__aeabi_dsub>
 800b4da:	f805 6b01 	strb.w	r6, [r5], #1
 800b4de:	9b02      	ldr	r3, [sp, #8]
 800b4e0:	429d      	cmp	r5, r3
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	4689      	mov	r9, r1
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	d124      	bne.n	800b536 <_dtoa_r+0x62e>
 800b4ec:	4b1b      	ldr	r3, [pc, #108]	; (800b55c <_dtoa_r+0x654>)
 800b4ee:	ec51 0b19 	vmov	r0, r1, d9
 800b4f2:	f7f4 ff03 	bl	80002fc <__adddf3>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	f7f5 fb43 	bl	8000b88 <__aeabi_dcmpgt>
 800b502:	2800      	cmp	r0, #0
 800b504:	d173      	bne.n	800b5ee <_dtoa_r+0x6e6>
 800b506:	ec53 2b19 	vmov	r2, r3, d9
 800b50a:	4914      	ldr	r1, [pc, #80]	; (800b55c <_dtoa_r+0x654>)
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7f4 fef3 	bl	80002f8 <__aeabi_dsub>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	f7f5 fb17 	bl	8000b4c <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f43f af2f 	beq.w	800b382 <_dtoa_r+0x47a>
 800b524:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b526:	1e6b      	subs	r3, r5, #1
 800b528:	930f      	str	r3, [sp, #60]	; 0x3c
 800b52a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b52e:	2b30      	cmp	r3, #48	; 0x30
 800b530:	d0f8      	beq.n	800b524 <_dtoa_r+0x61c>
 800b532:	46bb      	mov	fp, r7
 800b534:	e04a      	b.n	800b5cc <_dtoa_r+0x6c4>
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <_dtoa_r+0x648>)
 800b538:	f7f5 f896 	bl	8000668 <__aeabi_dmul>
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	e7bd      	b.n	800b4be <_dtoa_r+0x5b6>
 800b542:	bf00      	nop
 800b544:	0800d2b0 	.word	0x0800d2b0
 800b548:	0800d288 	.word	0x0800d288
 800b54c:	3ff00000 	.word	0x3ff00000
 800b550:	40240000 	.word	0x40240000
 800b554:	401c0000 	.word	0x401c0000
 800b558:	40140000 	.word	0x40140000
 800b55c:	3fe00000 	.word	0x3fe00000
 800b560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b564:	9d00      	ldr	r5, [sp, #0]
 800b566:	4642      	mov	r2, r8
 800b568:	464b      	mov	r3, r9
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f5 f9a5 	bl	80008bc <__aeabi_ddiv>
 800b572:	f7f5 fb29 	bl	8000bc8 <__aeabi_d2iz>
 800b576:	9001      	str	r0, [sp, #4]
 800b578:	f7f5 f80c 	bl	8000594 <__aeabi_i2d>
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	f7f5 f872 	bl	8000668 <__aeabi_dmul>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f4 feb4 	bl	80002f8 <__aeabi_dsub>
 800b590:	9e01      	ldr	r6, [sp, #4]
 800b592:	9f04      	ldr	r7, [sp, #16]
 800b594:	3630      	adds	r6, #48	; 0x30
 800b596:	f805 6b01 	strb.w	r6, [r5], #1
 800b59a:	9e00      	ldr	r6, [sp, #0]
 800b59c:	1bae      	subs	r6, r5, r6
 800b59e:	42b7      	cmp	r7, r6
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	d134      	bne.n	800b610 <_dtoa_r+0x708>
 800b5a6:	f7f4 fea9 	bl	80002fc <__adddf3>
 800b5aa:	4642      	mov	r2, r8
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	f7f5 fae9 	bl	8000b88 <__aeabi_dcmpgt>
 800b5b6:	b9c8      	cbnz	r0, 800b5ec <_dtoa_r+0x6e4>
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	4630      	mov	r0, r6
 800b5be:	4639      	mov	r1, r7
 800b5c0:	f7f5 faba 	bl	8000b38 <__aeabi_dcmpeq>
 800b5c4:	b110      	cbz	r0, 800b5cc <_dtoa_r+0x6c4>
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	07db      	lsls	r3, r3, #31
 800b5ca:	d40f      	bmi.n	800b5ec <_dtoa_r+0x6e4>
 800b5cc:	4651      	mov	r1, sl
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 fbcc 	bl	800bd6c <_Bfree>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5d8:	702b      	strb	r3, [r5, #0]
 800b5da:	f10b 0301 	add.w	r3, fp, #1
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f43f ace2 	beq.w	800afac <_dtoa_r+0xa4>
 800b5e8:	601d      	str	r5, [r3, #0]
 800b5ea:	e4df      	b.n	800afac <_dtoa_r+0xa4>
 800b5ec:	465f      	mov	r7, fp
 800b5ee:	462b      	mov	r3, r5
 800b5f0:	461d      	mov	r5, r3
 800b5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f6:	2a39      	cmp	r2, #57	; 0x39
 800b5f8:	d106      	bne.n	800b608 <_dtoa_r+0x700>
 800b5fa:	9a00      	ldr	r2, [sp, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d1f7      	bne.n	800b5f0 <_dtoa_r+0x6e8>
 800b600:	9900      	ldr	r1, [sp, #0]
 800b602:	2230      	movs	r2, #48	; 0x30
 800b604:	3701      	adds	r7, #1
 800b606:	700a      	strb	r2, [r1, #0]
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	3201      	adds	r2, #1
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e790      	b.n	800b532 <_dtoa_r+0x62a>
 800b610:	4ba3      	ldr	r3, [pc, #652]	; (800b8a0 <_dtoa_r+0x998>)
 800b612:	2200      	movs	r2, #0
 800b614:	f7f5 f828 	bl	8000668 <__aeabi_dmul>
 800b618:	2200      	movs	r2, #0
 800b61a:	2300      	movs	r3, #0
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	f7f5 fa8a 	bl	8000b38 <__aeabi_dcmpeq>
 800b624:	2800      	cmp	r0, #0
 800b626:	d09e      	beq.n	800b566 <_dtoa_r+0x65e>
 800b628:	e7d0      	b.n	800b5cc <_dtoa_r+0x6c4>
 800b62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	f000 80ca 	beq.w	800b7c6 <_dtoa_r+0x8be>
 800b632:	9a07      	ldr	r2, [sp, #28]
 800b634:	2a01      	cmp	r2, #1
 800b636:	f300 80ad 	bgt.w	800b794 <_dtoa_r+0x88c>
 800b63a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	f000 80a5 	beq.w	800b78c <_dtoa_r+0x884>
 800b642:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b646:	9e08      	ldr	r6, [sp, #32]
 800b648:	9d05      	ldr	r5, [sp, #20]
 800b64a:	9a05      	ldr	r2, [sp, #20]
 800b64c:	441a      	add	r2, r3
 800b64e:	9205      	str	r2, [sp, #20]
 800b650:	9a06      	ldr	r2, [sp, #24]
 800b652:	2101      	movs	r1, #1
 800b654:	441a      	add	r2, r3
 800b656:	4620      	mov	r0, r4
 800b658:	9206      	str	r2, [sp, #24]
 800b65a:	f000 fc3d 	bl	800bed8 <__i2b>
 800b65e:	4607      	mov	r7, r0
 800b660:	b165      	cbz	r5, 800b67c <_dtoa_r+0x774>
 800b662:	9b06      	ldr	r3, [sp, #24]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd09      	ble.n	800b67c <_dtoa_r+0x774>
 800b668:	42ab      	cmp	r3, r5
 800b66a:	9a05      	ldr	r2, [sp, #20]
 800b66c:	bfa8      	it	ge
 800b66e:	462b      	movge	r3, r5
 800b670:	1ad2      	subs	r2, r2, r3
 800b672:	9205      	str	r2, [sp, #20]
 800b674:	9a06      	ldr	r2, [sp, #24]
 800b676:	1aed      	subs	r5, r5, r3
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	9306      	str	r3, [sp, #24]
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	b1f3      	cbz	r3, 800b6be <_dtoa_r+0x7b6>
 800b680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 80a3 	beq.w	800b7ce <_dtoa_r+0x8c6>
 800b688:	2e00      	cmp	r6, #0
 800b68a:	dd10      	ble.n	800b6ae <_dtoa_r+0x7a6>
 800b68c:	4639      	mov	r1, r7
 800b68e:	4632      	mov	r2, r6
 800b690:	4620      	mov	r0, r4
 800b692:	f000 fce1 	bl	800c058 <__pow5mult>
 800b696:	4652      	mov	r2, sl
 800b698:	4601      	mov	r1, r0
 800b69a:	4607      	mov	r7, r0
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fc31 	bl	800bf04 <__multiply>
 800b6a2:	4651      	mov	r1, sl
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fb60 	bl	800bd6c <_Bfree>
 800b6ac:	46c2      	mov	sl, r8
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	1b9a      	subs	r2, r3, r6
 800b6b2:	d004      	beq.n	800b6be <_dtoa_r+0x7b6>
 800b6b4:	4651      	mov	r1, sl
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f000 fcce 	bl	800c058 <__pow5mult>
 800b6bc:	4682      	mov	sl, r0
 800b6be:	2101      	movs	r1, #1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f000 fc09 	bl	800bed8 <__i2b>
 800b6c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	f340 8081 	ble.w	800b7d2 <_dtoa_r+0x8ca>
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f000 fcbf 	bl	800c058 <__pow5mult>
 800b6da:	9b07      	ldr	r3, [sp, #28]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	4606      	mov	r6, r0
 800b6e0:	dd7a      	ble.n	800b7d8 <_dtoa_r+0x8d0>
 800b6e2:	f04f 0800 	mov.w	r8, #0
 800b6e6:	6933      	ldr	r3, [r6, #16]
 800b6e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6ec:	6918      	ldr	r0, [r3, #16]
 800b6ee:	f000 fba5 	bl	800be3c <__hi0bits>
 800b6f2:	f1c0 0020 	rsb	r0, r0, #32
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	4418      	add	r0, r3
 800b6fa:	f010 001f 	ands.w	r0, r0, #31
 800b6fe:	f000 8094 	beq.w	800b82a <_dtoa_r+0x922>
 800b702:	f1c0 0320 	rsb	r3, r0, #32
 800b706:	2b04      	cmp	r3, #4
 800b708:	f340 8085 	ble.w	800b816 <_dtoa_r+0x90e>
 800b70c:	9b05      	ldr	r3, [sp, #20]
 800b70e:	f1c0 001c 	rsb	r0, r0, #28
 800b712:	4403      	add	r3, r0
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	9b06      	ldr	r3, [sp, #24]
 800b718:	4403      	add	r3, r0
 800b71a:	4405      	add	r5, r0
 800b71c:	9306      	str	r3, [sp, #24]
 800b71e:	9b05      	ldr	r3, [sp, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	dd05      	ble.n	800b730 <_dtoa_r+0x828>
 800b724:	4651      	mov	r1, sl
 800b726:	461a      	mov	r2, r3
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 fcef 	bl	800c10c <__lshift>
 800b72e:	4682      	mov	sl, r0
 800b730:	9b06      	ldr	r3, [sp, #24]
 800b732:	2b00      	cmp	r3, #0
 800b734:	dd05      	ble.n	800b742 <_dtoa_r+0x83a>
 800b736:	4631      	mov	r1, r6
 800b738:	461a      	mov	r2, r3
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 fce6 	bl	800c10c <__lshift>
 800b740:	4606      	mov	r6, r0
 800b742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b744:	2b00      	cmp	r3, #0
 800b746:	d072      	beq.n	800b82e <_dtoa_r+0x926>
 800b748:	4631      	mov	r1, r6
 800b74a:	4650      	mov	r0, sl
 800b74c:	f000 fd4a 	bl	800c1e4 <__mcmp>
 800b750:	2800      	cmp	r0, #0
 800b752:	da6c      	bge.n	800b82e <_dtoa_r+0x926>
 800b754:	2300      	movs	r3, #0
 800b756:	4651      	mov	r1, sl
 800b758:	220a      	movs	r2, #10
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 fb28 	bl	800bdb0 <__multadd>
 800b760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b762:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b766:	4682      	mov	sl, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 81b0 	beq.w	800bace <_dtoa_r+0xbc6>
 800b76e:	2300      	movs	r3, #0
 800b770:	4639      	mov	r1, r7
 800b772:	220a      	movs	r2, #10
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fb1b 	bl	800bdb0 <__multadd>
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	4607      	mov	r7, r0
 800b780:	f300 8096 	bgt.w	800b8b0 <_dtoa_r+0x9a8>
 800b784:	9b07      	ldr	r3, [sp, #28]
 800b786:	2b02      	cmp	r3, #2
 800b788:	dc59      	bgt.n	800b83e <_dtoa_r+0x936>
 800b78a:	e091      	b.n	800b8b0 <_dtoa_r+0x9a8>
 800b78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b78e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b792:	e758      	b.n	800b646 <_dtoa_r+0x73e>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	1e5e      	subs	r6, r3, #1
 800b798:	9b08      	ldr	r3, [sp, #32]
 800b79a:	42b3      	cmp	r3, r6
 800b79c:	bfbf      	itttt	lt
 800b79e:	9b08      	ldrlt	r3, [sp, #32]
 800b7a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b7a2:	9608      	strlt	r6, [sp, #32]
 800b7a4:	1af3      	sublt	r3, r6, r3
 800b7a6:	bfb4      	ite	lt
 800b7a8:	18d2      	addlt	r2, r2, r3
 800b7aa:	1b9e      	subge	r6, r3, r6
 800b7ac:	9b04      	ldr	r3, [sp, #16]
 800b7ae:	bfbc      	itt	lt
 800b7b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b7b2:	2600      	movlt	r6, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	bfb7      	itett	lt
 800b7b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b7bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b7c0:	1a9d      	sublt	r5, r3, r2
 800b7c2:	2300      	movlt	r3, #0
 800b7c4:	e741      	b.n	800b64a <_dtoa_r+0x742>
 800b7c6:	9e08      	ldr	r6, [sp, #32]
 800b7c8:	9d05      	ldr	r5, [sp, #20]
 800b7ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b7cc:	e748      	b.n	800b660 <_dtoa_r+0x758>
 800b7ce:	9a08      	ldr	r2, [sp, #32]
 800b7d0:	e770      	b.n	800b6b4 <_dtoa_r+0x7ac>
 800b7d2:	9b07      	ldr	r3, [sp, #28]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	dc19      	bgt.n	800b80c <_dtoa_r+0x904>
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	b9bb      	cbnz	r3, 800b80c <_dtoa_r+0x904>
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7e2:	b99b      	cbnz	r3, 800b80c <_dtoa_r+0x904>
 800b7e4:	9b03      	ldr	r3, [sp, #12]
 800b7e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7ea:	0d1b      	lsrs	r3, r3, #20
 800b7ec:	051b      	lsls	r3, r3, #20
 800b7ee:	b183      	cbz	r3, 800b812 <_dtoa_r+0x90a>
 800b7f0:	9b05      	ldr	r3, [sp, #20]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	9b06      	ldr	r3, [sp, #24]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	9306      	str	r3, [sp, #24]
 800b7fc:	f04f 0801 	mov.w	r8, #1
 800b800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b802:	2b00      	cmp	r3, #0
 800b804:	f47f af6f 	bne.w	800b6e6 <_dtoa_r+0x7de>
 800b808:	2001      	movs	r0, #1
 800b80a:	e774      	b.n	800b6f6 <_dtoa_r+0x7ee>
 800b80c:	f04f 0800 	mov.w	r8, #0
 800b810:	e7f6      	b.n	800b800 <_dtoa_r+0x8f8>
 800b812:	4698      	mov	r8, r3
 800b814:	e7f4      	b.n	800b800 <_dtoa_r+0x8f8>
 800b816:	d082      	beq.n	800b71e <_dtoa_r+0x816>
 800b818:	9a05      	ldr	r2, [sp, #20]
 800b81a:	331c      	adds	r3, #28
 800b81c:	441a      	add	r2, r3
 800b81e:	9205      	str	r2, [sp, #20]
 800b820:	9a06      	ldr	r2, [sp, #24]
 800b822:	441a      	add	r2, r3
 800b824:	441d      	add	r5, r3
 800b826:	9206      	str	r2, [sp, #24]
 800b828:	e779      	b.n	800b71e <_dtoa_r+0x816>
 800b82a:	4603      	mov	r3, r0
 800b82c:	e7f4      	b.n	800b818 <_dtoa_r+0x910>
 800b82e:	9b04      	ldr	r3, [sp, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	dc37      	bgt.n	800b8a4 <_dtoa_r+0x99c>
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	2b02      	cmp	r3, #2
 800b838:	dd34      	ble.n	800b8a4 <_dtoa_r+0x99c>
 800b83a:	9b04      	ldr	r3, [sp, #16]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	b963      	cbnz	r3, 800b85c <_dtoa_r+0x954>
 800b842:	4631      	mov	r1, r6
 800b844:	2205      	movs	r2, #5
 800b846:	4620      	mov	r0, r4
 800b848:	f000 fab2 	bl	800bdb0 <__multadd>
 800b84c:	4601      	mov	r1, r0
 800b84e:	4606      	mov	r6, r0
 800b850:	4650      	mov	r0, sl
 800b852:	f000 fcc7 	bl	800c1e4 <__mcmp>
 800b856:	2800      	cmp	r0, #0
 800b858:	f73f adbb 	bgt.w	800b3d2 <_dtoa_r+0x4ca>
 800b85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b85e:	9d00      	ldr	r5, [sp, #0]
 800b860:	ea6f 0b03 	mvn.w	fp, r3
 800b864:	f04f 0800 	mov.w	r8, #0
 800b868:	4631      	mov	r1, r6
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fa7e 	bl	800bd6c <_Bfree>
 800b870:	2f00      	cmp	r7, #0
 800b872:	f43f aeab 	beq.w	800b5cc <_dtoa_r+0x6c4>
 800b876:	f1b8 0f00 	cmp.w	r8, #0
 800b87a:	d005      	beq.n	800b888 <_dtoa_r+0x980>
 800b87c:	45b8      	cmp	r8, r7
 800b87e:	d003      	beq.n	800b888 <_dtoa_r+0x980>
 800b880:	4641      	mov	r1, r8
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fa72 	bl	800bd6c <_Bfree>
 800b888:	4639      	mov	r1, r7
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fa6e 	bl	800bd6c <_Bfree>
 800b890:	e69c      	b.n	800b5cc <_dtoa_r+0x6c4>
 800b892:	2600      	movs	r6, #0
 800b894:	4637      	mov	r7, r6
 800b896:	e7e1      	b.n	800b85c <_dtoa_r+0x954>
 800b898:	46bb      	mov	fp, r7
 800b89a:	4637      	mov	r7, r6
 800b89c:	e599      	b.n	800b3d2 <_dtoa_r+0x4ca>
 800b89e:	bf00      	nop
 800b8a0:	40240000 	.word	0x40240000
 800b8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 80c8 	beq.w	800ba3c <_dtoa_r+0xb34>
 800b8ac:	9b04      	ldr	r3, [sp, #16]
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	dd05      	ble.n	800b8c0 <_dtoa_r+0x9b8>
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	462a      	mov	r2, r5
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fc27 	bl	800c10c <__lshift>
 800b8be:	4607      	mov	r7, r0
 800b8c0:	f1b8 0f00 	cmp.w	r8, #0
 800b8c4:	d05b      	beq.n	800b97e <_dtoa_r+0xa76>
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 fa0f 	bl	800bcec <_Balloc>
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	b928      	cbnz	r0, 800b8de <_dtoa_r+0x9d6>
 800b8d2:	4b83      	ldr	r3, [pc, #524]	; (800bae0 <_dtoa_r+0xbd8>)
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b8da:	f7ff bb2e 	b.w	800af3a <_dtoa_r+0x32>
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	3202      	adds	r2, #2
 800b8e2:	0092      	lsls	r2, r2, #2
 800b8e4:	f107 010c 	add.w	r1, r7, #12
 800b8e8:	300c      	adds	r0, #12
 800b8ea:	f001 f997 	bl	800cc1c <memcpy>
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 fc0a 	bl	800c10c <__lshift>
 800b8f8:	9b00      	ldr	r3, [sp, #0]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b902:	4413      	add	r3, r2
 800b904:	9308      	str	r3, [sp, #32]
 800b906:	9b02      	ldr	r3, [sp, #8]
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	46b8      	mov	r8, r7
 800b90e:	9306      	str	r3, [sp, #24]
 800b910:	4607      	mov	r7, r0
 800b912:	9b04      	ldr	r3, [sp, #16]
 800b914:	4631      	mov	r1, r6
 800b916:	3b01      	subs	r3, #1
 800b918:	4650      	mov	r0, sl
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	f7ff fa6a 	bl	800adf4 <quorem>
 800b920:	4641      	mov	r1, r8
 800b922:	9002      	str	r0, [sp, #8]
 800b924:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b928:	4650      	mov	r0, sl
 800b92a:	f000 fc5b 	bl	800c1e4 <__mcmp>
 800b92e:	463a      	mov	r2, r7
 800b930:	9005      	str	r0, [sp, #20]
 800b932:	4631      	mov	r1, r6
 800b934:	4620      	mov	r0, r4
 800b936:	f000 fc71 	bl	800c21c <__mdiff>
 800b93a:	68c2      	ldr	r2, [r0, #12]
 800b93c:	4605      	mov	r5, r0
 800b93e:	bb02      	cbnz	r2, 800b982 <_dtoa_r+0xa7a>
 800b940:	4601      	mov	r1, r0
 800b942:	4650      	mov	r0, sl
 800b944:	f000 fc4e 	bl	800c1e4 <__mcmp>
 800b948:	4602      	mov	r2, r0
 800b94a:	4629      	mov	r1, r5
 800b94c:	4620      	mov	r0, r4
 800b94e:	9209      	str	r2, [sp, #36]	; 0x24
 800b950:	f000 fa0c 	bl	800bd6c <_Bfree>
 800b954:	9b07      	ldr	r3, [sp, #28]
 800b956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b958:	9d04      	ldr	r5, [sp, #16]
 800b95a:	ea43 0102 	orr.w	r1, r3, r2
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	4319      	orrs	r1, r3
 800b962:	d110      	bne.n	800b986 <_dtoa_r+0xa7e>
 800b964:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b968:	d029      	beq.n	800b9be <_dtoa_r+0xab6>
 800b96a:	9b05      	ldr	r3, [sp, #20]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd02      	ble.n	800b976 <_dtoa_r+0xa6e>
 800b970:	9b02      	ldr	r3, [sp, #8]
 800b972:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b976:	9b01      	ldr	r3, [sp, #4]
 800b978:	f883 9000 	strb.w	r9, [r3]
 800b97c:	e774      	b.n	800b868 <_dtoa_r+0x960>
 800b97e:	4638      	mov	r0, r7
 800b980:	e7ba      	b.n	800b8f8 <_dtoa_r+0x9f0>
 800b982:	2201      	movs	r2, #1
 800b984:	e7e1      	b.n	800b94a <_dtoa_r+0xa42>
 800b986:	9b05      	ldr	r3, [sp, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	db04      	blt.n	800b996 <_dtoa_r+0xa8e>
 800b98c:	9907      	ldr	r1, [sp, #28]
 800b98e:	430b      	orrs	r3, r1
 800b990:	9906      	ldr	r1, [sp, #24]
 800b992:	430b      	orrs	r3, r1
 800b994:	d120      	bne.n	800b9d8 <_dtoa_r+0xad0>
 800b996:	2a00      	cmp	r2, #0
 800b998:	dded      	ble.n	800b976 <_dtoa_r+0xa6e>
 800b99a:	4651      	mov	r1, sl
 800b99c:	2201      	movs	r2, #1
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fbb4 	bl	800c10c <__lshift>
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4682      	mov	sl, r0
 800b9a8:	f000 fc1c 	bl	800c1e4 <__mcmp>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	dc03      	bgt.n	800b9b8 <_dtoa_r+0xab0>
 800b9b0:	d1e1      	bne.n	800b976 <_dtoa_r+0xa6e>
 800b9b2:	f019 0f01 	tst.w	r9, #1
 800b9b6:	d0de      	beq.n	800b976 <_dtoa_r+0xa6e>
 800b9b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9bc:	d1d8      	bne.n	800b970 <_dtoa_r+0xa68>
 800b9be:	9a01      	ldr	r2, [sp, #4]
 800b9c0:	2339      	movs	r3, #57	; 0x39
 800b9c2:	7013      	strb	r3, [r2, #0]
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	461d      	mov	r5, r3
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9ce:	2a39      	cmp	r2, #57	; 0x39
 800b9d0:	d06c      	beq.n	800baac <_dtoa_r+0xba4>
 800b9d2:	3201      	adds	r2, #1
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	e747      	b.n	800b868 <_dtoa_r+0x960>
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	dd07      	ble.n	800b9ec <_dtoa_r+0xae4>
 800b9dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9e0:	d0ed      	beq.n	800b9be <_dtoa_r+0xab6>
 800b9e2:	9a01      	ldr	r2, [sp, #4]
 800b9e4:	f109 0301 	add.w	r3, r9, #1
 800b9e8:	7013      	strb	r3, [r2, #0]
 800b9ea:	e73d      	b.n	800b868 <_dtoa_r+0x960>
 800b9ec:	9b04      	ldr	r3, [sp, #16]
 800b9ee:	9a08      	ldr	r2, [sp, #32]
 800b9f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d043      	beq.n	800ba80 <_dtoa_r+0xb78>
 800b9f8:	4651      	mov	r1, sl
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	220a      	movs	r2, #10
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 f9d6 	bl	800bdb0 <__multadd>
 800ba04:	45b8      	cmp	r8, r7
 800ba06:	4682      	mov	sl, r0
 800ba08:	f04f 0300 	mov.w	r3, #0
 800ba0c:	f04f 020a 	mov.w	r2, #10
 800ba10:	4641      	mov	r1, r8
 800ba12:	4620      	mov	r0, r4
 800ba14:	d107      	bne.n	800ba26 <_dtoa_r+0xb1e>
 800ba16:	f000 f9cb 	bl	800bdb0 <__multadd>
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	3301      	adds	r3, #1
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	e775      	b.n	800b912 <_dtoa_r+0xa0a>
 800ba26:	f000 f9c3 	bl	800bdb0 <__multadd>
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	220a      	movs	r2, #10
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 f9bc 	bl	800bdb0 <__multadd>
 800ba38:	4607      	mov	r7, r0
 800ba3a:	e7f0      	b.n	800ba1e <_dtoa_r+0xb16>
 800ba3c:	9b04      	ldr	r3, [sp, #16]
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	9d00      	ldr	r5, [sp, #0]
 800ba42:	4631      	mov	r1, r6
 800ba44:	4650      	mov	r0, sl
 800ba46:	f7ff f9d5 	bl	800adf4 <quorem>
 800ba4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba4e:	9b00      	ldr	r3, [sp, #0]
 800ba50:	f805 9b01 	strb.w	r9, [r5], #1
 800ba54:	1aea      	subs	r2, r5, r3
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	dd07      	ble.n	800ba6c <_dtoa_r+0xb64>
 800ba5c:	4651      	mov	r1, sl
 800ba5e:	2300      	movs	r3, #0
 800ba60:	220a      	movs	r2, #10
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 f9a4 	bl	800bdb0 <__multadd>
 800ba68:	4682      	mov	sl, r0
 800ba6a:	e7ea      	b.n	800ba42 <_dtoa_r+0xb3a>
 800ba6c:	9b01      	ldr	r3, [sp, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfc8      	it	gt
 800ba72:	461d      	movgt	r5, r3
 800ba74:	9b00      	ldr	r3, [sp, #0]
 800ba76:	bfd8      	it	le
 800ba78:	2501      	movle	r5, #1
 800ba7a:	441d      	add	r5, r3
 800ba7c:	f04f 0800 	mov.w	r8, #0
 800ba80:	4651      	mov	r1, sl
 800ba82:	2201      	movs	r2, #1
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fb41 	bl	800c10c <__lshift>
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	f000 fba9 	bl	800c1e4 <__mcmp>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	dc96      	bgt.n	800b9c4 <_dtoa_r+0xabc>
 800ba96:	d102      	bne.n	800ba9e <_dtoa_r+0xb96>
 800ba98:	f019 0f01 	tst.w	r9, #1
 800ba9c:	d192      	bne.n	800b9c4 <_dtoa_r+0xabc>
 800ba9e:	462b      	mov	r3, r5
 800baa0:	461d      	mov	r5, r3
 800baa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baa6:	2a30      	cmp	r2, #48	; 0x30
 800baa8:	d0fa      	beq.n	800baa0 <_dtoa_r+0xb98>
 800baaa:	e6dd      	b.n	800b868 <_dtoa_r+0x960>
 800baac:	9a00      	ldr	r2, [sp, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d189      	bne.n	800b9c6 <_dtoa_r+0xabe>
 800bab2:	f10b 0b01 	add.w	fp, fp, #1
 800bab6:	2331      	movs	r3, #49	; 0x31
 800bab8:	e796      	b.n	800b9e8 <_dtoa_r+0xae0>
 800baba:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <_dtoa_r+0xbdc>)
 800babc:	f7ff ba99 	b.w	800aff2 <_dtoa_r+0xea>
 800bac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f47f aa6d 	bne.w	800afa2 <_dtoa_r+0x9a>
 800bac8:	4b07      	ldr	r3, [pc, #28]	; (800bae8 <_dtoa_r+0xbe0>)
 800baca:	f7ff ba92 	b.w	800aff2 <_dtoa_r+0xea>
 800bace:	9b01      	ldr	r3, [sp, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dcb5      	bgt.n	800ba40 <_dtoa_r+0xb38>
 800bad4:	9b07      	ldr	r3, [sp, #28]
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	f73f aeb1 	bgt.w	800b83e <_dtoa_r+0x936>
 800badc:	e7b0      	b.n	800ba40 <_dtoa_r+0xb38>
 800bade:	bf00      	nop
 800bae0:	0800d21b 	.word	0x0800d21b
 800bae4:	0800d0e5 	.word	0x0800d0e5
 800bae8:	0800d1b6 	.word	0x0800d1b6

0800baec <_free_r>:
 800baec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baee:	2900      	cmp	r1, #0
 800baf0:	d044      	beq.n	800bb7c <_free_r+0x90>
 800baf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf6:	9001      	str	r0, [sp, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f1a1 0404 	sub.w	r4, r1, #4
 800bafe:	bfb8      	it	lt
 800bb00:	18e4      	addlt	r4, r4, r3
 800bb02:	f000 f8e7 	bl	800bcd4 <__malloc_lock>
 800bb06:	4a1e      	ldr	r2, [pc, #120]	; (800bb80 <_free_r+0x94>)
 800bb08:	9801      	ldr	r0, [sp, #4]
 800bb0a:	6813      	ldr	r3, [r2, #0]
 800bb0c:	b933      	cbnz	r3, 800bb1c <_free_r+0x30>
 800bb0e:	6063      	str	r3, [r4, #4]
 800bb10:	6014      	str	r4, [r2, #0]
 800bb12:	b003      	add	sp, #12
 800bb14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb18:	f000 b8e2 	b.w	800bce0 <__malloc_unlock>
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	d908      	bls.n	800bb32 <_free_r+0x46>
 800bb20:	6825      	ldr	r5, [r4, #0]
 800bb22:	1961      	adds	r1, r4, r5
 800bb24:	428b      	cmp	r3, r1
 800bb26:	bf01      	itttt	eq
 800bb28:	6819      	ldreq	r1, [r3, #0]
 800bb2a:	685b      	ldreq	r3, [r3, #4]
 800bb2c:	1949      	addeq	r1, r1, r5
 800bb2e:	6021      	streq	r1, [r4, #0]
 800bb30:	e7ed      	b.n	800bb0e <_free_r+0x22>
 800bb32:	461a      	mov	r2, r3
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	b10b      	cbz	r3, 800bb3c <_free_r+0x50>
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	d9fa      	bls.n	800bb32 <_free_r+0x46>
 800bb3c:	6811      	ldr	r1, [r2, #0]
 800bb3e:	1855      	adds	r5, r2, r1
 800bb40:	42a5      	cmp	r5, r4
 800bb42:	d10b      	bne.n	800bb5c <_free_r+0x70>
 800bb44:	6824      	ldr	r4, [r4, #0]
 800bb46:	4421      	add	r1, r4
 800bb48:	1854      	adds	r4, r2, r1
 800bb4a:	42a3      	cmp	r3, r4
 800bb4c:	6011      	str	r1, [r2, #0]
 800bb4e:	d1e0      	bne.n	800bb12 <_free_r+0x26>
 800bb50:	681c      	ldr	r4, [r3, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	6053      	str	r3, [r2, #4]
 800bb56:	440c      	add	r4, r1
 800bb58:	6014      	str	r4, [r2, #0]
 800bb5a:	e7da      	b.n	800bb12 <_free_r+0x26>
 800bb5c:	d902      	bls.n	800bb64 <_free_r+0x78>
 800bb5e:	230c      	movs	r3, #12
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	e7d6      	b.n	800bb12 <_free_r+0x26>
 800bb64:	6825      	ldr	r5, [r4, #0]
 800bb66:	1961      	adds	r1, r4, r5
 800bb68:	428b      	cmp	r3, r1
 800bb6a:	bf04      	itt	eq
 800bb6c:	6819      	ldreq	r1, [r3, #0]
 800bb6e:	685b      	ldreq	r3, [r3, #4]
 800bb70:	6063      	str	r3, [r4, #4]
 800bb72:	bf04      	itt	eq
 800bb74:	1949      	addeq	r1, r1, r5
 800bb76:	6021      	streq	r1, [r4, #0]
 800bb78:	6054      	str	r4, [r2, #4]
 800bb7a:	e7ca      	b.n	800bb12 <_free_r+0x26>
 800bb7c:	b003      	add	sp, #12
 800bb7e:	bd30      	pop	{r4, r5, pc}
 800bb80:	200009dc 	.word	0x200009dc

0800bb84 <malloc>:
 800bb84:	4b02      	ldr	r3, [pc, #8]	; (800bb90 <malloc+0xc>)
 800bb86:	4601      	mov	r1, r0
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	f000 b823 	b.w	800bbd4 <_malloc_r>
 800bb8e:	bf00      	nop
 800bb90:	20000128 	.word	0x20000128

0800bb94 <sbrk_aligned>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	4e0e      	ldr	r6, [pc, #56]	; (800bbd0 <sbrk_aligned+0x3c>)
 800bb98:	460c      	mov	r4, r1
 800bb9a:	6831      	ldr	r1, [r6, #0]
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	b911      	cbnz	r1, 800bba6 <sbrk_aligned+0x12>
 800bba0:	f001 f82c 	bl	800cbfc <_sbrk_r>
 800bba4:	6030      	str	r0, [r6, #0]
 800bba6:	4621      	mov	r1, r4
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f001 f827 	bl	800cbfc <_sbrk_r>
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	d00a      	beq.n	800bbc8 <sbrk_aligned+0x34>
 800bbb2:	1cc4      	adds	r4, r0, #3
 800bbb4:	f024 0403 	bic.w	r4, r4, #3
 800bbb8:	42a0      	cmp	r0, r4
 800bbba:	d007      	beq.n	800bbcc <sbrk_aligned+0x38>
 800bbbc:	1a21      	subs	r1, r4, r0
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f001 f81c 	bl	800cbfc <_sbrk_r>
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d101      	bne.n	800bbcc <sbrk_aligned+0x38>
 800bbc8:	f04f 34ff 	mov.w	r4, #4294967295
 800bbcc:	4620      	mov	r0, r4
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	200009e0 	.word	0x200009e0

0800bbd4 <_malloc_r>:
 800bbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd8:	1ccd      	adds	r5, r1, #3
 800bbda:	f025 0503 	bic.w	r5, r5, #3
 800bbde:	3508      	adds	r5, #8
 800bbe0:	2d0c      	cmp	r5, #12
 800bbe2:	bf38      	it	cc
 800bbe4:	250c      	movcc	r5, #12
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	4607      	mov	r7, r0
 800bbea:	db01      	blt.n	800bbf0 <_malloc_r+0x1c>
 800bbec:	42a9      	cmp	r1, r5
 800bbee:	d905      	bls.n	800bbfc <_malloc_r+0x28>
 800bbf0:	230c      	movs	r3, #12
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bcd0 <_malloc_r+0xfc>
 800bc00:	f000 f868 	bl	800bcd4 <__malloc_lock>
 800bc04:	f8d8 3000 	ldr.w	r3, [r8]
 800bc08:	461c      	mov	r4, r3
 800bc0a:	bb5c      	cbnz	r4, 800bc64 <_malloc_r+0x90>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f7ff ffc0 	bl	800bb94 <sbrk_aligned>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	4604      	mov	r4, r0
 800bc18:	d155      	bne.n	800bcc6 <_malloc_r+0xf2>
 800bc1a:	f8d8 4000 	ldr.w	r4, [r8]
 800bc1e:	4626      	mov	r6, r4
 800bc20:	2e00      	cmp	r6, #0
 800bc22:	d145      	bne.n	800bcb0 <_malloc_r+0xdc>
 800bc24:	2c00      	cmp	r4, #0
 800bc26:	d048      	beq.n	800bcba <_malloc_r+0xe6>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	eb04 0903 	add.w	r9, r4, r3
 800bc32:	f000 ffe3 	bl	800cbfc <_sbrk_r>
 800bc36:	4581      	cmp	r9, r0
 800bc38:	d13f      	bne.n	800bcba <_malloc_r+0xe6>
 800bc3a:	6821      	ldr	r1, [r4, #0]
 800bc3c:	1a6d      	subs	r5, r5, r1
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4638      	mov	r0, r7
 800bc42:	f7ff ffa7 	bl	800bb94 <sbrk_aligned>
 800bc46:	3001      	adds	r0, #1
 800bc48:	d037      	beq.n	800bcba <_malloc_r+0xe6>
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	442b      	add	r3, r5
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	f8d8 3000 	ldr.w	r3, [r8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d038      	beq.n	800bcca <_malloc_r+0xf6>
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	42a2      	cmp	r2, r4
 800bc5c:	d12b      	bne.n	800bcb6 <_malloc_r+0xe2>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	605a      	str	r2, [r3, #4]
 800bc62:	e00f      	b.n	800bc84 <_malloc_r+0xb0>
 800bc64:	6822      	ldr	r2, [r4, #0]
 800bc66:	1b52      	subs	r2, r2, r5
 800bc68:	d41f      	bmi.n	800bcaa <_malloc_r+0xd6>
 800bc6a:	2a0b      	cmp	r2, #11
 800bc6c:	d917      	bls.n	800bc9e <_malloc_r+0xca>
 800bc6e:	1961      	adds	r1, r4, r5
 800bc70:	42a3      	cmp	r3, r4
 800bc72:	6025      	str	r5, [r4, #0]
 800bc74:	bf18      	it	ne
 800bc76:	6059      	strne	r1, [r3, #4]
 800bc78:	6863      	ldr	r3, [r4, #4]
 800bc7a:	bf08      	it	eq
 800bc7c:	f8c8 1000 	streq.w	r1, [r8]
 800bc80:	5162      	str	r2, [r4, r5]
 800bc82:	604b      	str	r3, [r1, #4]
 800bc84:	4638      	mov	r0, r7
 800bc86:	f104 060b 	add.w	r6, r4, #11
 800bc8a:	f000 f829 	bl	800bce0 <__malloc_unlock>
 800bc8e:	f026 0607 	bic.w	r6, r6, #7
 800bc92:	1d23      	adds	r3, r4, #4
 800bc94:	1af2      	subs	r2, r6, r3
 800bc96:	d0ae      	beq.n	800bbf6 <_malloc_r+0x22>
 800bc98:	1b9b      	subs	r3, r3, r6
 800bc9a:	50a3      	str	r3, [r4, r2]
 800bc9c:	e7ab      	b.n	800bbf6 <_malloc_r+0x22>
 800bc9e:	42a3      	cmp	r3, r4
 800bca0:	6862      	ldr	r2, [r4, #4]
 800bca2:	d1dd      	bne.n	800bc60 <_malloc_r+0x8c>
 800bca4:	f8c8 2000 	str.w	r2, [r8]
 800bca8:	e7ec      	b.n	800bc84 <_malloc_r+0xb0>
 800bcaa:	4623      	mov	r3, r4
 800bcac:	6864      	ldr	r4, [r4, #4]
 800bcae:	e7ac      	b.n	800bc0a <_malloc_r+0x36>
 800bcb0:	4634      	mov	r4, r6
 800bcb2:	6876      	ldr	r6, [r6, #4]
 800bcb4:	e7b4      	b.n	800bc20 <_malloc_r+0x4c>
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	e7cc      	b.n	800bc54 <_malloc_r+0x80>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	603b      	str	r3, [r7, #0]
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f000 f80e 	bl	800bce0 <__malloc_unlock>
 800bcc4:	e797      	b.n	800bbf6 <_malloc_r+0x22>
 800bcc6:	6025      	str	r5, [r4, #0]
 800bcc8:	e7dc      	b.n	800bc84 <_malloc_r+0xb0>
 800bcca:	605b      	str	r3, [r3, #4]
 800bccc:	deff      	udf	#255	; 0xff
 800bcce:	bf00      	nop
 800bcd0:	200009dc 	.word	0x200009dc

0800bcd4 <__malloc_lock>:
 800bcd4:	4801      	ldr	r0, [pc, #4]	; (800bcdc <__malloc_lock+0x8>)
 800bcd6:	f7ff b86c 	b.w	800adb2 <__retarget_lock_acquire_recursive>
 800bcda:	bf00      	nop
 800bcdc:	200009d8 	.word	0x200009d8

0800bce0 <__malloc_unlock>:
 800bce0:	4801      	ldr	r0, [pc, #4]	; (800bce8 <__malloc_unlock+0x8>)
 800bce2:	f7ff b867 	b.w	800adb4 <__retarget_lock_release_recursive>
 800bce6:	bf00      	nop
 800bce8:	200009d8 	.word	0x200009d8

0800bcec <_Balloc>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	69c6      	ldr	r6, [r0, #28]
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	b976      	cbnz	r6, 800bd14 <_Balloc+0x28>
 800bcf6:	2010      	movs	r0, #16
 800bcf8:	f7ff ff44 	bl	800bb84 <malloc>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	61e0      	str	r0, [r4, #28]
 800bd00:	b920      	cbnz	r0, 800bd0c <_Balloc+0x20>
 800bd02:	4b18      	ldr	r3, [pc, #96]	; (800bd64 <_Balloc+0x78>)
 800bd04:	4818      	ldr	r0, [pc, #96]	; (800bd68 <_Balloc+0x7c>)
 800bd06:	216b      	movs	r1, #107	; 0x6b
 800bd08:	f7ff f856 	bl	800adb8 <__assert_func>
 800bd0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd10:	6006      	str	r6, [r0, #0]
 800bd12:	60c6      	str	r6, [r0, #12]
 800bd14:	69e6      	ldr	r6, [r4, #28]
 800bd16:	68f3      	ldr	r3, [r6, #12]
 800bd18:	b183      	cbz	r3, 800bd3c <_Balloc+0x50>
 800bd1a:	69e3      	ldr	r3, [r4, #28]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd22:	b9b8      	cbnz	r0, 800bd54 <_Balloc+0x68>
 800bd24:	2101      	movs	r1, #1
 800bd26:	fa01 f605 	lsl.w	r6, r1, r5
 800bd2a:	1d72      	adds	r2, r6, #5
 800bd2c:	0092      	lsls	r2, r2, #2
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 ff89 	bl	800cc46 <_calloc_r>
 800bd34:	b160      	cbz	r0, 800bd50 <_Balloc+0x64>
 800bd36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd3a:	e00e      	b.n	800bd5a <_Balloc+0x6e>
 800bd3c:	2221      	movs	r2, #33	; 0x21
 800bd3e:	2104      	movs	r1, #4
 800bd40:	4620      	mov	r0, r4
 800bd42:	f000 ff80 	bl	800cc46 <_calloc_r>
 800bd46:	69e3      	ldr	r3, [r4, #28]
 800bd48:	60f0      	str	r0, [r6, #12]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1e4      	bne.n	800bd1a <_Balloc+0x2e>
 800bd50:	2000      	movs	r0, #0
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	6802      	ldr	r2, [r0, #0]
 800bd56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd60:	e7f7      	b.n	800bd52 <_Balloc+0x66>
 800bd62:	bf00      	nop
 800bd64:	0800d109 	.word	0x0800d109
 800bd68:	0800d22c 	.word	0x0800d22c

0800bd6c <_Bfree>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	69c6      	ldr	r6, [r0, #28]
 800bd70:	4605      	mov	r5, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	b976      	cbnz	r6, 800bd94 <_Bfree+0x28>
 800bd76:	2010      	movs	r0, #16
 800bd78:	f7ff ff04 	bl	800bb84 <malloc>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	61e8      	str	r0, [r5, #28]
 800bd80:	b920      	cbnz	r0, 800bd8c <_Bfree+0x20>
 800bd82:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <_Bfree+0x3c>)
 800bd84:	4809      	ldr	r0, [pc, #36]	; (800bdac <_Bfree+0x40>)
 800bd86:	218f      	movs	r1, #143	; 0x8f
 800bd88:	f7ff f816 	bl	800adb8 <__assert_func>
 800bd8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd90:	6006      	str	r6, [r0, #0]
 800bd92:	60c6      	str	r6, [r0, #12]
 800bd94:	b13c      	cbz	r4, 800bda6 <_Bfree+0x3a>
 800bd96:	69eb      	ldr	r3, [r5, #28]
 800bd98:	6862      	ldr	r2, [r4, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bda0:	6021      	str	r1, [r4, #0]
 800bda2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bda6:	bd70      	pop	{r4, r5, r6, pc}
 800bda8:	0800d109 	.word	0x0800d109
 800bdac:	0800d22c 	.word	0x0800d22c

0800bdb0 <__multadd>:
 800bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb4:	690d      	ldr	r5, [r1, #16]
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	460c      	mov	r4, r1
 800bdba:	461e      	mov	r6, r3
 800bdbc:	f101 0c14 	add.w	ip, r1, #20
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f8dc 3000 	ldr.w	r3, [ip]
 800bdc6:	b299      	uxth	r1, r3
 800bdc8:	fb02 6101 	mla	r1, r2, r1, r6
 800bdcc:	0c1e      	lsrs	r6, r3, #16
 800bdce:	0c0b      	lsrs	r3, r1, #16
 800bdd0:	fb02 3306 	mla	r3, r2, r6, r3
 800bdd4:	b289      	uxth	r1, r1
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bddc:	4285      	cmp	r5, r0
 800bdde:	f84c 1b04 	str.w	r1, [ip], #4
 800bde2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bde6:	dcec      	bgt.n	800bdc2 <__multadd+0x12>
 800bde8:	b30e      	cbz	r6, 800be2e <__multadd+0x7e>
 800bdea:	68a3      	ldr	r3, [r4, #8]
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dc19      	bgt.n	800be24 <__multadd+0x74>
 800bdf0:	6861      	ldr	r1, [r4, #4]
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	3101      	adds	r1, #1
 800bdf6:	f7ff ff79 	bl	800bcec <_Balloc>
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	b928      	cbnz	r0, 800be0a <__multadd+0x5a>
 800bdfe:	4602      	mov	r2, r0
 800be00:	4b0c      	ldr	r3, [pc, #48]	; (800be34 <__multadd+0x84>)
 800be02:	480d      	ldr	r0, [pc, #52]	; (800be38 <__multadd+0x88>)
 800be04:	21ba      	movs	r1, #186	; 0xba
 800be06:	f7fe ffd7 	bl	800adb8 <__assert_func>
 800be0a:	6922      	ldr	r2, [r4, #16]
 800be0c:	3202      	adds	r2, #2
 800be0e:	f104 010c 	add.w	r1, r4, #12
 800be12:	0092      	lsls	r2, r2, #2
 800be14:	300c      	adds	r0, #12
 800be16:	f000 ff01 	bl	800cc1c <memcpy>
 800be1a:	4621      	mov	r1, r4
 800be1c:	4638      	mov	r0, r7
 800be1e:	f7ff ffa5 	bl	800bd6c <_Bfree>
 800be22:	4644      	mov	r4, r8
 800be24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be28:	3501      	adds	r5, #1
 800be2a:	615e      	str	r6, [r3, #20]
 800be2c:	6125      	str	r5, [r4, #16]
 800be2e:	4620      	mov	r0, r4
 800be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be34:	0800d21b 	.word	0x0800d21b
 800be38:	0800d22c 	.word	0x0800d22c

0800be3c <__hi0bits>:
 800be3c:	0c03      	lsrs	r3, r0, #16
 800be3e:	041b      	lsls	r3, r3, #16
 800be40:	b9d3      	cbnz	r3, 800be78 <__hi0bits+0x3c>
 800be42:	0400      	lsls	r0, r0, #16
 800be44:	2310      	movs	r3, #16
 800be46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be4a:	bf04      	itt	eq
 800be4c:	0200      	lsleq	r0, r0, #8
 800be4e:	3308      	addeq	r3, #8
 800be50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be54:	bf04      	itt	eq
 800be56:	0100      	lsleq	r0, r0, #4
 800be58:	3304      	addeq	r3, #4
 800be5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be5e:	bf04      	itt	eq
 800be60:	0080      	lsleq	r0, r0, #2
 800be62:	3302      	addeq	r3, #2
 800be64:	2800      	cmp	r0, #0
 800be66:	db05      	blt.n	800be74 <__hi0bits+0x38>
 800be68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be6c:	f103 0301 	add.w	r3, r3, #1
 800be70:	bf08      	it	eq
 800be72:	2320      	moveq	r3, #32
 800be74:	4618      	mov	r0, r3
 800be76:	4770      	bx	lr
 800be78:	2300      	movs	r3, #0
 800be7a:	e7e4      	b.n	800be46 <__hi0bits+0xa>

0800be7c <__lo0bits>:
 800be7c:	6803      	ldr	r3, [r0, #0]
 800be7e:	f013 0207 	ands.w	r2, r3, #7
 800be82:	d00c      	beq.n	800be9e <__lo0bits+0x22>
 800be84:	07d9      	lsls	r1, r3, #31
 800be86:	d422      	bmi.n	800bece <__lo0bits+0x52>
 800be88:	079a      	lsls	r2, r3, #30
 800be8a:	bf49      	itett	mi
 800be8c:	085b      	lsrmi	r3, r3, #1
 800be8e:	089b      	lsrpl	r3, r3, #2
 800be90:	6003      	strmi	r3, [r0, #0]
 800be92:	2201      	movmi	r2, #1
 800be94:	bf5c      	itt	pl
 800be96:	6003      	strpl	r3, [r0, #0]
 800be98:	2202      	movpl	r2, #2
 800be9a:	4610      	mov	r0, r2
 800be9c:	4770      	bx	lr
 800be9e:	b299      	uxth	r1, r3
 800bea0:	b909      	cbnz	r1, 800bea6 <__lo0bits+0x2a>
 800bea2:	0c1b      	lsrs	r3, r3, #16
 800bea4:	2210      	movs	r2, #16
 800bea6:	b2d9      	uxtb	r1, r3
 800bea8:	b909      	cbnz	r1, 800beae <__lo0bits+0x32>
 800beaa:	3208      	adds	r2, #8
 800beac:	0a1b      	lsrs	r3, r3, #8
 800beae:	0719      	lsls	r1, r3, #28
 800beb0:	bf04      	itt	eq
 800beb2:	091b      	lsreq	r3, r3, #4
 800beb4:	3204      	addeq	r2, #4
 800beb6:	0799      	lsls	r1, r3, #30
 800beb8:	bf04      	itt	eq
 800beba:	089b      	lsreq	r3, r3, #2
 800bebc:	3202      	addeq	r2, #2
 800bebe:	07d9      	lsls	r1, r3, #31
 800bec0:	d403      	bmi.n	800beca <__lo0bits+0x4e>
 800bec2:	085b      	lsrs	r3, r3, #1
 800bec4:	f102 0201 	add.w	r2, r2, #1
 800bec8:	d003      	beq.n	800bed2 <__lo0bits+0x56>
 800beca:	6003      	str	r3, [r0, #0]
 800becc:	e7e5      	b.n	800be9a <__lo0bits+0x1e>
 800bece:	2200      	movs	r2, #0
 800bed0:	e7e3      	b.n	800be9a <__lo0bits+0x1e>
 800bed2:	2220      	movs	r2, #32
 800bed4:	e7e1      	b.n	800be9a <__lo0bits+0x1e>
	...

0800bed8 <__i2b>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	460c      	mov	r4, r1
 800bedc:	2101      	movs	r1, #1
 800bede:	f7ff ff05 	bl	800bcec <_Balloc>
 800bee2:	4602      	mov	r2, r0
 800bee4:	b928      	cbnz	r0, 800bef2 <__i2b+0x1a>
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <__i2b+0x24>)
 800bee8:	4805      	ldr	r0, [pc, #20]	; (800bf00 <__i2b+0x28>)
 800beea:	f240 1145 	movw	r1, #325	; 0x145
 800beee:	f7fe ff63 	bl	800adb8 <__assert_func>
 800bef2:	2301      	movs	r3, #1
 800bef4:	6144      	str	r4, [r0, #20]
 800bef6:	6103      	str	r3, [r0, #16]
 800bef8:	bd10      	pop	{r4, pc}
 800befa:	bf00      	nop
 800befc:	0800d21b 	.word	0x0800d21b
 800bf00:	0800d22c 	.word	0x0800d22c

0800bf04 <__multiply>:
 800bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	4691      	mov	r9, r2
 800bf0a:	690a      	ldr	r2, [r1, #16]
 800bf0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	bfb8      	it	lt
 800bf14:	460b      	movlt	r3, r1
 800bf16:	460c      	mov	r4, r1
 800bf18:	bfbc      	itt	lt
 800bf1a:	464c      	movlt	r4, r9
 800bf1c:	4699      	movlt	r9, r3
 800bf1e:	6927      	ldr	r7, [r4, #16]
 800bf20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	6861      	ldr	r1, [r4, #4]
 800bf28:	eb07 060a 	add.w	r6, r7, sl
 800bf2c:	42b3      	cmp	r3, r6
 800bf2e:	b085      	sub	sp, #20
 800bf30:	bfb8      	it	lt
 800bf32:	3101      	addlt	r1, #1
 800bf34:	f7ff feda 	bl	800bcec <_Balloc>
 800bf38:	b930      	cbnz	r0, 800bf48 <__multiply+0x44>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	4b44      	ldr	r3, [pc, #272]	; (800c050 <__multiply+0x14c>)
 800bf3e:	4845      	ldr	r0, [pc, #276]	; (800c054 <__multiply+0x150>)
 800bf40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bf44:	f7fe ff38 	bl	800adb8 <__assert_func>
 800bf48:	f100 0514 	add.w	r5, r0, #20
 800bf4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf50:	462b      	mov	r3, r5
 800bf52:	2200      	movs	r2, #0
 800bf54:	4543      	cmp	r3, r8
 800bf56:	d321      	bcc.n	800bf9c <__multiply+0x98>
 800bf58:	f104 0314 	add.w	r3, r4, #20
 800bf5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf60:	f109 0314 	add.w	r3, r9, #20
 800bf64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf68:	9202      	str	r2, [sp, #8]
 800bf6a:	1b3a      	subs	r2, r7, r4
 800bf6c:	3a15      	subs	r2, #21
 800bf6e:	f022 0203 	bic.w	r2, r2, #3
 800bf72:	3204      	adds	r2, #4
 800bf74:	f104 0115 	add.w	r1, r4, #21
 800bf78:	428f      	cmp	r7, r1
 800bf7a:	bf38      	it	cc
 800bf7c:	2204      	movcc	r2, #4
 800bf7e:	9201      	str	r2, [sp, #4]
 800bf80:	9a02      	ldr	r2, [sp, #8]
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d80c      	bhi.n	800bfa2 <__multiply+0x9e>
 800bf88:	2e00      	cmp	r6, #0
 800bf8a:	dd03      	ble.n	800bf94 <__multiply+0x90>
 800bf8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d05b      	beq.n	800c04c <__multiply+0x148>
 800bf94:	6106      	str	r6, [r0, #16]
 800bf96:	b005      	add	sp, #20
 800bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9c:	f843 2b04 	str.w	r2, [r3], #4
 800bfa0:	e7d8      	b.n	800bf54 <__multiply+0x50>
 800bfa2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bfa6:	f1ba 0f00 	cmp.w	sl, #0
 800bfaa:	d024      	beq.n	800bff6 <__multiply+0xf2>
 800bfac:	f104 0e14 	add.w	lr, r4, #20
 800bfb0:	46a9      	mov	r9, r5
 800bfb2:	f04f 0c00 	mov.w	ip, #0
 800bfb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfba:	f8d9 1000 	ldr.w	r1, [r9]
 800bfbe:	fa1f fb82 	uxth.w	fp, r2
 800bfc2:	b289      	uxth	r1, r1
 800bfc4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bfcc:	f8d9 2000 	ldr.w	r2, [r9]
 800bfd0:	4461      	add	r1, ip
 800bfd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfd6:	fb0a c20b 	mla	r2, sl, fp, ip
 800bfda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfde:	b289      	uxth	r1, r1
 800bfe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfe4:	4577      	cmp	r7, lr
 800bfe6:	f849 1b04 	str.w	r1, [r9], #4
 800bfea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfee:	d8e2      	bhi.n	800bfb6 <__multiply+0xb2>
 800bff0:	9a01      	ldr	r2, [sp, #4]
 800bff2:	f845 c002 	str.w	ip, [r5, r2]
 800bff6:	9a03      	ldr	r2, [sp, #12]
 800bff8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bffc:	3304      	adds	r3, #4
 800bffe:	f1b9 0f00 	cmp.w	r9, #0
 800c002:	d021      	beq.n	800c048 <__multiply+0x144>
 800c004:	6829      	ldr	r1, [r5, #0]
 800c006:	f104 0c14 	add.w	ip, r4, #20
 800c00a:	46ae      	mov	lr, r5
 800c00c:	f04f 0a00 	mov.w	sl, #0
 800c010:	f8bc b000 	ldrh.w	fp, [ip]
 800c014:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c018:	fb09 220b 	mla	r2, r9, fp, r2
 800c01c:	4452      	add	r2, sl
 800c01e:	b289      	uxth	r1, r1
 800c020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c024:	f84e 1b04 	str.w	r1, [lr], #4
 800c028:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c02c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c030:	f8be 1000 	ldrh.w	r1, [lr]
 800c034:	fb09 110a 	mla	r1, r9, sl, r1
 800c038:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c03c:	4567      	cmp	r7, ip
 800c03e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c042:	d8e5      	bhi.n	800c010 <__multiply+0x10c>
 800c044:	9a01      	ldr	r2, [sp, #4]
 800c046:	50a9      	str	r1, [r5, r2]
 800c048:	3504      	adds	r5, #4
 800c04a:	e799      	b.n	800bf80 <__multiply+0x7c>
 800c04c:	3e01      	subs	r6, #1
 800c04e:	e79b      	b.n	800bf88 <__multiply+0x84>
 800c050:	0800d21b 	.word	0x0800d21b
 800c054:	0800d22c 	.word	0x0800d22c

0800c058 <__pow5mult>:
 800c058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c05c:	4615      	mov	r5, r2
 800c05e:	f012 0203 	ands.w	r2, r2, #3
 800c062:	4606      	mov	r6, r0
 800c064:	460f      	mov	r7, r1
 800c066:	d007      	beq.n	800c078 <__pow5mult+0x20>
 800c068:	4c25      	ldr	r4, [pc, #148]	; (800c100 <__pow5mult+0xa8>)
 800c06a:	3a01      	subs	r2, #1
 800c06c:	2300      	movs	r3, #0
 800c06e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c072:	f7ff fe9d 	bl	800bdb0 <__multadd>
 800c076:	4607      	mov	r7, r0
 800c078:	10ad      	asrs	r5, r5, #2
 800c07a:	d03d      	beq.n	800c0f8 <__pow5mult+0xa0>
 800c07c:	69f4      	ldr	r4, [r6, #28]
 800c07e:	b97c      	cbnz	r4, 800c0a0 <__pow5mult+0x48>
 800c080:	2010      	movs	r0, #16
 800c082:	f7ff fd7f 	bl	800bb84 <malloc>
 800c086:	4602      	mov	r2, r0
 800c088:	61f0      	str	r0, [r6, #28]
 800c08a:	b928      	cbnz	r0, 800c098 <__pow5mult+0x40>
 800c08c:	4b1d      	ldr	r3, [pc, #116]	; (800c104 <__pow5mult+0xac>)
 800c08e:	481e      	ldr	r0, [pc, #120]	; (800c108 <__pow5mult+0xb0>)
 800c090:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c094:	f7fe fe90 	bl	800adb8 <__assert_func>
 800c098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c09c:	6004      	str	r4, [r0, #0]
 800c09e:	60c4      	str	r4, [r0, #12]
 800c0a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c0a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0a8:	b94c      	cbnz	r4, 800c0be <__pow5mult+0x66>
 800c0aa:	f240 2171 	movw	r1, #625	; 0x271
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7ff ff12 	bl	800bed8 <__i2b>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	6003      	str	r3, [r0, #0]
 800c0be:	f04f 0900 	mov.w	r9, #0
 800c0c2:	07eb      	lsls	r3, r5, #31
 800c0c4:	d50a      	bpl.n	800c0dc <__pow5mult+0x84>
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f7ff ff1a 	bl	800bf04 <__multiply>
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7ff fe49 	bl	800bd6c <_Bfree>
 800c0da:	4647      	mov	r7, r8
 800c0dc:	106d      	asrs	r5, r5, #1
 800c0de:	d00b      	beq.n	800c0f8 <__pow5mult+0xa0>
 800c0e0:	6820      	ldr	r0, [r4, #0]
 800c0e2:	b938      	cbnz	r0, 800c0f4 <__pow5mult+0x9c>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7ff ff0b 	bl	800bf04 <__multiply>
 800c0ee:	6020      	str	r0, [r4, #0]
 800c0f0:	f8c0 9000 	str.w	r9, [r0]
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	e7e4      	b.n	800c0c2 <__pow5mult+0x6a>
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0fe:	bf00      	nop
 800c100:	0800d378 	.word	0x0800d378
 800c104:	0800d109 	.word	0x0800d109
 800c108:	0800d22c 	.word	0x0800d22c

0800c10c <__lshift>:
 800c10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c110:	460c      	mov	r4, r1
 800c112:	6849      	ldr	r1, [r1, #4]
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c11a:	68a3      	ldr	r3, [r4, #8]
 800c11c:	4607      	mov	r7, r0
 800c11e:	4691      	mov	r9, r2
 800c120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c124:	f108 0601 	add.w	r6, r8, #1
 800c128:	42b3      	cmp	r3, r6
 800c12a:	db0b      	blt.n	800c144 <__lshift+0x38>
 800c12c:	4638      	mov	r0, r7
 800c12e:	f7ff fddd 	bl	800bcec <_Balloc>
 800c132:	4605      	mov	r5, r0
 800c134:	b948      	cbnz	r0, 800c14a <__lshift+0x3e>
 800c136:	4602      	mov	r2, r0
 800c138:	4b28      	ldr	r3, [pc, #160]	; (800c1dc <__lshift+0xd0>)
 800c13a:	4829      	ldr	r0, [pc, #164]	; (800c1e0 <__lshift+0xd4>)
 800c13c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c140:	f7fe fe3a 	bl	800adb8 <__assert_func>
 800c144:	3101      	adds	r1, #1
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	e7ee      	b.n	800c128 <__lshift+0x1c>
 800c14a:	2300      	movs	r3, #0
 800c14c:	f100 0114 	add.w	r1, r0, #20
 800c150:	f100 0210 	add.w	r2, r0, #16
 800c154:	4618      	mov	r0, r3
 800c156:	4553      	cmp	r3, sl
 800c158:	db33      	blt.n	800c1c2 <__lshift+0xb6>
 800c15a:	6920      	ldr	r0, [r4, #16]
 800c15c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c160:	f104 0314 	add.w	r3, r4, #20
 800c164:	f019 091f 	ands.w	r9, r9, #31
 800c168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c16c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c170:	d02b      	beq.n	800c1ca <__lshift+0xbe>
 800c172:	f1c9 0e20 	rsb	lr, r9, #32
 800c176:	468a      	mov	sl, r1
 800c178:	2200      	movs	r2, #0
 800c17a:	6818      	ldr	r0, [r3, #0]
 800c17c:	fa00 f009 	lsl.w	r0, r0, r9
 800c180:	4310      	orrs	r0, r2
 800c182:	f84a 0b04 	str.w	r0, [sl], #4
 800c186:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18a:	459c      	cmp	ip, r3
 800c18c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c190:	d8f3      	bhi.n	800c17a <__lshift+0x6e>
 800c192:	ebac 0304 	sub.w	r3, ip, r4
 800c196:	3b15      	subs	r3, #21
 800c198:	f023 0303 	bic.w	r3, r3, #3
 800c19c:	3304      	adds	r3, #4
 800c19e:	f104 0015 	add.w	r0, r4, #21
 800c1a2:	4584      	cmp	ip, r0
 800c1a4:	bf38      	it	cc
 800c1a6:	2304      	movcc	r3, #4
 800c1a8:	50ca      	str	r2, [r1, r3]
 800c1aa:	b10a      	cbz	r2, 800c1b0 <__lshift+0xa4>
 800c1ac:	f108 0602 	add.w	r6, r8, #2
 800c1b0:	3e01      	subs	r6, #1
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	612e      	str	r6, [r5, #16]
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	f7ff fdd8 	bl	800bd6c <_Bfree>
 800c1bc:	4628      	mov	r0, r5
 800c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	e7c5      	b.n	800c156 <__lshift+0x4a>
 800c1ca:	3904      	subs	r1, #4
 800c1cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1d4:	459c      	cmp	ip, r3
 800c1d6:	d8f9      	bhi.n	800c1cc <__lshift+0xc0>
 800c1d8:	e7ea      	b.n	800c1b0 <__lshift+0xa4>
 800c1da:	bf00      	nop
 800c1dc:	0800d21b 	.word	0x0800d21b
 800c1e0:	0800d22c 	.word	0x0800d22c

0800c1e4 <__mcmp>:
 800c1e4:	b530      	push	{r4, r5, lr}
 800c1e6:	6902      	ldr	r2, [r0, #16]
 800c1e8:	690c      	ldr	r4, [r1, #16]
 800c1ea:	1b12      	subs	r2, r2, r4
 800c1ec:	d10e      	bne.n	800c20c <__mcmp+0x28>
 800c1ee:	f100 0314 	add.w	r3, r0, #20
 800c1f2:	3114      	adds	r1, #20
 800c1f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c204:	42a5      	cmp	r5, r4
 800c206:	d003      	beq.n	800c210 <__mcmp+0x2c>
 800c208:	d305      	bcc.n	800c216 <__mcmp+0x32>
 800c20a:	2201      	movs	r2, #1
 800c20c:	4610      	mov	r0, r2
 800c20e:	bd30      	pop	{r4, r5, pc}
 800c210:	4283      	cmp	r3, r0
 800c212:	d3f3      	bcc.n	800c1fc <__mcmp+0x18>
 800c214:	e7fa      	b.n	800c20c <__mcmp+0x28>
 800c216:	f04f 32ff 	mov.w	r2, #4294967295
 800c21a:	e7f7      	b.n	800c20c <__mcmp+0x28>

0800c21c <__mdiff>:
 800c21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	4606      	mov	r6, r0
 800c224:	4611      	mov	r1, r2
 800c226:	4620      	mov	r0, r4
 800c228:	4690      	mov	r8, r2
 800c22a:	f7ff ffdb 	bl	800c1e4 <__mcmp>
 800c22e:	1e05      	subs	r5, r0, #0
 800c230:	d110      	bne.n	800c254 <__mdiff+0x38>
 800c232:	4629      	mov	r1, r5
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff fd59 	bl	800bcec <_Balloc>
 800c23a:	b930      	cbnz	r0, 800c24a <__mdiff+0x2e>
 800c23c:	4b3a      	ldr	r3, [pc, #232]	; (800c328 <__mdiff+0x10c>)
 800c23e:	4602      	mov	r2, r0
 800c240:	f240 2137 	movw	r1, #567	; 0x237
 800c244:	4839      	ldr	r0, [pc, #228]	; (800c32c <__mdiff+0x110>)
 800c246:	f7fe fdb7 	bl	800adb8 <__assert_func>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	bfa4      	itt	ge
 800c256:	4643      	movge	r3, r8
 800c258:	46a0      	movge	r8, r4
 800c25a:	4630      	mov	r0, r6
 800c25c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c260:	bfa6      	itte	ge
 800c262:	461c      	movge	r4, r3
 800c264:	2500      	movge	r5, #0
 800c266:	2501      	movlt	r5, #1
 800c268:	f7ff fd40 	bl	800bcec <_Balloc>
 800c26c:	b920      	cbnz	r0, 800c278 <__mdiff+0x5c>
 800c26e:	4b2e      	ldr	r3, [pc, #184]	; (800c328 <__mdiff+0x10c>)
 800c270:	4602      	mov	r2, r0
 800c272:	f240 2145 	movw	r1, #581	; 0x245
 800c276:	e7e5      	b.n	800c244 <__mdiff+0x28>
 800c278:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c27c:	6926      	ldr	r6, [r4, #16]
 800c27e:	60c5      	str	r5, [r0, #12]
 800c280:	f104 0914 	add.w	r9, r4, #20
 800c284:	f108 0514 	add.w	r5, r8, #20
 800c288:	f100 0e14 	add.w	lr, r0, #20
 800c28c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c294:	f108 0210 	add.w	r2, r8, #16
 800c298:	46f2      	mov	sl, lr
 800c29a:	2100      	movs	r1, #0
 800c29c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2a4:	fa11 f88b 	uxtah	r8, r1, fp
 800c2a8:	b299      	uxth	r1, r3
 800c2aa:	0c1b      	lsrs	r3, r3, #16
 800c2ac:	eba8 0801 	sub.w	r8, r8, r1
 800c2b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2b8:	fa1f f888 	uxth.w	r8, r8
 800c2bc:	1419      	asrs	r1, r3, #16
 800c2be:	454e      	cmp	r6, r9
 800c2c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2c4:	f84a 3b04 	str.w	r3, [sl], #4
 800c2c8:	d8e8      	bhi.n	800c29c <__mdiff+0x80>
 800c2ca:	1b33      	subs	r3, r6, r4
 800c2cc:	3b15      	subs	r3, #21
 800c2ce:	f023 0303 	bic.w	r3, r3, #3
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	3415      	adds	r4, #21
 800c2d6:	42a6      	cmp	r6, r4
 800c2d8:	bf38      	it	cc
 800c2da:	2304      	movcc	r3, #4
 800c2dc:	441d      	add	r5, r3
 800c2de:	4473      	add	r3, lr
 800c2e0:	469e      	mov	lr, r3
 800c2e2:	462e      	mov	r6, r5
 800c2e4:	4566      	cmp	r6, ip
 800c2e6:	d30e      	bcc.n	800c306 <__mdiff+0xea>
 800c2e8:	f10c 0203 	add.w	r2, ip, #3
 800c2ec:	1b52      	subs	r2, r2, r5
 800c2ee:	f022 0203 	bic.w	r2, r2, #3
 800c2f2:	3d03      	subs	r5, #3
 800c2f4:	45ac      	cmp	ip, r5
 800c2f6:	bf38      	it	cc
 800c2f8:	2200      	movcc	r2, #0
 800c2fa:	4413      	add	r3, r2
 800c2fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c300:	b17a      	cbz	r2, 800c322 <__mdiff+0x106>
 800c302:	6107      	str	r7, [r0, #16]
 800c304:	e7a4      	b.n	800c250 <__mdiff+0x34>
 800c306:	f856 8b04 	ldr.w	r8, [r6], #4
 800c30a:	fa11 f288 	uxtah	r2, r1, r8
 800c30e:	1414      	asrs	r4, r2, #16
 800c310:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c314:	b292      	uxth	r2, r2
 800c316:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c31a:	f84e 2b04 	str.w	r2, [lr], #4
 800c31e:	1421      	asrs	r1, r4, #16
 800c320:	e7e0      	b.n	800c2e4 <__mdiff+0xc8>
 800c322:	3f01      	subs	r7, #1
 800c324:	e7ea      	b.n	800c2fc <__mdiff+0xe0>
 800c326:	bf00      	nop
 800c328:	0800d21b 	.word	0x0800d21b
 800c32c:	0800d22c 	.word	0x0800d22c

0800c330 <__d2b>:
 800c330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c334:	460f      	mov	r7, r1
 800c336:	2101      	movs	r1, #1
 800c338:	ec59 8b10 	vmov	r8, r9, d0
 800c33c:	4616      	mov	r6, r2
 800c33e:	f7ff fcd5 	bl	800bcec <_Balloc>
 800c342:	4604      	mov	r4, r0
 800c344:	b930      	cbnz	r0, 800c354 <__d2b+0x24>
 800c346:	4602      	mov	r2, r0
 800c348:	4b24      	ldr	r3, [pc, #144]	; (800c3dc <__d2b+0xac>)
 800c34a:	4825      	ldr	r0, [pc, #148]	; (800c3e0 <__d2b+0xb0>)
 800c34c:	f240 310f 	movw	r1, #783	; 0x30f
 800c350:	f7fe fd32 	bl	800adb8 <__assert_func>
 800c354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c35c:	bb2d      	cbnz	r5, 800c3aa <__d2b+0x7a>
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	f1b8 0300 	subs.w	r3, r8, #0
 800c364:	d026      	beq.n	800c3b4 <__d2b+0x84>
 800c366:	4668      	mov	r0, sp
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	f7ff fd87 	bl	800be7c <__lo0bits>
 800c36e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c372:	b1e8      	cbz	r0, 800c3b0 <__d2b+0x80>
 800c374:	f1c0 0320 	rsb	r3, r0, #32
 800c378:	fa02 f303 	lsl.w	r3, r2, r3
 800c37c:	430b      	orrs	r3, r1
 800c37e:	40c2      	lsrs	r2, r0
 800c380:	6163      	str	r3, [r4, #20]
 800c382:	9201      	str	r2, [sp, #4]
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	61a3      	str	r3, [r4, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	bf14      	ite	ne
 800c38c:	2202      	movne	r2, #2
 800c38e:	2201      	moveq	r2, #1
 800c390:	6122      	str	r2, [r4, #16]
 800c392:	b1bd      	cbz	r5, 800c3c4 <__d2b+0x94>
 800c394:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c398:	4405      	add	r5, r0
 800c39a:	603d      	str	r5, [r7, #0]
 800c39c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3a0:	6030      	str	r0, [r6, #0]
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	b003      	add	sp, #12
 800c3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3ae:	e7d6      	b.n	800c35e <__d2b+0x2e>
 800c3b0:	6161      	str	r1, [r4, #20]
 800c3b2:	e7e7      	b.n	800c384 <__d2b+0x54>
 800c3b4:	a801      	add	r0, sp, #4
 800c3b6:	f7ff fd61 	bl	800be7c <__lo0bits>
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	6163      	str	r3, [r4, #20]
 800c3be:	3020      	adds	r0, #32
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	e7e5      	b.n	800c390 <__d2b+0x60>
 800c3c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3cc:	6038      	str	r0, [r7, #0]
 800c3ce:	6918      	ldr	r0, [r3, #16]
 800c3d0:	f7ff fd34 	bl	800be3c <__hi0bits>
 800c3d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3d8:	e7e2      	b.n	800c3a0 <__d2b+0x70>
 800c3da:	bf00      	nop
 800c3dc:	0800d21b 	.word	0x0800d21b
 800c3e0:	0800d22c 	.word	0x0800d22c

0800c3e4 <__ssputs_r>:
 800c3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e8:	688e      	ldr	r6, [r1, #8]
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	42be      	cmp	r6, r7
 800c3ee:	680b      	ldr	r3, [r1, #0]
 800c3f0:	4682      	mov	sl, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	4690      	mov	r8, r2
 800c3f6:	d82c      	bhi.n	800c452 <__ssputs_r+0x6e>
 800c3f8:	898a      	ldrh	r2, [r1, #12]
 800c3fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3fe:	d026      	beq.n	800c44e <__ssputs_r+0x6a>
 800c400:	6965      	ldr	r5, [r4, #20]
 800c402:	6909      	ldr	r1, [r1, #16]
 800c404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c408:	eba3 0901 	sub.w	r9, r3, r1
 800c40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c410:	1c7b      	adds	r3, r7, #1
 800c412:	444b      	add	r3, r9
 800c414:	106d      	asrs	r5, r5, #1
 800c416:	429d      	cmp	r5, r3
 800c418:	bf38      	it	cc
 800c41a:	461d      	movcc	r5, r3
 800c41c:	0553      	lsls	r3, r2, #21
 800c41e:	d527      	bpl.n	800c470 <__ssputs_r+0x8c>
 800c420:	4629      	mov	r1, r5
 800c422:	f7ff fbd7 	bl	800bbd4 <_malloc_r>
 800c426:	4606      	mov	r6, r0
 800c428:	b360      	cbz	r0, 800c484 <__ssputs_r+0xa0>
 800c42a:	6921      	ldr	r1, [r4, #16]
 800c42c:	464a      	mov	r2, r9
 800c42e:	f000 fbf5 	bl	800cc1c <memcpy>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	6126      	str	r6, [r4, #16]
 800c440:	6165      	str	r5, [r4, #20]
 800c442:	444e      	add	r6, r9
 800c444:	eba5 0509 	sub.w	r5, r5, r9
 800c448:	6026      	str	r6, [r4, #0]
 800c44a:	60a5      	str	r5, [r4, #8]
 800c44c:	463e      	mov	r6, r7
 800c44e:	42be      	cmp	r6, r7
 800c450:	d900      	bls.n	800c454 <__ssputs_r+0x70>
 800c452:	463e      	mov	r6, r7
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	4632      	mov	r2, r6
 800c458:	4641      	mov	r1, r8
 800c45a:	f000 fbb5 	bl	800cbc8 <memmove>
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	60a3      	str	r3, [r4, #8]
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	4433      	add	r3, r6
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	2000      	movs	r0, #0
 800c46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c470:	462a      	mov	r2, r5
 800c472:	f000 fc10 	bl	800cc96 <_realloc_r>
 800c476:	4606      	mov	r6, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d1e0      	bne.n	800c43e <__ssputs_r+0x5a>
 800c47c:	6921      	ldr	r1, [r4, #16]
 800c47e:	4650      	mov	r0, sl
 800c480:	f7ff fb34 	bl	800baec <_free_r>
 800c484:	230c      	movs	r3, #12
 800c486:	f8ca 3000 	str.w	r3, [sl]
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c490:	81a3      	strh	r3, [r4, #12]
 800c492:	f04f 30ff 	mov.w	r0, #4294967295
 800c496:	e7e9      	b.n	800c46c <__ssputs_r+0x88>

0800c498 <_svfiprintf_r>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4698      	mov	r8, r3
 800c49e:	898b      	ldrh	r3, [r1, #12]
 800c4a0:	061b      	lsls	r3, r3, #24
 800c4a2:	b09d      	sub	sp, #116	; 0x74
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	d50e      	bpl.n	800c4ca <_svfiprintf_r+0x32>
 800c4ac:	690b      	ldr	r3, [r1, #16]
 800c4ae:	b963      	cbnz	r3, 800c4ca <_svfiprintf_r+0x32>
 800c4b0:	2140      	movs	r1, #64	; 0x40
 800c4b2:	f7ff fb8f 	bl	800bbd4 <_malloc_r>
 800c4b6:	6028      	str	r0, [r5, #0]
 800c4b8:	6128      	str	r0, [r5, #16]
 800c4ba:	b920      	cbnz	r0, 800c4c6 <_svfiprintf_r+0x2e>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	e0d0      	b.n	800c668 <_svfiprintf_r+0x1d0>
 800c4c6:	2340      	movs	r3, #64	; 0x40
 800c4c8:	616b      	str	r3, [r5, #20]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ce:	2320      	movs	r3, #32
 800c4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4d8:	2330      	movs	r3, #48	; 0x30
 800c4da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c680 <_svfiprintf_r+0x1e8>
 800c4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4e2:	f04f 0901 	mov.w	r9, #1
 800c4e6:	4623      	mov	r3, r4
 800c4e8:	469a      	mov	sl, r3
 800c4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ee:	b10a      	cbz	r2, 800c4f4 <_svfiprintf_r+0x5c>
 800c4f0:	2a25      	cmp	r2, #37	; 0x25
 800c4f2:	d1f9      	bne.n	800c4e8 <_svfiprintf_r+0x50>
 800c4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4f8:	d00b      	beq.n	800c512 <_svfiprintf_r+0x7a>
 800c4fa:	465b      	mov	r3, fp
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ff6f 	bl	800c3e4 <__ssputs_r>
 800c506:	3001      	adds	r0, #1
 800c508:	f000 80a9 	beq.w	800c65e <_svfiprintf_r+0x1c6>
 800c50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c50e:	445a      	add	r2, fp
 800c510:	9209      	str	r2, [sp, #36]	; 0x24
 800c512:	f89a 3000 	ldrb.w	r3, [sl]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 80a1 	beq.w	800c65e <_svfiprintf_r+0x1c6>
 800c51c:	2300      	movs	r3, #0
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295
 800c522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c526:	f10a 0a01 	add.w	sl, sl, #1
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	9307      	str	r3, [sp, #28]
 800c52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c532:	931a      	str	r3, [sp, #104]	; 0x68
 800c534:	4654      	mov	r4, sl
 800c536:	2205      	movs	r2, #5
 800c538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53c:	4850      	ldr	r0, [pc, #320]	; (800c680 <_svfiprintf_r+0x1e8>)
 800c53e:	f7f3 fe7f 	bl	8000240 <memchr>
 800c542:	9a04      	ldr	r2, [sp, #16]
 800c544:	b9d8      	cbnz	r0, 800c57e <_svfiprintf_r+0xe6>
 800c546:	06d0      	lsls	r0, r2, #27
 800c548:	bf44      	itt	mi
 800c54a:	2320      	movmi	r3, #32
 800c54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c550:	0711      	lsls	r1, r2, #28
 800c552:	bf44      	itt	mi
 800c554:	232b      	movmi	r3, #43	; 0x2b
 800c556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c55a:	f89a 3000 	ldrb.w	r3, [sl]
 800c55e:	2b2a      	cmp	r3, #42	; 0x2a
 800c560:	d015      	beq.n	800c58e <_svfiprintf_r+0xf6>
 800c562:	9a07      	ldr	r2, [sp, #28]
 800c564:	4654      	mov	r4, sl
 800c566:	2000      	movs	r0, #0
 800c568:	f04f 0c0a 	mov.w	ip, #10
 800c56c:	4621      	mov	r1, r4
 800c56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c572:	3b30      	subs	r3, #48	; 0x30
 800c574:	2b09      	cmp	r3, #9
 800c576:	d94d      	bls.n	800c614 <_svfiprintf_r+0x17c>
 800c578:	b1b0      	cbz	r0, 800c5a8 <_svfiprintf_r+0x110>
 800c57a:	9207      	str	r2, [sp, #28]
 800c57c:	e014      	b.n	800c5a8 <_svfiprintf_r+0x110>
 800c57e:	eba0 0308 	sub.w	r3, r0, r8
 800c582:	fa09 f303 	lsl.w	r3, r9, r3
 800c586:	4313      	orrs	r3, r2
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	46a2      	mov	sl, r4
 800c58c:	e7d2      	b.n	800c534 <_svfiprintf_r+0x9c>
 800c58e:	9b03      	ldr	r3, [sp, #12]
 800c590:	1d19      	adds	r1, r3, #4
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	9103      	str	r1, [sp, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bfbb      	ittet	lt
 800c59a:	425b      	neglt	r3, r3
 800c59c:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a0:	9307      	strge	r3, [sp, #28]
 800c5a2:	9307      	strlt	r3, [sp, #28]
 800c5a4:	bfb8      	it	lt
 800c5a6:	9204      	strlt	r2, [sp, #16]
 800c5a8:	7823      	ldrb	r3, [r4, #0]
 800c5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ac:	d10c      	bne.n	800c5c8 <_svfiprintf_r+0x130>
 800c5ae:	7863      	ldrb	r3, [r4, #1]
 800c5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b2:	d134      	bne.n	800c61e <_svfiprintf_r+0x186>
 800c5b4:	9b03      	ldr	r3, [sp, #12]
 800c5b6:	1d1a      	adds	r2, r3, #4
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	9203      	str	r2, [sp, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bfb8      	it	lt
 800c5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5c4:	3402      	adds	r4, #2
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c690 <_svfiprintf_r+0x1f8>
 800c5cc:	7821      	ldrb	r1, [r4, #0]
 800c5ce:	2203      	movs	r2, #3
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	f7f3 fe35 	bl	8000240 <memchr>
 800c5d6:	b138      	cbz	r0, 800c5e8 <_svfiprintf_r+0x150>
 800c5d8:	9b04      	ldr	r3, [sp, #16]
 800c5da:	eba0 000a 	sub.w	r0, r0, sl
 800c5de:	2240      	movs	r2, #64	; 0x40
 800c5e0:	4082      	lsls	r2, r0
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	3401      	adds	r4, #1
 800c5e6:	9304      	str	r3, [sp, #16]
 800c5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ec:	4825      	ldr	r0, [pc, #148]	; (800c684 <_svfiprintf_r+0x1ec>)
 800c5ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	f7f3 fe24 	bl	8000240 <memchr>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d038      	beq.n	800c66e <_svfiprintf_r+0x1d6>
 800c5fc:	4b22      	ldr	r3, [pc, #136]	; (800c688 <_svfiprintf_r+0x1f0>)
 800c5fe:	bb1b      	cbnz	r3, 800c648 <_svfiprintf_r+0x1b0>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	3307      	adds	r3, #7
 800c604:	f023 0307 	bic.w	r3, r3, #7
 800c608:	3308      	adds	r3, #8
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60e:	4433      	add	r3, r6
 800c610:	9309      	str	r3, [sp, #36]	; 0x24
 800c612:	e768      	b.n	800c4e6 <_svfiprintf_r+0x4e>
 800c614:	fb0c 3202 	mla	r2, ip, r2, r3
 800c618:	460c      	mov	r4, r1
 800c61a:	2001      	movs	r0, #1
 800c61c:	e7a6      	b.n	800c56c <_svfiprintf_r+0xd4>
 800c61e:	2300      	movs	r3, #0
 800c620:	3401      	adds	r4, #1
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	4619      	mov	r1, r3
 800c626:	f04f 0c0a 	mov.w	ip, #10
 800c62a:	4620      	mov	r0, r4
 800c62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c630:	3a30      	subs	r2, #48	; 0x30
 800c632:	2a09      	cmp	r2, #9
 800c634:	d903      	bls.n	800c63e <_svfiprintf_r+0x1a6>
 800c636:	2b00      	cmp	r3, #0
 800c638:	d0c6      	beq.n	800c5c8 <_svfiprintf_r+0x130>
 800c63a:	9105      	str	r1, [sp, #20]
 800c63c:	e7c4      	b.n	800c5c8 <_svfiprintf_r+0x130>
 800c63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c642:	4604      	mov	r4, r0
 800c644:	2301      	movs	r3, #1
 800c646:	e7f0      	b.n	800c62a <_svfiprintf_r+0x192>
 800c648:	ab03      	add	r3, sp, #12
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	462a      	mov	r2, r5
 800c64e:	4b0f      	ldr	r3, [pc, #60]	; (800c68c <_svfiprintf_r+0x1f4>)
 800c650:	a904      	add	r1, sp, #16
 800c652:	4638      	mov	r0, r7
 800c654:	f7fd fdc2 	bl	800a1dc <_printf_float>
 800c658:	1c42      	adds	r2, r0, #1
 800c65a:	4606      	mov	r6, r0
 800c65c:	d1d6      	bne.n	800c60c <_svfiprintf_r+0x174>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	065b      	lsls	r3, r3, #25
 800c662:	f53f af2d 	bmi.w	800c4c0 <_svfiprintf_r+0x28>
 800c666:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c668:	b01d      	add	sp, #116	; 0x74
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	ab03      	add	r3, sp, #12
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	462a      	mov	r2, r5
 800c674:	4b05      	ldr	r3, [pc, #20]	; (800c68c <_svfiprintf_r+0x1f4>)
 800c676:	a904      	add	r1, sp, #16
 800c678:	4638      	mov	r0, r7
 800c67a:	f7fe f853 	bl	800a724 <_printf_i>
 800c67e:	e7eb      	b.n	800c658 <_svfiprintf_r+0x1c0>
 800c680:	0800d384 	.word	0x0800d384
 800c684:	0800d38e 	.word	0x0800d38e
 800c688:	0800a1dd 	.word	0x0800a1dd
 800c68c:	0800c3e5 	.word	0x0800c3e5
 800c690:	0800d38a 	.word	0x0800d38a

0800c694 <__sfputc_r>:
 800c694:	6893      	ldr	r3, [r2, #8]
 800c696:	3b01      	subs	r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	b410      	push	{r4}
 800c69c:	6093      	str	r3, [r2, #8]
 800c69e:	da08      	bge.n	800c6b2 <__sfputc_r+0x1e>
 800c6a0:	6994      	ldr	r4, [r2, #24]
 800c6a2:	42a3      	cmp	r3, r4
 800c6a4:	db01      	blt.n	800c6aa <__sfputc_r+0x16>
 800c6a6:	290a      	cmp	r1, #10
 800c6a8:	d103      	bne.n	800c6b2 <__sfputc_r+0x1e>
 800c6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ae:	f000 b9f5 	b.w	800ca9c <__swbuf_r>
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	1c58      	adds	r0, r3, #1
 800c6b6:	6010      	str	r0, [r2, #0]
 800c6b8:	7019      	strb	r1, [r3, #0]
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <__sfputs_r>:
 800c6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460f      	mov	r7, r1
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	18d5      	adds	r5, r2, r3
 800c6cc:	42ac      	cmp	r4, r5
 800c6ce:	d101      	bne.n	800c6d4 <__sfputs_r+0x12>
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	e007      	b.n	800c6e4 <__sfputs_r+0x22>
 800c6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d8:	463a      	mov	r2, r7
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f7ff ffda 	bl	800c694 <__sfputc_r>
 800c6e0:	1c43      	adds	r3, r0, #1
 800c6e2:	d1f3      	bne.n	800c6cc <__sfputs_r+0xa>
 800c6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6e8 <_vfiprintf_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	b09d      	sub	sp, #116	; 0x74
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	4698      	mov	r8, r3
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	b118      	cbz	r0, 800c700 <_vfiprintf_r+0x18>
 800c6f8:	6a03      	ldr	r3, [r0, #32]
 800c6fa:	b90b      	cbnz	r3, 800c700 <_vfiprintf_r+0x18>
 800c6fc:	f7fe f9c0 	bl	800aa80 <__sinit>
 800c700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c702:	07d9      	lsls	r1, r3, #31
 800c704:	d405      	bmi.n	800c712 <_vfiprintf_r+0x2a>
 800c706:	89ab      	ldrh	r3, [r5, #12]
 800c708:	059a      	lsls	r2, r3, #22
 800c70a:	d402      	bmi.n	800c712 <_vfiprintf_r+0x2a>
 800c70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c70e:	f7fe fb50 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	071b      	lsls	r3, r3, #28
 800c716:	d501      	bpl.n	800c71c <_vfiprintf_r+0x34>
 800c718:	692b      	ldr	r3, [r5, #16]
 800c71a:	b99b      	cbnz	r3, 800c744 <_vfiprintf_r+0x5c>
 800c71c:	4629      	mov	r1, r5
 800c71e:	4630      	mov	r0, r6
 800c720:	f000 f9fa 	bl	800cb18 <__swsetup_r>
 800c724:	b170      	cbz	r0, 800c744 <_vfiprintf_r+0x5c>
 800c726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c728:	07dc      	lsls	r4, r3, #31
 800c72a:	d504      	bpl.n	800c736 <_vfiprintf_r+0x4e>
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295
 800c730:	b01d      	add	sp, #116	; 0x74
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	0598      	lsls	r0, r3, #22
 800c73a:	d4f7      	bmi.n	800c72c <_vfiprintf_r+0x44>
 800c73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73e:	f7fe fb39 	bl	800adb4 <__retarget_lock_release_recursive>
 800c742:	e7f3      	b.n	800c72c <_vfiprintf_r+0x44>
 800c744:	2300      	movs	r3, #0
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	2320      	movs	r3, #32
 800c74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c752:	2330      	movs	r3, #48	; 0x30
 800c754:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c908 <_vfiprintf_r+0x220>
 800c758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c75c:	f04f 0901 	mov.w	r9, #1
 800c760:	4623      	mov	r3, r4
 800c762:	469a      	mov	sl, r3
 800c764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c768:	b10a      	cbz	r2, 800c76e <_vfiprintf_r+0x86>
 800c76a:	2a25      	cmp	r2, #37	; 0x25
 800c76c:	d1f9      	bne.n	800c762 <_vfiprintf_r+0x7a>
 800c76e:	ebba 0b04 	subs.w	fp, sl, r4
 800c772:	d00b      	beq.n	800c78c <_vfiprintf_r+0xa4>
 800c774:	465b      	mov	r3, fp
 800c776:	4622      	mov	r2, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ffa1 	bl	800c6c2 <__sfputs_r>
 800c780:	3001      	adds	r0, #1
 800c782:	f000 80a9 	beq.w	800c8d8 <_vfiprintf_r+0x1f0>
 800c786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c788:	445a      	add	r2, fp
 800c78a:	9209      	str	r2, [sp, #36]	; 0x24
 800c78c:	f89a 3000 	ldrb.w	r3, [sl]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 80a1 	beq.w	800c8d8 <_vfiprintf_r+0x1f0>
 800c796:	2300      	movs	r3, #0
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a0:	f10a 0a01 	add.w	sl, sl, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	9307      	str	r3, [sp, #28]
 800c7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ae:	4654      	mov	r4, sl
 800c7b0:	2205      	movs	r2, #5
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4854      	ldr	r0, [pc, #336]	; (800c908 <_vfiprintf_r+0x220>)
 800c7b8:	f7f3 fd42 	bl	8000240 <memchr>
 800c7bc:	9a04      	ldr	r2, [sp, #16]
 800c7be:	b9d8      	cbnz	r0, 800c7f8 <_vfiprintf_r+0x110>
 800c7c0:	06d1      	lsls	r1, r2, #27
 800c7c2:	bf44      	itt	mi
 800c7c4:	2320      	movmi	r3, #32
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ca:	0713      	lsls	r3, r2, #28
 800c7cc:	bf44      	itt	mi
 800c7ce:	232b      	movmi	r3, #43	; 0x2b
 800c7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7da:	d015      	beq.n	800c808 <_vfiprintf_r+0x120>
 800c7dc:	9a07      	ldr	r2, [sp, #28]
 800c7de:	4654      	mov	r4, sl
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	f04f 0c0a 	mov.w	ip, #10
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ec:	3b30      	subs	r3, #48	; 0x30
 800c7ee:	2b09      	cmp	r3, #9
 800c7f0:	d94d      	bls.n	800c88e <_vfiprintf_r+0x1a6>
 800c7f2:	b1b0      	cbz	r0, 800c822 <_vfiprintf_r+0x13a>
 800c7f4:	9207      	str	r2, [sp, #28]
 800c7f6:	e014      	b.n	800c822 <_vfiprintf_r+0x13a>
 800c7f8:	eba0 0308 	sub.w	r3, r0, r8
 800c7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c800:	4313      	orrs	r3, r2
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	46a2      	mov	sl, r4
 800c806:	e7d2      	b.n	800c7ae <_vfiprintf_r+0xc6>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	1d19      	adds	r1, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	9103      	str	r1, [sp, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	bfbb      	ittet	lt
 800c814:	425b      	neglt	r3, r3
 800c816:	f042 0202 	orrlt.w	r2, r2, #2
 800c81a:	9307      	strge	r3, [sp, #28]
 800c81c:	9307      	strlt	r3, [sp, #28]
 800c81e:	bfb8      	it	lt
 800c820:	9204      	strlt	r2, [sp, #16]
 800c822:	7823      	ldrb	r3, [r4, #0]
 800c824:	2b2e      	cmp	r3, #46	; 0x2e
 800c826:	d10c      	bne.n	800c842 <_vfiprintf_r+0x15a>
 800c828:	7863      	ldrb	r3, [r4, #1]
 800c82a:	2b2a      	cmp	r3, #42	; 0x2a
 800c82c:	d134      	bne.n	800c898 <_vfiprintf_r+0x1b0>
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	1d1a      	adds	r2, r3, #4
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	9203      	str	r2, [sp, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfb8      	it	lt
 800c83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c83e:	3402      	adds	r4, #2
 800c840:	9305      	str	r3, [sp, #20]
 800c842:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c918 <_vfiprintf_r+0x230>
 800c846:	7821      	ldrb	r1, [r4, #0]
 800c848:	2203      	movs	r2, #3
 800c84a:	4650      	mov	r0, sl
 800c84c:	f7f3 fcf8 	bl	8000240 <memchr>
 800c850:	b138      	cbz	r0, 800c862 <_vfiprintf_r+0x17a>
 800c852:	9b04      	ldr	r3, [sp, #16]
 800c854:	eba0 000a 	sub.w	r0, r0, sl
 800c858:	2240      	movs	r2, #64	; 0x40
 800c85a:	4082      	lsls	r2, r0
 800c85c:	4313      	orrs	r3, r2
 800c85e:	3401      	adds	r4, #1
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c866:	4829      	ldr	r0, [pc, #164]	; (800c90c <_vfiprintf_r+0x224>)
 800c868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c86c:	2206      	movs	r2, #6
 800c86e:	f7f3 fce7 	bl	8000240 <memchr>
 800c872:	2800      	cmp	r0, #0
 800c874:	d03f      	beq.n	800c8f6 <_vfiprintf_r+0x20e>
 800c876:	4b26      	ldr	r3, [pc, #152]	; (800c910 <_vfiprintf_r+0x228>)
 800c878:	bb1b      	cbnz	r3, 800c8c2 <_vfiprintf_r+0x1da>
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	3307      	adds	r3, #7
 800c87e:	f023 0307 	bic.w	r3, r3, #7
 800c882:	3308      	adds	r3, #8
 800c884:	9303      	str	r3, [sp, #12]
 800c886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c888:	443b      	add	r3, r7
 800c88a:	9309      	str	r3, [sp, #36]	; 0x24
 800c88c:	e768      	b.n	800c760 <_vfiprintf_r+0x78>
 800c88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c892:	460c      	mov	r4, r1
 800c894:	2001      	movs	r0, #1
 800c896:	e7a6      	b.n	800c7e6 <_vfiprintf_r+0xfe>
 800c898:	2300      	movs	r3, #0
 800c89a:	3401      	adds	r4, #1
 800c89c:	9305      	str	r3, [sp, #20]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	f04f 0c0a 	mov.w	ip, #10
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8aa:	3a30      	subs	r2, #48	; 0x30
 800c8ac:	2a09      	cmp	r2, #9
 800c8ae:	d903      	bls.n	800c8b8 <_vfiprintf_r+0x1d0>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0c6      	beq.n	800c842 <_vfiprintf_r+0x15a>
 800c8b4:	9105      	str	r1, [sp, #20]
 800c8b6:	e7c4      	b.n	800c842 <_vfiprintf_r+0x15a>
 800c8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8bc:	4604      	mov	r4, r0
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e7f0      	b.n	800c8a4 <_vfiprintf_r+0x1bc>
 800c8c2:	ab03      	add	r3, sp, #12
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	462a      	mov	r2, r5
 800c8c8:	4b12      	ldr	r3, [pc, #72]	; (800c914 <_vfiprintf_r+0x22c>)
 800c8ca:	a904      	add	r1, sp, #16
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f7fd fc85 	bl	800a1dc <_printf_float>
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	1c78      	adds	r0, r7, #1
 800c8d6:	d1d6      	bne.n	800c886 <_vfiprintf_r+0x19e>
 800c8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8da:	07d9      	lsls	r1, r3, #31
 800c8dc:	d405      	bmi.n	800c8ea <_vfiprintf_r+0x202>
 800c8de:	89ab      	ldrh	r3, [r5, #12]
 800c8e0:	059a      	lsls	r2, r3, #22
 800c8e2:	d402      	bmi.n	800c8ea <_vfiprintf_r+0x202>
 800c8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e6:	f7fe fa65 	bl	800adb4 <__retarget_lock_release_recursive>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	065b      	lsls	r3, r3, #25
 800c8ee:	f53f af1d 	bmi.w	800c72c <_vfiprintf_r+0x44>
 800c8f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f4:	e71c      	b.n	800c730 <_vfiprintf_r+0x48>
 800c8f6:	ab03      	add	r3, sp, #12
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <_vfiprintf_r+0x22c>)
 800c8fe:	a904      	add	r1, sp, #16
 800c900:	4630      	mov	r0, r6
 800c902:	f7fd ff0f 	bl	800a724 <_printf_i>
 800c906:	e7e4      	b.n	800c8d2 <_vfiprintf_r+0x1ea>
 800c908:	0800d384 	.word	0x0800d384
 800c90c:	0800d38e 	.word	0x0800d38e
 800c910:	0800a1dd 	.word	0x0800a1dd
 800c914:	0800c6c3 	.word	0x0800c6c3
 800c918:	0800d38a 	.word	0x0800d38a

0800c91c <__sflush_r>:
 800c91c:	898a      	ldrh	r2, [r1, #12]
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	4605      	mov	r5, r0
 800c924:	0710      	lsls	r0, r2, #28
 800c926:	460c      	mov	r4, r1
 800c928:	d458      	bmi.n	800c9dc <__sflush_r+0xc0>
 800c92a:	684b      	ldr	r3, [r1, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dc05      	bgt.n	800c93c <__sflush_r+0x20>
 800c930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	dc02      	bgt.n	800c93c <__sflush_r+0x20>
 800c936:	2000      	movs	r0, #0
 800c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c93e:	2e00      	cmp	r6, #0
 800c940:	d0f9      	beq.n	800c936 <__sflush_r+0x1a>
 800c942:	2300      	movs	r3, #0
 800c944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c948:	682f      	ldr	r7, [r5, #0]
 800c94a:	6a21      	ldr	r1, [r4, #32]
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	d032      	beq.n	800c9b6 <__sflush_r+0x9a>
 800c950:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	075a      	lsls	r2, r3, #29
 800c956:	d505      	bpl.n	800c964 <__sflush_r+0x48>
 800c958:	6863      	ldr	r3, [r4, #4]
 800c95a:	1ac0      	subs	r0, r0, r3
 800c95c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c95e:	b10b      	cbz	r3, 800c964 <__sflush_r+0x48>
 800c960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c962:	1ac0      	subs	r0, r0, r3
 800c964:	2300      	movs	r3, #0
 800c966:	4602      	mov	r2, r0
 800c968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c96a:	6a21      	ldr	r1, [r4, #32]
 800c96c:	4628      	mov	r0, r5
 800c96e:	47b0      	blx	r6
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	d106      	bne.n	800c984 <__sflush_r+0x68>
 800c976:	6829      	ldr	r1, [r5, #0]
 800c978:	291d      	cmp	r1, #29
 800c97a:	d82b      	bhi.n	800c9d4 <__sflush_r+0xb8>
 800c97c:	4a29      	ldr	r2, [pc, #164]	; (800ca24 <__sflush_r+0x108>)
 800c97e:	410a      	asrs	r2, r1
 800c980:	07d6      	lsls	r6, r2, #31
 800c982:	d427      	bmi.n	800c9d4 <__sflush_r+0xb8>
 800c984:	2200      	movs	r2, #0
 800c986:	6062      	str	r2, [r4, #4]
 800c988:	04d9      	lsls	r1, r3, #19
 800c98a:	6922      	ldr	r2, [r4, #16]
 800c98c:	6022      	str	r2, [r4, #0]
 800c98e:	d504      	bpl.n	800c99a <__sflush_r+0x7e>
 800c990:	1c42      	adds	r2, r0, #1
 800c992:	d101      	bne.n	800c998 <__sflush_r+0x7c>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b903      	cbnz	r3, 800c99a <__sflush_r+0x7e>
 800c998:	6560      	str	r0, [r4, #84]	; 0x54
 800c99a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c99c:	602f      	str	r7, [r5, #0]
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	d0c9      	beq.n	800c936 <__sflush_r+0x1a>
 800c9a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9a6:	4299      	cmp	r1, r3
 800c9a8:	d002      	beq.n	800c9b0 <__sflush_r+0x94>
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f7ff f89e 	bl	800baec <_free_r>
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	6360      	str	r0, [r4, #52]	; 0x34
 800c9b4:	e7c0      	b.n	800c938 <__sflush_r+0x1c>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	47b0      	blx	r6
 800c9bc:	1c41      	adds	r1, r0, #1
 800c9be:	d1c8      	bne.n	800c952 <__sflush_r+0x36>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0c5      	beq.n	800c952 <__sflush_r+0x36>
 800c9c6:	2b1d      	cmp	r3, #29
 800c9c8:	d001      	beq.n	800c9ce <__sflush_r+0xb2>
 800c9ca:	2b16      	cmp	r3, #22
 800c9cc:	d101      	bne.n	800c9d2 <__sflush_r+0xb6>
 800c9ce:	602f      	str	r7, [r5, #0]
 800c9d0:	e7b1      	b.n	800c936 <__sflush_r+0x1a>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d8:	81a3      	strh	r3, [r4, #12]
 800c9da:	e7ad      	b.n	800c938 <__sflush_r+0x1c>
 800c9dc:	690f      	ldr	r7, [r1, #16]
 800c9de:	2f00      	cmp	r7, #0
 800c9e0:	d0a9      	beq.n	800c936 <__sflush_r+0x1a>
 800c9e2:	0793      	lsls	r3, r2, #30
 800c9e4:	680e      	ldr	r6, [r1, #0]
 800c9e6:	bf08      	it	eq
 800c9e8:	694b      	ldreq	r3, [r1, #20]
 800c9ea:	600f      	str	r7, [r1, #0]
 800c9ec:	bf18      	it	ne
 800c9ee:	2300      	movne	r3, #0
 800c9f0:	eba6 0807 	sub.w	r8, r6, r7
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	f1b8 0f00 	cmp.w	r8, #0
 800c9fa:	dd9c      	ble.n	800c936 <__sflush_r+0x1a>
 800c9fc:	6a21      	ldr	r1, [r4, #32]
 800c9fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca00:	4643      	mov	r3, r8
 800ca02:	463a      	mov	r2, r7
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b0      	blx	r6
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	dc06      	bgt.n	800ca1a <__sflush_r+0xfe>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	e78e      	b.n	800c938 <__sflush_r+0x1c>
 800ca1a:	4407      	add	r7, r0
 800ca1c:	eba8 0800 	sub.w	r8, r8, r0
 800ca20:	e7e9      	b.n	800c9f6 <__sflush_r+0xda>
 800ca22:	bf00      	nop
 800ca24:	dfbffffe 	.word	0xdfbffffe

0800ca28 <_fflush_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	690b      	ldr	r3, [r1, #16]
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	b913      	cbnz	r3, 800ca38 <_fflush_r+0x10>
 800ca32:	2500      	movs	r5, #0
 800ca34:	4628      	mov	r0, r5
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	b118      	cbz	r0, 800ca42 <_fflush_r+0x1a>
 800ca3a:	6a03      	ldr	r3, [r0, #32]
 800ca3c:	b90b      	cbnz	r3, 800ca42 <_fflush_r+0x1a>
 800ca3e:	f7fe f81f 	bl	800aa80 <__sinit>
 800ca42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0f3      	beq.n	800ca32 <_fflush_r+0xa>
 800ca4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca4c:	07d0      	lsls	r0, r2, #31
 800ca4e:	d404      	bmi.n	800ca5a <_fflush_r+0x32>
 800ca50:	0599      	lsls	r1, r3, #22
 800ca52:	d402      	bmi.n	800ca5a <_fflush_r+0x32>
 800ca54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca56:	f7fe f9ac 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	f7ff ff5d 	bl	800c91c <__sflush_r>
 800ca62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca64:	07da      	lsls	r2, r3, #31
 800ca66:	4605      	mov	r5, r0
 800ca68:	d4e4      	bmi.n	800ca34 <_fflush_r+0xc>
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	059b      	lsls	r3, r3, #22
 800ca6e:	d4e1      	bmi.n	800ca34 <_fflush_r+0xc>
 800ca70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca72:	f7fe f99f 	bl	800adb4 <__retarget_lock_release_recursive>
 800ca76:	e7dd      	b.n	800ca34 <_fflush_r+0xc>

0800ca78 <fiprintf>:
 800ca78:	b40e      	push	{r1, r2, r3}
 800ca7a:	b503      	push	{r0, r1, lr}
 800ca7c:	4601      	mov	r1, r0
 800ca7e:	ab03      	add	r3, sp, #12
 800ca80:	4805      	ldr	r0, [pc, #20]	; (800ca98 <fiprintf+0x20>)
 800ca82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca86:	6800      	ldr	r0, [r0, #0]
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	f7ff fe2d 	bl	800c6e8 <_vfiprintf_r>
 800ca8e:	b002      	add	sp, #8
 800ca90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca94:	b003      	add	sp, #12
 800ca96:	4770      	bx	lr
 800ca98:	20000128 	.word	0x20000128

0800ca9c <__swbuf_r>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	460e      	mov	r6, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	4605      	mov	r5, r0
 800caa4:	b118      	cbz	r0, 800caae <__swbuf_r+0x12>
 800caa6:	6a03      	ldr	r3, [r0, #32]
 800caa8:	b90b      	cbnz	r3, 800caae <__swbuf_r+0x12>
 800caaa:	f7fd ffe9 	bl	800aa80 <__sinit>
 800caae:	69a3      	ldr	r3, [r4, #24]
 800cab0:	60a3      	str	r3, [r4, #8]
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	071a      	lsls	r2, r3, #28
 800cab6:	d525      	bpl.n	800cb04 <__swbuf_r+0x68>
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	b31b      	cbz	r3, 800cb04 <__swbuf_r+0x68>
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	6922      	ldr	r2, [r4, #16]
 800cac0:	1a98      	subs	r0, r3, r2
 800cac2:	6963      	ldr	r3, [r4, #20]
 800cac4:	b2f6      	uxtb	r6, r6
 800cac6:	4283      	cmp	r3, r0
 800cac8:	4637      	mov	r7, r6
 800caca:	dc04      	bgt.n	800cad6 <__swbuf_r+0x3a>
 800cacc:	4621      	mov	r1, r4
 800cace:	4628      	mov	r0, r5
 800cad0:	f7ff ffaa 	bl	800ca28 <_fflush_r>
 800cad4:	b9e0      	cbnz	r0, 800cb10 <__swbuf_r+0x74>
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	3b01      	subs	r3, #1
 800cada:	60a3      	str	r3, [r4, #8]
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	6022      	str	r2, [r4, #0]
 800cae2:	701e      	strb	r6, [r3, #0]
 800cae4:	6962      	ldr	r2, [r4, #20]
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	429a      	cmp	r2, r3
 800caea:	d004      	beq.n	800caf6 <__swbuf_r+0x5a>
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	07db      	lsls	r3, r3, #31
 800caf0:	d506      	bpl.n	800cb00 <__swbuf_r+0x64>
 800caf2:	2e0a      	cmp	r6, #10
 800caf4:	d104      	bne.n	800cb00 <__swbuf_r+0x64>
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f7ff ff95 	bl	800ca28 <_fflush_r>
 800cafe:	b938      	cbnz	r0, 800cb10 <__swbuf_r+0x74>
 800cb00:	4638      	mov	r0, r7
 800cb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb04:	4621      	mov	r1, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 f806 	bl	800cb18 <__swsetup_r>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0d5      	beq.n	800cabc <__swbuf_r+0x20>
 800cb10:	f04f 37ff 	mov.w	r7, #4294967295
 800cb14:	e7f4      	b.n	800cb00 <__swbuf_r+0x64>
	...

0800cb18 <__swsetup_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4b2a      	ldr	r3, [pc, #168]	; (800cbc4 <__swsetup_r+0xac>)
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	460c      	mov	r4, r1
 800cb22:	b118      	cbz	r0, 800cb2c <__swsetup_r+0x14>
 800cb24:	6a03      	ldr	r3, [r0, #32]
 800cb26:	b90b      	cbnz	r3, 800cb2c <__swsetup_r+0x14>
 800cb28:	f7fd ffaa 	bl	800aa80 <__sinit>
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb32:	0718      	lsls	r0, r3, #28
 800cb34:	d422      	bmi.n	800cb7c <__swsetup_r+0x64>
 800cb36:	06d9      	lsls	r1, r3, #27
 800cb38:	d407      	bmi.n	800cb4a <__swsetup_r+0x32>
 800cb3a:	2309      	movs	r3, #9
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb42:	81a3      	strh	r3, [r4, #12]
 800cb44:	f04f 30ff 	mov.w	r0, #4294967295
 800cb48:	e034      	b.n	800cbb4 <__swsetup_r+0x9c>
 800cb4a:	0758      	lsls	r0, r3, #29
 800cb4c:	d512      	bpl.n	800cb74 <__swsetup_r+0x5c>
 800cb4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb50:	b141      	cbz	r1, 800cb64 <__swsetup_r+0x4c>
 800cb52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb56:	4299      	cmp	r1, r3
 800cb58:	d002      	beq.n	800cb60 <__swsetup_r+0x48>
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f7fe ffc6 	bl	800baec <_free_r>
 800cb60:	2300      	movs	r3, #0
 800cb62:	6363      	str	r3, [r4, #52]	; 0x34
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb6a:	81a3      	strh	r3, [r4, #12]
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	6063      	str	r3, [r4, #4]
 800cb70:	6923      	ldr	r3, [r4, #16]
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f043 0308 	orr.w	r3, r3, #8
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	b94b      	cbnz	r3, 800cb94 <__swsetup_r+0x7c>
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb8a:	d003      	beq.n	800cb94 <__swsetup_r+0x7c>
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	4628      	mov	r0, r5
 800cb90:	f000 f8e3 	bl	800cd5a <__smakebuf_r>
 800cb94:	89a0      	ldrh	r0, [r4, #12]
 800cb96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb9a:	f010 0301 	ands.w	r3, r0, #1
 800cb9e:	d00a      	beq.n	800cbb6 <__swsetup_r+0x9e>
 800cba0:	2300      	movs	r3, #0
 800cba2:	60a3      	str	r3, [r4, #8]
 800cba4:	6963      	ldr	r3, [r4, #20]
 800cba6:	425b      	negs	r3, r3
 800cba8:	61a3      	str	r3, [r4, #24]
 800cbaa:	6923      	ldr	r3, [r4, #16]
 800cbac:	b943      	cbnz	r3, 800cbc0 <__swsetup_r+0xa8>
 800cbae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbb2:	d1c4      	bne.n	800cb3e <__swsetup_r+0x26>
 800cbb4:	bd38      	pop	{r3, r4, r5, pc}
 800cbb6:	0781      	lsls	r1, r0, #30
 800cbb8:	bf58      	it	pl
 800cbba:	6963      	ldrpl	r3, [r4, #20]
 800cbbc:	60a3      	str	r3, [r4, #8]
 800cbbe:	e7f4      	b.n	800cbaa <__swsetup_r+0x92>
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	e7f7      	b.n	800cbb4 <__swsetup_r+0x9c>
 800cbc4:	20000128 	.word	0x20000128

0800cbc8 <memmove>:
 800cbc8:	4288      	cmp	r0, r1
 800cbca:	b510      	push	{r4, lr}
 800cbcc:	eb01 0402 	add.w	r4, r1, r2
 800cbd0:	d902      	bls.n	800cbd8 <memmove+0x10>
 800cbd2:	4284      	cmp	r4, r0
 800cbd4:	4623      	mov	r3, r4
 800cbd6:	d807      	bhi.n	800cbe8 <memmove+0x20>
 800cbd8:	1e43      	subs	r3, r0, #1
 800cbda:	42a1      	cmp	r1, r4
 800cbdc:	d008      	beq.n	800cbf0 <memmove+0x28>
 800cbde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbe6:	e7f8      	b.n	800cbda <memmove+0x12>
 800cbe8:	4402      	add	r2, r0
 800cbea:	4601      	mov	r1, r0
 800cbec:	428a      	cmp	r2, r1
 800cbee:	d100      	bne.n	800cbf2 <memmove+0x2a>
 800cbf0:	bd10      	pop	{r4, pc}
 800cbf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbfa:	e7f7      	b.n	800cbec <memmove+0x24>

0800cbfc <_sbrk_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d06      	ldr	r5, [pc, #24]	; (800cc18 <_sbrk_r+0x1c>)
 800cc00:	2300      	movs	r3, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	602b      	str	r3, [r5, #0]
 800cc08:	f7f5 f948 	bl	8001e9c <_sbrk>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_sbrk_r+0x1a>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_sbrk_r+0x1a>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	200009d4 	.word	0x200009d4

0800cc1c <memcpy>:
 800cc1c:	440a      	add	r2, r1
 800cc1e:	4291      	cmp	r1, r2
 800cc20:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc24:	d100      	bne.n	800cc28 <memcpy+0xc>
 800cc26:	4770      	bx	lr
 800cc28:	b510      	push	{r4, lr}
 800cc2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc32:	4291      	cmp	r1, r2
 800cc34:	d1f9      	bne.n	800cc2a <memcpy+0xe>
 800cc36:	bd10      	pop	{r4, pc}

0800cc38 <abort>:
 800cc38:	b508      	push	{r3, lr}
 800cc3a:	2006      	movs	r0, #6
 800cc3c:	f000 f8f2 	bl	800ce24 <raise>
 800cc40:	2001      	movs	r0, #1
 800cc42:	f7f5 f8b3 	bl	8001dac <_exit>

0800cc46 <_calloc_r>:
 800cc46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc48:	fba1 2402 	umull	r2, r4, r1, r2
 800cc4c:	b94c      	cbnz	r4, 800cc62 <_calloc_r+0x1c>
 800cc4e:	4611      	mov	r1, r2
 800cc50:	9201      	str	r2, [sp, #4]
 800cc52:	f7fe ffbf 	bl	800bbd4 <_malloc_r>
 800cc56:	9a01      	ldr	r2, [sp, #4]
 800cc58:	4605      	mov	r5, r0
 800cc5a:	b930      	cbnz	r0, 800cc6a <_calloc_r+0x24>
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	b003      	add	sp, #12
 800cc60:	bd30      	pop	{r4, r5, pc}
 800cc62:	220c      	movs	r2, #12
 800cc64:	6002      	str	r2, [r0, #0]
 800cc66:	2500      	movs	r5, #0
 800cc68:	e7f8      	b.n	800cc5c <_calloc_r+0x16>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	f7fd ffc7 	bl	800abfe <memset>
 800cc70:	e7f4      	b.n	800cc5c <_calloc_r+0x16>

0800cc72 <__ascii_mbtowc>:
 800cc72:	b082      	sub	sp, #8
 800cc74:	b901      	cbnz	r1, 800cc78 <__ascii_mbtowc+0x6>
 800cc76:	a901      	add	r1, sp, #4
 800cc78:	b142      	cbz	r2, 800cc8c <__ascii_mbtowc+0x1a>
 800cc7a:	b14b      	cbz	r3, 800cc90 <__ascii_mbtowc+0x1e>
 800cc7c:	7813      	ldrb	r3, [r2, #0]
 800cc7e:	600b      	str	r3, [r1, #0]
 800cc80:	7812      	ldrb	r2, [r2, #0]
 800cc82:	1e10      	subs	r0, r2, #0
 800cc84:	bf18      	it	ne
 800cc86:	2001      	movne	r0, #1
 800cc88:	b002      	add	sp, #8
 800cc8a:	4770      	bx	lr
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	e7fb      	b.n	800cc88 <__ascii_mbtowc+0x16>
 800cc90:	f06f 0001 	mvn.w	r0, #1
 800cc94:	e7f8      	b.n	800cc88 <__ascii_mbtowc+0x16>

0800cc96 <_realloc_r>:
 800cc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9a:	4680      	mov	r8, r0
 800cc9c:	4614      	mov	r4, r2
 800cc9e:	460e      	mov	r6, r1
 800cca0:	b921      	cbnz	r1, 800ccac <_realloc_r+0x16>
 800cca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca6:	4611      	mov	r1, r2
 800cca8:	f7fe bf94 	b.w	800bbd4 <_malloc_r>
 800ccac:	b92a      	cbnz	r2, 800ccba <_realloc_r+0x24>
 800ccae:	f7fe ff1d 	bl	800baec <_free_r>
 800ccb2:	4625      	mov	r5, r4
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccba:	f000 f8f1 	bl	800cea0 <_malloc_usable_size_r>
 800ccbe:	4284      	cmp	r4, r0
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	d802      	bhi.n	800ccca <_realloc_r+0x34>
 800ccc4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccc8:	d812      	bhi.n	800ccf0 <_realloc_r+0x5a>
 800ccca:	4621      	mov	r1, r4
 800cccc:	4640      	mov	r0, r8
 800ccce:	f7fe ff81 	bl	800bbd4 <_malloc_r>
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d0ed      	beq.n	800ccb4 <_realloc_r+0x1e>
 800ccd8:	42bc      	cmp	r4, r7
 800ccda:	4622      	mov	r2, r4
 800ccdc:	4631      	mov	r1, r6
 800ccde:	bf28      	it	cs
 800cce0:	463a      	movcs	r2, r7
 800cce2:	f7ff ff9b 	bl	800cc1c <memcpy>
 800cce6:	4631      	mov	r1, r6
 800cce8:	4640      	mov	r0, r8
 800ccea:	f7fe feff 	bl	800baec <_free_r>
 800ccee:	e7e1      	b.n	800ccb4 <_realloc_r+0x1e>
 800ccf0:	4635      	mov	r5, r6
 800ccf2:	e7df      	b.n	800ccb4 <_realloc_r+0x1e>

0800ccf4 <__ascii_wctomb>:
 800ccf4:	b149      	cbz	r1, 800cd0a <__ascii_wctomb+0x16>
 800ccf6:	2aff      	cmp	r2, #255	; 0xff
 800ccf8:	bf85      	ittet	hi
 800ccfa:	238a      	movhi	r3, #138	; 0x8a
 800ccfc:	6003      	strhi	r3, [r0, #0]
 800ccfe:	700a      	strbls	r2, [r1, #0]
 800cd00:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd04:	bf98      	it	ls
 800cd06:	2001      	movls	r0, #1
 800cd08:	4770      	bx	lr
 800cd0a:	4608      	mov	r0, r1
 800cd0c:	4770      	bx	lr

0800cd0e <__swhatbuf_r>:
 800cd0e:	b570      	push	{r4, r5, r6, lr}
 800cd10:	460c      	mov	r4, r1
 800cd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd16:	2900      	cmp	r1, #0
 800cd18:	b096      	sub	sp, #88	; 0x58
 800cd1a:	4615      	mov	r5, r2
 800cd1c:	461e      	mov	r6, r3
 800cd1e:	da0d      	bge.n	800cd3c <__swhatbuf_r+0x2e>
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd26:	f04f 0100 	mov.w	r1, #0
 800cd2a:	bf0c      	ite	eq
 800cd2c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd30:	2340      	movne	r3, #64	; 0x40
 800cd32:	2000      	movs	r0, #0
 800cd34:	6031      	str	r1, [r6, #0]
 800cd36:	602b      	str	r3, [r5, #0]
 800cd38:	b016      	add	sp, #88	; 0x58
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	466a      	mov	r2, sp
 800cd3e:	f000 f879 	bl	800ce34 <_fstat_r>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	dbec      	blt.n	800cd20 <__swhatbuf_r+0x12>
 800cd46:	9901      	ldr	r1, [sp, #4]
 800cd48:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cd4c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cd50:	4259      	negs	r1, r3
 800cd52:	4159      	adcs	r1, r3
 800cd54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd58:	e7eb      	b.n	800cd32 <__swhatbuf_r+0x24>

0800cd5a <__smakebuf_r>:
 800cd5a:	898b      	ldrh	r3, [r1, #12]
 800cd5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd5e:	079d      	lsls	r5, r3, #30
 800cd60:	4606      	mov	r6, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	d507      	bpl.n	800cd76 <__smakebuf_r+0x1c>
 800cd66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	2301      	movs	r3, #1
 800cd70:	6163      	str	r3, [r4, #20]
 800cd72:	b002      	add	sp, #8
 800cd74:	bd70      	pop	{r4, r5, r6, pc}
 800cd76:	ab01      	add	r3, sp, #4
 800cd78:	466a      	mov	r2, sp
 800cd7a:	f7ff ffc8 	bl	800cd0e <__swhatbuf_r>
 800cd7e:	9900      	ldr	r1, [sp, #0]
 800cd80:	4605      	mov	r5, r0
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7fe ff26 	bl	800bbd4 <_malloc_r>
 800cd88:	b948      	cbnz	r0, 800cd9e <__smakebuf_r+0x44>
 800cd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd8e:	059a      	lsls	r2, r3, #22
 800cd90:	d4ef      	bmi.n	800cd72 <__smakebuf_r+0x18>
 800cd92:	f023 0303 	bic.w	r3, r3, #3
 800cd96:	f043 0302 	orr.w	r3, r3, #2
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	e7e3      	b.n	800cd66 <__smakebuf_r+0xc>
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	6020      	str	r0, [r4, #0]
 800cda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	9b00      	ldr	r3, [sp, #0]
 800cdaa:	6163      	str	r3, [r4, #20]
 800cdac:	9b01      	ldr	r3, [sp, #4]
 800cdae:	6120      	str	r0, [r4, #16]
 800cdb0:	b15b      	cbz	r3, 800cdca <__smakebuf_r+0x70>
 800cdb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f000 f84e 	bl	800ce58 <_isatty_r>
 800cdbc:	b128      	cbz	r0, 800cdca <__smakebuf_r+0x70>
 800cdbe:	89a3      	ldrh	r3, [r4, #12]
 800cdc0:	f023 0303 	bic.w	r3, r3, #3
 800cdc4:	f043 0301 	orr.w	r3, r3, #1
 800cdc8:	81a3      	strh	r3, [r4, #12]
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	431d      	orrs	r5, r3
 800cdce:	81a5      	strh	r5, [r4, #12]
 800cdd0:	e7cf      	b.n	800cd72 <__smakebuf_r+0x18>

0800cdd2 <_raise_r>:
 800cdd2:	291f      	cmp	r1, #31
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	d904      	bls.n	800cde6 <_raise_r+0x14>
 800cddc:	2316      	movs	r3, #22
 800cdde:	6003      	str	r3, [r0, #0]
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	bd38      	pop	{r3, r4, r5, pc}
 800cde6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cde8:	b112      	cbz	r2, 800cdf0 <_raise_r+0x1e>
 800cdea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdee:	b94b      	cbnz	r3, 800ce04 <_raise_r+0x32>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 f853 	bl	800ce9c <_getpid_r>
 800cdf6:	462a      	mov	r2, r5
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce00:	f000 b83a 	b.w	800ce78 <_kill_r>
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d00a      	beq.n	800ce1e <_raise_r+0x4c>
 800ce08:	1c59      	adds	r1, r3, #1
 800ce0a:	d103      	bne.n	800ce14 <_raise_r+0x42>
 800ce0c:	2316      	movs	r3, #22
 800ce0e:	6003      	str	r3, [r0, #0]
 800ce10:	2001      	movs	r0, #1
 800ce12:	e7e7      	b.n	800cde4 <_raise_r+0x12>
 800ce14:	2400      	movs	r4, #0
 800ce16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	4798      	blx	r3
 800ce1e:	2000      	movs	r0, #0
 800ce20:	e7e0      	b.n	800cde4 <_raise_r+0x12>
	...

0800ce24 <raise>:
 800ce24:	4b02      	ldr	r3, [pc, #8]	; (800ce30 <raise+0xc>)
 800ce26:	4601      	mov	r1, r0
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f7ff bfd2 	b.w	800cdd2 <_raise_r>
 800ce2e:	bf00      	nop
 800ce30:	20000128 	.word	0x20000128

0800ce34 <_fstat_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d07      	ldr	r5, [pc, #28]	; (800ce54 <_fstat_r+0x20>)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	602b      	str	r3, [r5, #0]
 800ce42:	f7f5 f802 	bl	8001e4a <_fstat>
 800ce46:	1c43      	adds	r3, r0, #1
 800ce48:	d102      	bne.n	800ce50 <_fstat_r+0x1c>
 800ce4a:	682b      	ldr	r3, [r5, #0]
 800ce4c:	b103      	cbz	r3, 800ce50 <_fstat_r+0x1c>
 800ce4e:	6023      	str	r3, [r4, #0]
 800ce50:	bd38      	pop	{r3, r4, r5, pc}
 800ce52:	bf00      	nop
 800ce54:	200009d4 	.word	0x200009d4

0800ce58 <_isatty_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d06      	ldr	r5, [pc, #24]	; (800ce74 <_isatty_r+0x1c>)
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4604      	mov	r4, r0
 800ce60:	4608      	mov	r0, r1
 800ce62:	602b      	str	r3, [r5, #0]
 800ce64:	f7f5 f801 	bl	8001e6a <_isatty>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_isatty_r+0x1a>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_isatty_r+0x1a>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	200009d4 	.word	0x200009d4

0800ce78 <_kill_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d07      	ldr	r5, [pc, #28]	; (800ce98 <_kill_r+0x20>)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	4611      	mov	r1, r2
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	f7f4 ff81 	bl	8001d8c <_kill>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	d102      	bne.n	800ce94 <_kill_r+0x1c>
 800ce8e:	682b      	ldr	r3, [r5, #0]
 800ce90:	b103      	cbz	r3, 800ce94 <_kill_r+0x1c>
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	bd38      	pop	{r3, r4, r5, pc}
 800ce96:	bf00      	nop
 800ce98:	200009d4 	.word	0x200009d4

0800ce9c <_getpid_r>:
 800ce9c:	f7f4 bf6e 	b.w	8001d7c <_getpid>

0800cea0 <_malloc_usable_size_r>:
 800cea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea4:	1f18      	subs	r0, r3, #4
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	bfbc      	itt	lt
 800ceaa:	580b      	ldrlt	r3, [r1, r0]
 800ceac:	18c0      	addlt	r0, r0, r3
 800ceae:	4770      	bx	lr

0800ceb0 <_init>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	bf00      	nop
 800ceb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	469e      	mov	lr, r3
 800ceba:	4770      	bx	lr

0800cebc <_fini>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	bf00      	nop
 800cec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec2:	bc08      	pop	{r3}
 800cec4:	469e      	mov	lr, r3
 800cec6:	4770      	bx	lr
